{ Invokable implementation File for Tandroidservice which implements Iandroidservice }

unit androidserviceImpl;

interface

uses Soap.InvokeRegistry, System.Types, Soap.XSBuiltIns, androidserviceIntf, dialogs,
sysutils, Soap.EncdDecd, uDM, Classes;

type

  { Tandroidservice }
  Tandroidservice = class(TInvokableClass, Iandroidservice)
  public
    function echoEnum(const Value: TEnumTest): TEnumTest; stdcall;
    function echoDoubleArray(const Value: TDoubleArray): TDoubleArray; stdcall;
    function echoMyEmployee(const Value: TMyEmployee): TMyEmployee; stdcall;
    function echoDouble(const Value: Double): Double; stdcall;
    function holamundo: String; stdcall;
    function guardadatosfirma(const Actividad,Frecuencia,Observaciones,FechaHora,Folio,Fecha,usuarioid,estacionid,firmabase64,fotobase64:AnsiString): AnsiString; stdcall;
    function login(usr,password:AnsiString): AnsiString; stdcall;
    function firmadefault(const Actividad, Frecuencia,
  Observaciones, FechaHora, Folio, Fecha, usuarioid, estacionid,
  firmabase64,fotobase64: AnsiString): AnsiString; stdcall;
    function obtendatosEmpleados(const estacionid: AnsiString; const turno: AnsiString): AnsiString; stdcall;
    function obtendatosActividadesProgramadas(const estacionid, Tipo: AnsiString): AnsiString; stdcall;
    function obtenNotificacionesDiarias(const estacionid: AnsiString): AnsiString; stdcall;
    function registraactividadrealizada(const status, nota, idmantenimiento: AnsiString): AnsiString; stdcall;
  end;

implementation

function Tandroidservice.echoEnum(const Value: TEnumTest): TEnumTest; stdcall;
begin
  { TODO : Implement method echoEnum }
  Result := Value;
end;

function Tandroidservice.echoDoubleArray(const Value: TDoubleArray): TDoubleArray; stdcall;
begin
  { TODO : Implement method echoDoubleArray }
  Result := Value;
end;

function Tandroidservice.echoMyEmployee(const Value: TMyEmployee): TMyEmployee; stdcall;
begin
  { TODO : Implement method echoMyEmployee }
  Result := TMyEmployee.Create;
end;

function Tandroidservice.firmadefault(const Actividad, Frecuencia,
  Observaciones, FechaHora, Folio, Fecha, usuarioid, estacionid,
  firmabase64,fotobase64: AnsiString): AnsiString; stdcall;
var
  respuesta: AnsiString;
  memStm : TMemoryStream;
  fol: integer;
  resultado: AnsiString;
  bytes: TBytes;
  str: String;

begin
  respuesta:= '-1';

  bytes :=  DecodeBase64(fotobase64);
  str := TEncoding.ANSI.GetString(bytes);

  memStm:= TMemoryStream.Create;

  DM.cdsFirmaDefaultUsuario.Close;
  DM.cdsFirmaDefaultUsuario.ParamByName('USUARIOID').AsInteger:= strtoint(usuarioid);
  DM.cdsFirmaDefaultUsuario.Open;

  if NOT (DM.cdsFirmaDefaultUsuario.Eof) then
  begin
     DM.cdsFirmaDefaultUsuario.FieldByName('FIRMADEFAULT').SaveToStream(memStm);
  //
  //   respuesta:= EncodeBase64(memStm, memStm.Size);
  end;
  fol:= DM.Folio('BITACORAID','');

  DM.cdsBitacoraServ.Close;
  DM.cdsBitacoraServ.Open;

  try

  DM.cdsBitacoraServ.Append;
  DM.cdsBitacoraServ.FieldByName('BITACORAID').AsInteger:= fol;
  DM.cdsBitacoraServ.FieldByName('USUARIOID').AsInteger:= strtoint(usuarioid);
  DM.cdsBitacoraServ.FieldByName('FECHA').AsDateTime:= strtodate(Fecha);
  DM.cdsBitacoraServ.FieldByName('NOTA').AsString:= '.';
  DM.cdsBitacoraServ.FieldByName('ACTIVIDAD').AsString:= Actividad;
  DM.cdsBitacoraServ.FieldByName('FRECUENCIA').AsString:= Frecuencia;
  DM.cdsBitacoraServ.FieldByName('OBSERVACIONES').AsString:= Observaciones;
  DM.cdsBitacoraServ.FieldByName('ESTACIONID').AsInteger:= strtoint(estacionid);
  DM.cdsBitacoraServ.FieldByName('FECHAHORA').AsDateTime:= StrToDateTime(FechaHora);
  DM.cdsBitacoraServ.FieldByName('FOLIO').AsString:= Folio;
  DM.cdsBitacoraServ.FieldByName('FIRMA').LoadFromStream(memStm);
  DM.cdsBitacoraServ.FieldByName('FOTO1').AsString:= str;

  DM.cdsBitacoraServ.Post;
  DM.cdsBitacoraServ.ApplyUpdates();
  respuesta:= ' OK';
 except
    on E : Exception do
    respuesta:= E.ClassName+' error raised, with message : '+E.Message;
  end;

  result:= respuesta;
end;

function Tandroidservice.guardadatosfirma(const Actividad, Frecuencia,
  Observaciones, FechaHora, Folio, Fecha, usuarioid, estacionid,
  firmabase64,fotobase64: AnsiString): AnsiString; stdcall;
var
  bytes, bytes2: TBytes;
  str, str2: String;
  fol: integer;
  resultado: AnsiString;
begin
  resultado:= '-1';
  bytes :=  DecodeBase64(firmabase64);
  str := TEncoding.ANSI.GetString(bytes);

  bytes2:= DecodeBase64(fotobase64);
  str2:= TEncoding.ANSI.GetString(bytes2);

  fol:= DM.Folio('BITACORAID','');

  DM.cdsBitacoraServ.Close;
  DM.cdsBitacoraServ.Open;

  try

  DM.cdsBitacoraServ.Append;
  DM.cdsBitacoraServ.FieldByName('BITACORAID').AsInteger:= fol;
  DM.cdsBitacoraServ.FieldByName('USUARIOID').AsInteger:= strtoint(usuarioid);
  DM.cdsBitacoraServ.FieldByName('FECHA').AsDateTime:= strtodate(Fecha);
  DM.cdsBitacoraServ.FieldByName('NOTA').AsString:= '.';
  DM.cdsBitacoraServ.FieldByName('ACTIVIDAD').AsString:= Actividad;
  DM.cdsBitacoraServ.FieldByName('FRECUENCIA').AsString:= Frecuencia;
  DM.cdsBitacoraServ.FieldByName('OBSERVACIONES').AsString:= Observaciones;
  DM.cdsBitacoraServ.FieldByName('ESTACIONID').AsInteger:= strtoint(estacionid);
  DM.cdsBitacoraServ.FieldByName('FECHAHORA').AsDateTime:= StrToDateTime(FechaHora);
  DM.cdsBitacoraServ.FieldByName('FOLIO').AsString:= Folio;
  DM.cdsBitacoraServ.FieldByName('FIRMA').AsString:= str;
  DM.cdsBitacoraServ.FieldByName('FOTO1').AsString:= str2;

  DM.cdsBitacoraServ.Post;
  DM.cdsBitacoraServ.ApplyUpdates();

  resultado:= ' OK';
 except
    on E : Exception do
    resultado:= E.ClassName+' error raised, with message : '+E.Message;
  end;

  result:= resultado;
end;

function Tandroidservice.holamundo: String;
begin
  showmessage('hola');
end;

function Tandroidservice.login(usr, password: AnsiString): AnsiString; stdcall;
begin
  result:= DM.login(usr, password);
end;

function Tandroidservice.obtendatosActividadesProgramadas(const estacionid,
  Tipo: AnsiString): AnsiString; stdcall;
begin
  result:= DM.Servidor.obtendatosActividadesProgramadas(strtoint(estacionid), strtoint(Tipo));
end;

function Tandroidservice.obtendatosEmpleados(
  const estacionid: AnsiString; const turno: AnsiString): AnsiString; stdcall;
begin
  result:= DM.Servidor.obtendatosempleados(estacionid);
end;

function Tandroidservice.obtenNotificacionesDiarias(
  const estacionid: AnsiString): AnsiString; stdcall;
begin
  result:= DM.Servidor.obtenNotificacionesDiarias(strtoint(estacionid));
end;

function Tandroidservice.registraactividadrealizada(const status, nota,
  idmantenimiento: AnsiString): AnsiString; stdcall;
begin
  result:= DM.Servidor.registraactividadrealizada(strtoint(idmantenimiento),nota,status);
end;

function Tandroidservice.echoDouble(const Value: Double): Double; stdcall;
begin
  { TODO : Implement method echoDouble }
  Result := Value;
end;


initialization
{ Invokable classes must be registered }
   InvRegistry.RegisterInvokableClass(Tandroidservice);
end.

