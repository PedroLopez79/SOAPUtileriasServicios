unit LibraryEmpresas_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROUri, uROProxy, uROExceptions, uROXMLIntf, uROClasses, uROTypes, uROClientIntf,
  {Used RODLs:} DataAbstract4_Intf;

const
  { Library ID }
  LibraryUID = '{BE2DC080-021D-4410-AE12-47322D2F0A40}';
  TargetNamespace = '';

  { Service Interface ID's }
  IServiceEmpresas_IID : TGUID = '{762597B5-7713-4971-8C5A-32F68BB623AB}';

type
  TSeekOrigin = Classes.TSeekOrigin; // fake declaration
  { Forward declarations }
  IServiceEmpresas = interface;

  AAgrupacion = class;
  AAgrupacionBomba = class;
  ADatosCelular = class;
  ADespachadorLiquidacion = class;
  ADetalleExpress = class;
  ADetalleFacturaPemex = class;
  ADetalleLiquidacion = class;
  ArrayOpcion = class;
  ATCarteraVale = class;
  ATDetalleCupon = class;
  ATDetalleFactura = class;
  ATDetalleRecibo = class;
  ATDetalleTransaccion = class;
  ATDetalleValeCreditoFactura = class;
  ATFacturaElectronicaDetalleImportes = class;
  ATFacturaElectronicaDetalleImpuestos = class;
  ATipoValor = class;
  ATLiquidacionDetalle = class;
  ATLiquidacionProducto = class;
  ATTicketFactura = class;

  TParametros = class;
  TFactura = class;
  TDetalleFactura = class;
  TTicketFactura = class;
  TDetalleCupon = class;
  TDetalleValeCreditoFactura = class;
  TDatosFactura = class;
  TLiquidacion = class;
  TLiquidacionDetalle = class;
  TLiquidacionProducto = class;
  TTransaccion = class;
  TDetalleTransaccion = class;
  TCarteraVale = class;
  TDatosLiquidacion = class;
  TReporte = class;
  TRecibo = class;
  TDetalleReciboPago = class;
  TDatosReciboPago = class;
  TDatosRecibo = class;
  TLoginInfo = class;
  TOpcion = class;
  TConsumoExpress = class;
  TDatosCliente = class;
  TFacturaExpress = class;
  TDetalleExpress = class;
  TValoresTurno = class;
  TOtroProducto = class;
  TAgrupacion = class;
  TSagarpa = class;
  TDatosPuntos = class;
  TDatosCelular = class;
  TEntregaPremio = class;
  TDatosPremio = class;
  TConfirmaEnvioA = class;
  TDatosCerrarLiquidacion = class;
  TDespachadorLiquidacion = class;
  TDetalleLiquidacion = class;
  TTipoValor = class;
  TPerfilPuntos = class;
  TFacturaElectronica = class;
  TFacturaElectronicaDetalleImportes = class;
  TFacturaElectronicaDetalleImpuestos = class;
  TDatosFacturaPemex = class;
  TDetalleFacturaPemex = class;

  { TParametros }
  TParametros = class(TROComplexType)
  private
    fFechaIni: DateTime;
    fFechaFin: DateTime;
    fClienteIni: Integer;
    fClienteFin: Integer;
    fEstacion: Integer;
    fSecuenciaIni: Integer;
    fSecuenciaFin: Integer;
    fFactura: Integer;
    fFolioFactura: Integer;
    fSerie: AnsiString;
    fEjercicio: Integer;
    fPeriodo: Integer;
    fDia: Integer;
    fEjercicioFin: Integer;
    fPeriodoFin: Integer;
    fDiaFin: Integer;
    fSecuencia: AnsiString;
    fStatus: AnsiString;
    fAgrupacion: Integer;
    fAlmacen: Integer;
    fSecuenciaIniLiquidacion: Integer;
    fSecuenciaFinLiquidacion: Integer;
    fFacturasdeCompras: Integer;
    fMontoFacturado: Double;
    fTurno: Integer;
    fEmpleadoIni: Integer;
    fEmpleadoFin: Integer;
    fEstacionIni: Integer;
    fEstacionFin: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FechaIni:DateTime read fFechaIni write fFechaIni;
    property FechaFin:DateTime read fFechaFin write fFechaFin;
    property ClienteIni:Integer read fClienteIni write fClienteIni;
    property ClienteFin:Integer read fClienteFin write fClienteFin;
    property Estacion:Integer read fEstacion write fEstacion;
    property SecuenciaIni:Integer read fSecuenciaIni write fSecuenciaIni;
    property SecuenciaFin:Integer read fSecuenciaFin write fSecuenciaFin;
    property Factura:Integer read fFactura write fFactura;
    property FolioFactura:Integer read fFolioFactura write fFolioFactura;
    property Serie:AnsiString read fSerie write fSerie;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property Periodo:Integer read fPeriodo write fPeriodo;
    property Dia:Integer read fDia write fDia;
    property EjercicioFin:Integer read fEjercicioFin write fEjercicioFin;
    property PeriodoFin:Integer read fPeriodoFin write fPeriodoFin;
    property DiaFin:Integer read fDiaFin write fDiaFin;
    property Secuencia:AnsiString read fSecuencia write fSecuencia;
    property Status:AnsiString read fStatus write fStatus;
    property Agrupacion:Integer read fAgrupacion write fAgrupacion;
    property Almacen:Integer read fAlmacen write fAlmacen;
    property SecuenciaIniLiquidacion:Integer read fSecuenciaIniLiquidacion write fSecuenciaIniLiquidacion;
    property SecuenciaFinLiquidacion:Integer read fSecuenciaFinLiquidacion write fSecuenciaFinLiquidacion;
    property FacturasdeCompras:Integer read fFacturasdeCompras write fFacturasdeCompras;
    property MontoFacturado:Double read fMontoFacturado write fMontoFacturado;
    property Turno:Integer read fTurno write fTurno;
    property EmpleadoIni:Integer read fEmpleadoIni write fEmpleadoIni;
    property EmpleadoFin:Integer read fEmpleadoFin write fEmpleadoFin;
    property EstacionIni:Integer read fEstacionIni write fEstacionIni;
    property EstacionFin:Integer read fEstacionFin write fEstacionFin;
  end;

  { TParametrosCollection }
  TParametrosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TParametros;
    procedure SetItems(aIndex: Integer; const Value: TParametros);
  public
    constructor Create; overload;
    function Add: TParametros; reintroduce;
    property Items[Index: Integer]:TParametros read GetItems write SetItems; default;
  end;

  { TFactura }
  TFactura = class(TROComplexType)
  private
    fSerie: AnsiString;
    fFecha: DateTime;
    fSubtotal: Double;
    fImpuesto: Double;
    fTotal: Double;
    fImpuestoPorcentaje: Double;
    fTurno: Integer;
    fEstacionID: Integer;
    fClienteID: Integer;
    fFormaPagoID: Integer;
    fTipoFacturaID: Integer;
    fFacturaID: Integer;
    fTickets: AnsiString;
    fUsuarioID: Integer;
    fISR: Double;
    fIVARTN: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Serie:AnsiString read fSerie write fSerie;
    property Fecha:DateTime read fFecha write fFecha;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property Total:Double read fTotal write fTotal;
    property ImpuestoPorcentaje:Double read fImpuestoPorcentaje write fImpuestoPorcentaje;
    property Turno:Integer read fTurno write fTurno;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property FormaPagoID:Integer read fFormaPagoID write fFormaPagoID;
    property TipoFacturaID:Integer read fTipoFacturaID write fTipoFacturaID;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Tickets:AnsiString read fTickets write fTickets;
    property UsuarioID:Integer read fUsuarioID write fUsuarioID;
    property ISR:Double read fISR write fISR;
    property IVARTN:Double read fIVARTN write fIVARTN;
  end;

  { TFacturaCollection }
  TFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TFactura;
    procedure SetItems(aIndex: Integer; const Value: TFactura);
  public
    constructor Create; overload;
    function Add: TFactura; reintroduce;
    property Items[Index: Integer]:TFactura read GetItems write SetItems; default;
  end;

  { TDetalleFactura }
  TDetalleFactura = class(TROComplexType)
  private
    fCantidad: Double;
    fPrecio: Double;
    fImporte: Double;
    fFacturaID: Integer;
    fProductoID: Integer;
    fCodigo: AnsiString;
    fDescripcion: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property Codigo:AnsiString read fCodigo write fCodigo;
    property Descripcion:AnsiString read fDescripcion write fDescripcion;
  end;

  { TDetalleFacturaCollection }
  TDetalleFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDetalleFactura;
    procedure SetItems(aIndex: Integer; const Value: TDetalleFactura);
  public
    constructor Create; overload;
    function Add: TDetalleFactura; reintroduce;
    procedure SaveToArray(anArray: ATDetalleFactura);
    procedure LoadFromArray(anArray: ATDetalleFactura);
    property Items[Index: Integer]:TDetalleFactura read GetItems write SetItems; default;
  end;

  { TTicketFactura }
  TTicketFactura = class(TROComplexType)
  private
    fTicketID: Integer;
    fFecha: DateTime;
    fVolumen: Double;
    fPrecio: Double;
    fImporte: Double;
    fProductoID: Integer;
    fFacturaID: Integer;
    fEstacionID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TicketID:Integer read fTicketID write fTicketID;
    property Fecha:DateTime read fFecha write fFecha;
    property Volumen:Double read fVolumen write fVolumen;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property ProductoID:Integer read fProductoID write fProductoID;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
  end;

  { TTicketFacturaCollection }
  TTicketFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TTicketFactura;
    procedure SetItems(aIndex: Integer; const Value: TTicketFactura);
  public
    constructor Create; overload;
    function Add: TTicketFactura; reintroduce;
    procedure SaveToArray(anArray: ATTicketFactura);
    procedure LoadFromArray(anArray: ATTicketFactura);
    property Items[Index: Integer]:TTicketFactura read GetItems write SetItems; default;
  end;

  { TDetalleCupon }
  TDetalleCupon = class(TROComplexType)
  private
    fDenominacion: Double;
    fCantidad: Double;
    fReferencia: AnsiString;
    fFacturaID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Denominacion:Double read fDenominacion write fDenominacion;
    property Cantidad:Double read fCantidad write fCantidad;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property FacturaID:Integer read fFacturaID write fFacturaID;
  end;

  { TDetalleCuponCollection }
  TDetalleCuponCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDetalleCupon;
    procedure SetItems(aIndex: Integer; const Value: TDetalleCupon);
  public
    constructor Create; overload;
    function Add: TDetalleCupon; reintroduce;
    procedure SaveToArray(anArray: ATDetalleCupon);
    procedure LoadFromArray(anArray: ATDetalleCupon);
    property Items[Index: Integer]:TDetalleCupon read GetItems write SetItems; default;
  end;

  { TDetalleValeCreditoFactura }
  TDetalleValeCreditoFactura = class(TROComplexType)
  private
    fNoVale: Integer;
    fImporte: Double;
    fFacturaID: Integer;
    fCarteraValeCreditoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property NoVale:Integer read fNoVale write fNoVale;
    property Importe:Double read fImporte write fImporte;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property CarteraValeCreditoID:Integer read fCarteraValeCreditoID write fCarteraValeCreditoID;
  end;

  { TDetalleValeCreditoFacturaCollection }
  TDetalleValeCreditoFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDetalleValeCreditoFactura;
    procedure SetItems(aIndex: Integer; const Value: TDetalleValeCreditoFactura);
  public
    constructor Create; overload;
    function Add: TDetalleValeCreditoFactura; reintroduce;
    procedure SaveToArray(anArray: ATDetalleValeCreditoFactura);
    procedure LoadFromArray(anArray: ATDetalleValeCreditoFactura);
    property Items[Index: Integer]:TDetalleValeCreditoFactura read GetItems write SetItems; default;
  end;

  { TDatosFactura }
  TDatosFactura = class(TROComplexType)
  private
    fFactura: TFactura;
    fDetalles: ATDetalleFactura;
    fTickets: ATTicketFactura;
    fDetalleCupon: ATDetalleCupon;
    fVales: ATDetalleValeCreditoFactura;
    fValesS: AnsiString;
    fCliente: TDatosCliente;
    function GetFactura: TFactura;
    function GetDetalles: ATDetalleFactura;
    function GetTickets: ATTicketFactura;
    function GetDetalleCupon: ATDetalleCupon;
    function GetVales: ATDetalleValeCreditoFactura;
    function GetCliente: TDatosCliente;
  protected
    property int_Factura: TFactura read fFactura;
    property int_Detalles: ATDetalleFactura read fDetalles;
    property int_Tickets: ATTicketFactura read fTickets;
    property int_DetalleCupon: ATDetalleCupon read fDetalleCupon;
    property int_Vales: ATDetalleValeCreditoFactura read fVales;
    property int_Cliente: TDatosCliente read fCliente;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Factura:TFactura read GetFactura write fFactura;
    property Detalles:ATDetalleFactura read GetDetalles write fDetalles;
    property Tickets:ATTicketFactura read GetTickets write fTickets;
    property DetalleCupon:ATDetalleCupon read GetDetalleCupon write fDetalleCupon;
    property Vales:ATDetalleValeCreditoFactura read GetVales write fVales;
    property ValesS:AnsiString read fValesS write fValesS;
    property Cliente:TDatosCliente read GetCliente write fCliente;
  end;

  { TDatosFacturaCollection }
  TDatosFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosFactura;
    procedure SetItems(aIndex: Integer; const Value: TDatosFactura);
  public
    constructor Create; overload;
    function Add: TDatosFactura; reintroduce;
    property Items[Index: Integer]:TDatosFactura read GetItems write SetItems; default;
  end;

  { TLiquidacion }
  TLiquidacion = class(TROComplexType)
  private
    fLiquidacionID: Integer;
    fFecha: DateTime;
    fVentasTotales: Double;
    fAnticipos: Double;
    fDiferencias: Double;
    fSecuencia: Integer;
    fEstacionID: Integer;
    fDespachadorID: Integer;
    fAgrupacionID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property LiquidacionID:Integer read fLiquidacionID write fLiquidacionID;
    property Fecha:DateTime read fFecha write fFecha;
    property VentasTotales:Double read fVentasTotales write fVentasTotales;
    property Anticipos:Double read fAnticipos write fAnticipos;
    property Diferencias:Double read fDiferencias write fDiferencias;
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property DespachadorID:Integer read fDespachadorID write fDespachadorID;
    property AgrupacionID:Integer read fAgrupacionID write fAgrupacionID;
  end;

  { TLiquidacionCollection }
  TLiquidacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TLiquidacion;
    procedure SetItems(aIndex: Integer; const Value: TLiquidacion);
  public
    constructor Create; overload;
    function Add: TLiquidacion; reintroduce;
    property Items[Index: Integer]:TLiquidacion read GetItems write SetItems; default;
  end;

  { TLiquidacionDetalle }
  TLiquidacionDetalle = class(TROComplexType)
  private
    fLiquidacionDetalleID: Integer;
    fImporte: Double;
    fSecuencia: Integer;
    fReferencia: AnsiString;
    fTicket: Integer;
    fCupon: AnsiString;
    fLiquidacionID: Integer;
    fTipoValorID: Integer;
    fBancoID: Integer;
    fSalidaID: Integer;
    fClienteID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property LiquidacionDetalleID:Integer read fLiquidacionDetalleID write fLiquidacionDetalleID;
    property Importe:Double read fImporte write fImporte;
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Ticket:Integer read fTicket write fTicket;
    property Cupon:AnsiString read fCupon write fCupon;
    property LiquidacionID:Integer read fLiquidacionID write fLiquidacionID;
    property TipoValorID:Integer read fTipoValorID write fTipoValorID;
    property BancoID:Integer read fBancoID write fBancoID;
    property SalidaID:Integer read fSalidaID write fSalidaID;
    property ClienteID:Integer read fClienteID write fClienteID;
  end;

  { TLiquidacionDetalleCollection }
  TLiquidacionDetalleCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TLiquidacionDetalle;
    procedure SetItems(aIndex: Integer; const Value: TLiquidacionDetalle);
  public
    constructor Create; overload;
    function Add: TLiquidacionDetalle; reintroduce;
    procedure SaveToArray(anArray: ATLiquidacionDetalle);
    procedure LoadFromArray(anArray: ATLiquidacionDetalle);
    property Items[Index: Integer]:TLiquidacionDetalle read GetItems write SetItems; default;
  end;

  { TLiquidacionProducto }
  TLiquidacionProducto = class(TROComplexType)
  private
    fPrecioVenta: Double;
    fInventarioInicial: Double;
    fInventarioFinal: Double;
    fCantidad: Double;
    fImporte: Double;
    fSecuencia: Integer;
    fTraspasos: Double;
    fProductoID: Integer;
    fBombaID: Integer;
    fCosto: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property PrecioVenta:Double read fPrecioVenta write fPrecioVenta;
    property InventarioInicial:Double read fInventarioInicial write fInventarioInicial;
    property InventarioFinal:Double read fInventarioFinal write fInventarioFinal;
    property Cantidad:Double read fCantidad write fCantidad;
    property Importe:Double read fImporte write fImporte;
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property Traspasos:Double read fTraspasos write fTraspasos;
    property ProductoID:Integer read fProductoID write fProductoID;
    property BombaID:Integer read fBombaID write fBombaID;
    property Costo:Double read fCosto write fCosto;
  end;

  { TLiquidacionProductoCollection }
  TLiquidacionProductoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TLiquidacionProducto;
    procedure SetItems(aIndex: Integer; const Value: TLiquidacionProducto);
  public
    constructor Create; overload;
    function Add: TLiquidacionProducto; reintroduce;
    procedure SaveToArray(anArray: ATLiquidacionProducto);
    procedure LoadFromArray(anArray: ATLiquidacionProducto);
    property Items[Index: Integer]:TLiquidacionProducto read GetItems write SetItems; default;
  end;

  { TTransaccion }
  TTransaccion = class(TROComplexType)
  private
    fTransaccionID: Integer;
    fFolio: Integer;
    fTipo: AnsiString;
    fCredito: Boolean;
    fReferencia: AnsiString;
    fFecha: DateTime;
    fTotal: Double;
    fSubtotal: Double;
    fImpuesto: Double;
    fPlazo: Integer;
    fSecuencia: Integer;
    fEstacionDestinoID: Integer;
    fAlmacenDestinoID: Integer;
    fEstacionID: Integer;
    fProveedorId: Integer;
    fAlmacenID: Integer;
    fMovimientoAlmacen: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TransaccionID:Integer read fTransaccionID write fTransaccionID;
    property Folio:Integer read fFolio write fFolio;
    property Tipo:AnsiString read fTipo write fTipo;
    property Credito:Boolean read fCredito write fCredito;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Fecha:DateTime read fFecha write fFecha;
    property Total:Double read fTotal write fTotal;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property Plazo:Integer read fPlazo write fPlazo;
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property EstacionDestinoID:Integer read fEstacionDestinoID write fEstacionDestinoID;
    property AlmacenDestinoID:Integer read fAlmacenDestinoID write fAlmacenDestinoID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property ProveedorId:Integer read fProveedorId write fProveedorId;
    property AlmacenID:Integer read fAlmacenID write fAlmacenID;
    property MovimientoAlmacen:Integer read fMovimientoAlmacen write fMovimientoAlmacen;
  end;

  { TTransaccionCollection }
  TTransaccionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TTransaccion;
    procedure SetItems(aIndex: Integer; const Value: TTransaccion);
  public
    constructor Create; overload;
    function Add: TTransaccion; reintroduce;
    property Items[Index: Integer]:TTransaccion read GetItems write SetItems; default;
  end;

  { TDetalleTransaccion }
  TDetalleTransaccion = class(TROComplexType)
  private
    fDetalleTransaccionID: Integer;
    fCantidad: Double;
    fCosto: Double;
    fTransaccionID: Integer;
    fProductoID: Integer;
    fTipo: AnsiString;
    fOperador: Integer;
    fMovimientoAlmacen: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property DetalleTransaccionID:Integer read fDetalleTransaccionID write fDetalleTransaccionID;
    property Cantidad:Double read fCantidad write fCantidad;
    property Costo:Double read fCosto write fCosto;
    property TransaccionID:Integer read fTransaccionID write fTransaccionID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property Tipo:AnsiString read fTipo write fTipo;
    property Operador:Integer read fOperador write fOperador;
    property MovimientoAlmacen:Integer read fMovimientoAlmacen write fMovimientoAlmacen;
  end;

  { TDetalleTransaccionCollection }
  TDetalleTransaccionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDetalleTransaccion;
    procedure SetItems(aIndex: Integer; const Value: TDetalleTransaccion);
  public
    constructor Create; overload;
    function Add: TDetalleTransaccion; reintroduce;
    procedure SaveToArray(anArray: ATDetalleTransaccion);
    procedure LoadFromArray(anArray: ATDetalleTransaccion);
    property Items[Index: Integer]:TDetalleTransaccion read GetItems write SetItems; default;
  end;

  { TCarteraVale }
  TCarteraVale = class(TROComplexType)
  private
    fCarteraValeCreditoID: Integer;
    fNoVale: Integer;
    fTicket: Integer;
    fImporte: Double;
    fFecha: DateTime;
    fStatus: AnsiString;
    fFacturaID: Integer;
    fEstacionID: Integer;
    fClienteID: Integer;
    fLiquidacionDetalleID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CarteraValeCreditoID:Integer read fCarteraValeCreditoID write fCarteraValeCreditoID;
    property NoVale:Integer read fNoVale write fNoVale;
    property Ticket:Integer read fTicket write fTicket;
    property Importe:Double read fImporte write fImporte;
    property Fecha:DateTime read fFecha write fFecha;
    property Status:AnsiString read fStatus write fStatus;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property LiquidacionDetalleID:Integer read fLiquidacionDetalleID write fLiquidacionDetalleID;
  end;

  { TCarteraValeCollection }
  TCarteraValeCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TCarteraVale;
    procedure SetItems(aIndex: Integer; const Value: TCarteraVale);
  public
    constructor Create; overload;
    function Add: TCarteraVale; reintroduce;
    procedure SaveToArray(anArray: ATCarteraVale);
    procedure LoadFromArray(anArray: ATCarteraVale);
    property Items[Index: Integer]:TCarteraVale read GetItems write SetItems; default;
  end;

  { TDatosLiquidacion }
  TDatosLiquidacion = class(TROComplexType)
  private
    fLiquidacion: TLiquidacion;
    fLiquidacionDetalle: ATLiquidacionDetalle;
    fLiquidacionProducto: ATLiquidacionProducto;
    fLiquidacionCombustible: ATLiquidacionProducto;
    fTraspaso: TTransaccion;
    fVenta: TTransaccion;
    fDetalleTraspaso: ATDetalleTransaccion;
    fDetalleVenta: ATDetalleTransaccion;
    fCarteraVales: ATCarteraVale;
    function GetLiquidacion: TLiquidacion;
    function GetLiquidacionDetalle: ATLiquidacionDetalle;
    function GetLiquidacionProducto: ATLiquidacionProducto;
    function GetLiquidacionCombustible: ATLiquidacionProducto;
    function GetTraspaso: TTransaccion;
    function GetVenta: TTransaccion;
    function GetDetalleTraspaso: ATDetalleTransaccion;
    function GetDetalleVenta: ATDetalleTransaccion;
    function GetCarteraVales: ATCarteraVale;
  protected
    property int_Liquidacion: TLiquidacion read fLiquidacion;
    property int_LiquidacionDetalle: ATLiquidacionDetalle read fLiquidacionDetalle;
    property int_LiquidacionProducto: ATLiquidacionProducto read fLiquidacionProducto;
    property int_LiquidacionCombustible: ATLiquidacionProducto read fLiquidacionCombustible;
    property int_Traspaso: TTransaccion read fTraspaso;
    property int_Venta: TTransaccion read fVenta;
    property int_DetalleTraspaso: ATDetalleTransaccion read fDetalleTraspaso;
    property int_DetalleVenta: ATDetalleTransaccion read fDetalleVenta;
    property int_CarteraVales: ATCarteraVale read fCarteraVales;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Liquidacion:TLiquidacion read GetLiquidacion write fLiquidacion;
    property LiquidacionDetalle:ATLiquidacionDetalle read GetLiquidacionDetalle write fLiquidacionDetalle;
    property LiquidacionProducto:ATLiquidacionProducto read GetLiquidacionProducto write fLiquidacionProducto;
    property LiquidacionCombustible:ATLiquidacionProducto read GetLiquidacionCombustible write fLiquidacionCombustible;
    property Traspaso:TTransaccion read GetTraspaso write fTraspaso;
    property Venta:TTransaccion read GetVenta write fVenta;
    property DetalleTraspaso:ATDetalleTransaccion read GetDetalleTraspaso write fDetalleTraspaso;
    property DetalleVenta:ATDetalleTransaccion read GetDetalleVenta write fDetalleVenta;
    property CarteraVales:ATCarteraVale read GetCarteraVales write fCarteraVales;
  end;

  { TDatosLiquidacionCollection }
  TDatosLiquidacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosLiquidacion;
    procedure SetItems(aIndex: Integer; const Value: TDatosLiquidacion);
  public
    constructor Create; overload;
    function Add: TDatosLiquidacion; reintroduce;
    property Items[Index: Integer]:TDatosLiquidacion read GetItems write SetItems; default;
  end;

  { TReporte }
  TReporte = class(TROComplexType)
  private
    fSQL1: AnsiString;
    fSQL2: AnsiString;
    fTemplate: AnsiString;
    fCampoJoin: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property SQL1:AnsiString read fSQL1 write fSQL1;
    property SQL2:AnsiString read fSQL2 write fSQL2;
    property Template:AnsiString read fTemplate write fTemplate;
    property CampoJoin:AnsiString read fCampoJoin write fCampoJoin;
  end;

  { TReporteCollection }
  TReporteCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TReporte;
    procedure SetItems(aIndex: Integer; const Value: TReporte);
  public
    constructor Create; overload;
    function Add: TReporte; reintroduce;
    property Items[Index: Integer]:TReporte read GetItems write SetItems; default;
  end;

  { TRecibo }
  TRecibo = class(TROComplexType)
  private
    fSerie: AnsiString;
    fFolio: Integer;
    fFecha: DateTime;
    fSubtotal: Double;
    fEjercicio: Integer;
    fPeriodo: Integer;
    fDia: Integer;
    fImpuesto: Double;
    fTotal: Double;
    fClienteID: Integer;
    fEstacionID: Integer;
    fFormaPagoID: Integer;
    fReciboPagoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:Integer read fFolio write fFolio;
    property Fecha:DateTime read fFecha write fFecha;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property Periodo:Integer read fPeriodo write fPeriodo;
    property Dia:Integer read fDia write fDia;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property Total:Double read fTotal write fTotal;
    property ClienteID:Integer read fClienteID write fClienteID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property FormaPagoID:Integer read fFormaPagoID write fFormaPagoID;
    property ReciboPagoID:Integer read fReciboPagoID write fReciboPagoID;
  end;

  { TReciboCollection }
  TReciboCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TRecibo;
    procedure SetItems(aIndex: Integer; const Value: TRecibo);
  public
    constructor Create; overload;
    function Add: TRecibo; reintroduce;
    property Items[Index: Integer]:TRecibo read GetItems write SetItems; default;
  end;

  { TDetalleReciboPago }
  TDetalleReciboPago = class(TROComplexType)
  private
    fFacturaID: Integer;
    fTotal: Double;
    fReciboID: Integer;
    fItemNo: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Total:Double read fTotal write fTotal;
    property ReciboID:Integer read fReciboID write fReciboID;
    property ItemNo:Integer read fItemNo write fItemNo;
  end;

  { TDetalleReciboPagoCollection }
  TDetalleReciboPagoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDetalleReciboPago;
    procedure SetItems(aIndex: Integer; const Value: TDetalleReciboPago);
  public
    constructor Create; overload;
    function Add: TDetalleReciboPago; reintroduce;
    procedure SaveToArray(anArray: ATDetalleRecibo);
    procedure LoadFromArray(anArray: ATDetalleRecibo);
    property Items[Index: Integer]:TDetalleReciboPago read GetItems write SetItems; default;
  end;

  { TDatosReciboPago }
  TDatosReciboPago = class(TROComplexType)
  private
    fRecibo: TRecibo;
    fDetalles: ATDetalleRecibo;
    function GetRecibo: TRecibo;
    function GetDetalles: ATDetalleRecibo;
  protected
    property int_Recibo: TRecibo read fRecibo;
    property int_Detalles: ATDetalleRecibo read fDetalles;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Recibo:TRecibo read GetRecibo write fRecibo;
    property Detalles:ATDetalleRecibo read GetDetalles write fDetalles;
  end;

  { TDatosReciboPagoCollection }
  TDatosReciboPagoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosReciboPago;
    procedure SetItems(aIndex: Integer; const Value: TDatosReciboPago);
  public
    constructor Create; overload;
    function Add: TDatosReciboPago; reintroduce;
    property Items[Index: Integer]:TDatosReciboPago read GetItems write SetItems; default;
  end;

  { TDatosRecibo }
  TDatosRecibo = class(TROComplexType)
  private
    fRecibo: TRecibo;
    fDetalles: ATDetalleRecibo;
    function GetRecibo: TRecibo;
    function GetDetalles: ATDetalleRecibo;
  protected
    property int_Recibo: TRecibo read fRecibo;
    property int_Detalles: ATDetalleRecibo read fDetalles;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Recibo:TRecibo read GetRecibo write fRecibo;
    property Detalles:ATDetalleRecibo read GetDetalles write fDetalles;
  end;

  { TDatosReciboCollection }
  TDatosReciboCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosRecibo;
    procedure SetItems(aIndex: Integer; const Value: TDatosRecibo);
  public
    constructor Create; overload;
    function Add: TDatosRecibo; reintroduce;
    property Items[Index: Integer]:TDatosRecibo read GetItems write SetItems; default;
  end;

  { TLoginInfo }
  TLoginInfo = class(TROComplexType)
  private
    fValida: Boolean;
    fEmpleadoID: Integer;
    fNombreEmpleado: AnsiString;
    fAccesos: ArrayOpcion;
    function GetAccesos: ArrayOpcion;
  protected
    property int_Accesos: ArrayOpcion read fAccesos;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Valida:Boolean read fValida write fValida;
    property EmpleadoID:Integer read fEmpleadoID write fEmpleadoID;
    property NombreEmpleado:AnsiString read fNombreEmpleado write fNombreEmpleado;
    property Accesos:ArrayOpcion read GetAccesos write fAccesos;
  end;

  { TLoginInfoCollection }
  TLoginInfoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TLoginInfo;
    procedure SetItems(aIndex: Integer; const Value: TLoginInfo);
  public
    constructor Create; overload;
    function Add: TLoginInfo; reintroduce;
    property Items[Index: Integer]:TLoginInfo read GetItems write SetItems; default;
  end;

  { TOpcion }
  TOpcion = class(TROComplexType)
  private
    fOpcionID: Integer;
    fNombre: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property OpcionID:Integer read fOpcionID write fOpcionID;
    property Nombre:AnsiString read fNombre write fNombre;
  end;

  { TOpcionCollection }
  TOpcionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TOpcion;
    procedure SetItems(aIndex: Integer; const Value: TOpcion);
  public
    constructor Create; overload;
    function Add: TOpcion; reintroduce;
    procedure SaveToArray(anArray: ArrayOpcion);
    procedure LoadFromArray(anArray: ArrayOpcion);
    property Items[Index: Integer]:TOpcion read GetItems write SetItems; default;
  end;

  { TConsumoExpress }
  TConsumoExpress = class(TROComplexType)
  private
    fSecuencia: Integer;
    fEstacionID: Integer;
    fClienteID: Integer;
    fPrecio: Double;
    fVolumen: Double;
    fImporte: Double;
    fFacturado: Boolean;
    fBombaID: Integer;
    fProductoID: Integer;
    fFacturaID: Integer;
    fFechaConsumo: DateTime;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property Precio:Double read fPrecio write fPrecio;
    property Volumen:Double read fVolumen write fVolumen;
    property Importe:Double read fImporte write fImporte;
    property Facturado:Boolean read fFacturado write fFacturado;
    property BombaID:Integer read fBombaID write fBombaID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property FechaConsumo:DateTime read fFechaConsumo write fFechaConsumo;
  end;

  { TConsumoExpressCollection }
  TConsumoExpressCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TConsumoExpress;
    procedure SetItems(aIndex: Integer; const Value: TConsumoExpress);
  public
    constructor Create; overload;
    function Add: TConsumoExpress; reintroduce;
    property Items[Index: Integer]:TConsumoExpress read GetItems write SetItems; default;
  end;

  { TDatosCliente }
  TDatosCliente = class(TROComplexType)
  private
    fClienteID: Integer;
    fNombre: AnsiString;
    fRFC: AnsiString;
    fDireccion: AnsiString;
    fTelefono: AnsiString;
    fCP: AnsiString;
    fCiudad: AnsiString;
    fColonia: AnsiString;
    fTelefonos: AnsiString;
    fFacturaExpress: Boolean;
    fSaldo: Double;
    fMsnError: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Nombre:AnsiString read fNombre write fNombre;
    property RFC:AnsiString read fRFC write fRFC;
    property Direccion:AnsiString read fDireccion write fDireccion;
    property Telefono:AnsiString read fTelefono write fTelefono;
    property CP:AnsiString read fCP write fCP;
    property Ciudad:AnsiString read fCiudad write fCiudad;
    property Colonia:AnsiString read fColonia write fColonia;
    property Telefonos:AnsiString read fTelefonos write fTelefonos;
    property FacturaExpress:Boolean read fFacturaExpress write fFacturaExpress;
    property Saldo:Double read fSaldo write fSaldo;
    property MsnError:AnsiString read fMsnError write fMsnError;
  end;

  { TDatosClienteCollection }
  TDatosClienteCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosCliente;
    procedure SetItems(aIndex: Integer; const Value: TDatosCliente);
  public
    constructor Create; overload;
    function Add: TDatosCliente; reintroduce;
    property Items[Index: Integer]:TDatosCliente read GetItems write SetItems; default;
  end;

  { TFacturaExpress }
  TFacturaExpress = class(TROComplexType)
  private
    fFacturaID: Integer;
    fSerie: AnsiString;
    fFolio: Integer;
    fFecha: DateTime;
    fCliente: TDatosCliente;
    fSubtotal: Double;
    fIVA: Double;
    fTotal: Double;
    fImpuesto: Double;
    fDetalle: ADetalleExpress;
    function GetCliente: TDatosCliente;
    function GetDetalle: ADetalleExpress;
  protected
    property int_Cliente: TDatosCliente read fCliente;
    property int_Detalle: ADetalleExpress read fDetalle;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:Integer read fFolio write fFolio;
    property Fecha:DateTime read fFecha write fFecha;
    property Cliente:TDatosCliente read GetCliente write fCliente;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property IVA:Double read fIVA write fIVA;
    property Total:Double read fTotal write fTotal;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property Detalle:ADetalleExpress read GetDetalle write fDetalle;
  end;

  { TFacturaExpressCollection }
  TFacturaExpressCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TFacturaExpress;
    procedure SetItems(aIndex: Integer; const Value: TFacturaExpress);
  public
    constructor Create; overload;
    function Add: TFacturaExpress; reintroduce;
    property Items[Index: Integer]:TFacturaExpress read GetItems write SetItems; default;
  end;

  { TDetalleExpress }
  TDetalleExpress = class(TROComplexType)
  private
    fCodigo: AnsiString;
    fDescripcion: AnsiString;
    fCantidad: Double;
    fPrecio: Double;
    fImporte: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Codigo:AnsiString read fCodigo write fCodigo;
    property Descripcion:AnsiString read fDescripcion write fDescripcion;
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
  end;

  { TDetalleExpressCollection }
  TDetalleExpressCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDetalleExpress;
    procedure SetItems(aIndex: Integer; const Value: TDetalleExpress);
  public
    constructor Create; overload;
    function Add: TDetalleExpress; reintroduce;
    procedure SaveToArray(anArray: ADetalleExpress);
    procedure LoadFromArray(anArray: ADetalleExpress);
    property Items[Index: Integer]:TDetalleExpress read GetItems write SetItems; default;
  end;

  { TValoresTurno }
  TValoresTurno = class(TROComplexType)
  private
    fFecha: DateTime;
    fVenta: Double;
    fEfectivo: Double;
    fCredito: Double;
    fConsumoInterno: Double;
    fCalibraciones: Double;
    fFaltantes: Double;
    fSobrantes: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Fecha:DateTime read fFecha write fFecha;
    property Venta:Double read fVenta write fVenta;
    property Efectivo:Double read fEfectivo write fEfectivo;
    property Credito:Double read fCredito write fCredito;
    property ConsumoInterno:Double read fConsumoInterno write fConsumoInterno;
    property Calibraciones:Double read fCalibraciones write fCalibraciones;
    property Faltantes:Double read fFaltantes write fFaltantes;
    property Sobrantes:Double read fSobrantes write fSobrantes;
  end;

  { TValoresTurnoCollection }
  TValoresTurnoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TValoresTurno;
    procedure SetItems(aIndex: Integer; const Value: TValoresTurno);
  public
    constructor Create; overload;
    function Add: TValoresTurno; reintroduce;
    property Items[Index: Integer]:TValoresTurno read GetItems write SetItems; default;
  end;

  { TOtroProducto }
  TOtroProducto = class(TROComplexType)
  private
    fID: Integer;
    fNombre: AnsiString;
    fCodigo: AnsiString;
    fBarras: AnsiString;
    fPrecio: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ID:Integer read fID write fID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Codigo:AnsiString read fCodigo write fCodigo;
    property Barras:AnsiString read fBarras write fBarras;
    property Precio:Double read fPrecio write fPrecio;
  end;

  { TOtroProductoCollection }
  TOtroProductoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TOtroProducto;
    procedure SetItems(aIndex: Integer; const Value: TOtroProducto);
  public
    constructor Create; overload;
    function Add: TOtroProducto; reintroduce;
    property Items[Index: Integer]:TOtroProducto read GetItems write SetItems; default;
  end;

  { TAgrupacion }
  TAgrupacion = class(TROComplexType)
  private
    fAgrupacionID: Integer;
    fBombas: AAgrupacionBomba;
    function GetBombas: AAgrupacionBomba;
  protected
    property int_Bombas: AAgrupacionBomba read fBombas;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property AgrupacionID:Integer read fAgrupacionID write fAgrupacionID;
    property Bombas:AAgrupacionBomba read GetBombas write fBombas;
  end;

  { TAgrupacionCollection }
  TAgrupacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TAgrupacion;
    procedure SetItems(aIndex: Integer; const Value: TAgrupacion);
  public
    constructor Create; overload;
    function Add: TAgrupacion; reintroduce;
    procedure SaveToArray(anArray: AAgrupacion);
    procedure LoadFromArray(anArray: AAgrupacion);
    property Items[Index: Integer]:TAgrupacion read GetItems write SetItems; default;
  end;

  { TSagarpa }
  TSagarpa = class(TROComplexType)
  private
    fClienteSagarpa: Integer;
    fClienteSagarpaPemex: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteSagarpa:Integer read fClienteSagarpa write fClienteSagarpa;
    property ClienteSagarpaPemex:Integer read fClienteSagarpaPemex write fClienteSagarpaPemex;
  end;

  { TSagarpaCollection }
  TSagarpaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TSagarpa;
    procedure SetItems(aIndex: Integer; const Value: TSagarpa);
  public
    constructor Create; overload;
    function Add: TSagarpa; reintroduce;
    property Items[Index: Integer]:TSagarpa read GetItems write SetItems; default;
  end;

  { TDatosPuntos }
  TDatosPuntos = class(TROComplexType)
  private
    fClienteID: Integer;
    fApellidoPaterno: AnsiString;
    fApellidoMaterno: AnsiString;
    fNombres: AnsiString;
    femail: AnsiString;
    fNacimiento: DateTime;
    fReferencia: AnsiString;
    fTelefonos: AnsiString;
    fFacturaExpress: Boolean;
    fPuntosCategoriaID: Integer;
    fSexo: Integer;
    fFechaRegistro: DateTime;
    fUsuarioID: Integer;
    fPuntosClubID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property ApellidoPaterno:AnsiString read fApellidoPaterno write fApellidoPaterno;
    property ApellidoMaterno:AnsiString read fApellidoMaterno write fApellidoMaterno;
    property Nombres:AnsiString read fNombres write fNombres;
    property email:AnsiString read femail write femail;
    property Nacimiento:DateTime read fNacimiento write fNacimiento;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Telefonos:AnsiString read fTelefonos write fTelefonos;
    property FacturaExpress:Boolean read fFacturaExpress write fFacturaExpress;
    property PuntosCategoriaID:Integer read fPuntosCategoriaID write fPuntosCategoriaID;
    property Sexo:Integer read fSexo write fSexo;
    property FechaRegistro:DateTime read fFechaRegistro write fFechaRegistro;
    property UsuarioID:Integer read fUsuarioID write fUsuarioID;
    property PuntosClubID:Integer read fPuntosClubID write fPuntosClubID;
  end;

  { TDatosPuntosCollection }
  TDatosPuntosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosPuntos;
    procedure SetItems(aIndex: Integer; const Value: TDatosPuntos);
  public
    constructor Create; overload;
    function Add: TDatosPuntos; reintroduce;
    property Items[Index: Integer]:TDatosPuntos read GetItems write SetItems; default;
  end;

  { TDatosCelular }
  TDatosCelular = class(TROComplexType)
  private
    fTelefono: AnsiString;
    fCompania: Integer;
    fDescripcion: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Telefono:AnsiString read fTelefono write fTelefono;
    property Compania:Integer read fCompania write fCompania;
    property Descripcion:AnsiString read fDescripcion write fDescripcion;
  end;

  { TDatosCelularCollection }
  TDatosCelularCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosCelular;
    procedure SetItems(aIndex: Integer; const Value: TDatosCelular);
  public
    constructor Create; overload;
    function Add: TDatosCelular; reintroduce;
    procedure SaveToArray(anArray: ADatosCelular);
    procedure LoadFromArray(anArray: ADatosCelular);
    property Items[Index: Integer]:TDatosCelular read GetItems write SetItems; default;
  end;

  { TEntregaPremio }
  TEntregaPremio = class(TROComplexType)
  private
    fClienteID: Integer;
    fCliente: AnsiString;
    fPremio: AnsiString;
    fCantidad: Integer;
    fPuntos: Double;
    fSaldo: Double;
    fMensaje: AnsiString;
    fValido: Boolean;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Cliente:AnsiString read fCliente write fCliente;
    property Premio:AnsiString read fPremio write fPremio;
    property Cantidad:Integer read fCantidad write fCantidad;
    property Puntos:Double read fPuntos write fPuntos;
    property Saldo:Double read fSaldo write fSaldo;
    property Mensaje:AnsiString read fMensaje write fMensaje;
    property Valido:Boolean read fValido write fValido;
  end;

  { TEntregaPremioCollection }
  TEntregaPremioCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TEntregaPremio;
    procedure SetItems(aIndex: Integer; const Value: TEntregaPremio);
  public
    constructor Create; overload;
    function Add: TEntregaPremio; reintroduce;
    property Items[Index: Integer]:TEntregaPremio read GetItems write SetItems; default;
  end;

  { TDatosPremio }
  TDatosPremio = class(TROComplexType)
  private
    fPremioID: Integer;
    fNombre: AnsiString;
    fPuntos: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property PremioID:Integer read fPremioID write fPremioID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Puntos:Double read fPuntos write fPuntos;
  end;

  { TDatosPremioCollection }
  TDatosPremioCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosPremio;
    procedure SetItems(aIndex: Integer; const Value: TDatosPremio);
  public
    constructor Create; overload;
    function Add: TDatosPremio; reintroduce;
    property Items[Index: Integer]:TDatosPremio read GetItems write SetItems; default;
  end;

  { TConfirmaEnvioA }
  TConfirmaEnvioA = class(TROComplexType)
  private
    fConsumo: TConsumoExpress;
    fHost: AnsiString;
    fFecha: DateTime;
    function GetConsumo: TConsumoExpress;
  protected
    property int_Consumo: TConsumoExpress read fConsumo;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Consumo:TConsumoExpress read GetConsumo write fConsumo;
    property Host:AnsiString read fHost write fHost;
    property Fecha:DateTime read fFecha write fFecha;
  end;

  { TConfirmaEnvioACollection }
  TConfirmaEnvioACollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TConfirmaEnvioA;
    procedure SetItems(aIndex: Integer; const Value: TConfirmaEnvioA);
  public
    constructor Create; overload;
    function Add: TConfirmaEnvioA; reintroduce;
    property Items[Index: Integer]:TConfirmaEnvioA read GetItems write SetItems; default;
  end;

  { TDatosCerrarLiquidacion }
  TDatosCerrarLiquidacion = class(TROComplexType)
  private
    fLiquidacionID: Integer;
    fVentasTotales: Double;
    fEntregado: Double;
    fDiferencia: Double;
    fDespachadores: ADespachadorLiquidacion;
    fDetalle: ADetalleLiquidacion;
    fTipoValor: ATipoValor;
    fEstacionID: Integer;
    fTurnoID: Integer;
    function GetDespachadores: ADespachadorLiquidacion;
    function GetDetalle: ADetalleLiquidacion;
    function GetTipoValor: ATipoValor;
  protected
    property int_Despachadores: ADespachadorLiquidacion read fDespachadores;
    property int_Detalle: ADetalleLiquidacion read fDetalle;
    property int_TipoValor: ATipoValor read fTipoValor;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property LiquidacionID:Integer read fLiquidacionID write fLiquidacionID;
    property VentasTotales:Double read fVentasTotales write fVentasTotales;
    property Entregado:Double read fEntregado write fEntregado;
    property Diferencia:Double read fDiferencia write fDiferencia;
    property Despachadores:ADespachadorLiquidacion read GetDespachadores write fDespachadores;
    property Detalle:ADetalleLiquidacion read GetDetalle write fDetalle;
    property TipoValor:ATipoValor read GetTipoValor write fTipoValor;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property TurnoID:Integer read fTurnoID write fTurnoID;
  end;

  { TDatosCerrarLiquidacionCollection }
  TDatosCerrarLiquidacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosCerrarLiquidacion;
    procedure SetItems(aIndex: Integer; const Value: TDatosCerrarLiquidacion);
  public
    constructor Create; overload;
    function Add: TDatosCerrarLiquidacion; reintroduce;
    property Items[Index: Integer]:TDatosCerrarLiquidacion read GetItems write SetItems; default;
  end;

  { TDespachadorLiquidacion }
  TDespachadorLiquidacion = class(TROComplexType)
  private
    fDespachadorLiquidacionID: Integer;
    fDespachadorID: Integer;
    fImporte: Double;
    fEntregado: Double;
    fDiferencia: Double;
    fAgrupacionID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property DespachadorLiquidacionID:Integer read fDespachadorLiquidacionID write fDespachadorLiquidacionID;
    property DespachadorID:Integer read fDespachadorID write fDespachadorID;
    property Importe:Double read fImporte write fImporte;
    property Entregado:Double read fEntregado write fEntregado;
    property Diferencia:Double read fDiferencia write fDiferencia;
    property AgrupacionID:Integer read fAgrupacionID write fAgrupacionID;
  end;

  { TDespachadorLiquidacionCollection }
  TDespachadorLiquidacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDespachadorLiquidacion;
    procedure SetItems(aIndex: Integer; const Value: TDespachadorLiquidacion);
  public
    constructor Create; overload;
    function Add: TDespachadorLiquidacion; reintroduce;
    procedure SaveToArray(anArray: ADespachadorLiquidacion);
    procedure LoadFromArray(anArray: ADespachadorLiquidacion);
    property Items[Index: Integer]:TDespachadorLiquidacion read GetItems write SetItems; default;
  end;

  { TDetalleLiquidacion }
  TDetalleLiquidacion = class(TROComplexType)
  private
    fCantidad: Double;
    fImporte: Double;
    fReferencia: AnsiString;
    fTicket: Integer;
    fSerie: AnsiString;
    fCuponID: Integer;
    fSalidaID: Integer;
    fClienteID: Integer;
    fBancoID: Integer;
    fProductoID: Integer;
    fAuxiliarID: Integer;
    fDespachadorLiquidacionID: Integer;
    fTipoValorID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Cantidad:Double read fCantidad write fCantidad;
    property Importe:Double read fImporte write fImporte;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Ticket:Integer read fTicket write fTicket;
    property Serie:AnsiString read fSerie write fSerie;
    property CuponID:Integer read fCuponID write fCuponID;
    property SalidaID:Integer read fSalidaID write fSalidaID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property BancoID:Integer read fBancoID write fBancoID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property AuxiliarID:Integer read fAuxiliarID write fAuxiliarID;
    property DespachadorLiquidacionID:Integer read fDespachadorLiquidacionID write fDespachadorLiquidacionID;
    property TipoValorID:Integer read fTipoValorID write fTipoValorID;
  end;

  { TDetalleLiquidacionCollection }
  TDetalleLiquidacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDetalleLiquidacion;
    procedure SetItems(aIndex: Integer; const Value: TDetalleLiquidacion);
  public
    constructor Create; overload;
    function Add: TDetalleLiquidacion; reintroduce;
    procedure SaveToArray(anArray: ADetalleLiquidacion);
    procedure LoadFromArray(anArray: ADetalleLiquidacion);
    property Items[Index: Integer]:TDetalleLiquidacion read GetItems write SetItems; default;
  end;

  { TTipoValor }
  TTipoValor = class(TROComplexType)
  private
    fTipoValorID: Integer;
    fNombre: AnsiString;
    fGrupo: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TipoValorID:Integer read fTipoValorID write fTipoValorID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Grupo:AnsiString read fGrupo write fGrupo;
  end;

  { TTipoValorCollection }
  TTipoValorCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TTipoValor;
    procedure SetItems(aIndex: Integer; const Value: TTipoValor);
  public
    constructor Create; overload;
    function Add: TTipoValor; reintroduce;
    procedure SaveToArray(anArray: ATipoValor);
    procedure LoadFromArray(anArray: ATipoValor);
    property Items[Index: Integer]:TTipoValor read GetItems write SetItems; default;
  end;

  { TPerfilPuntos }
  TPerfilPuntos = class(TROComplexType)
  private
    fFechaIni: DateTime;
    fFechaFin: DateTime;
    fCriterio: Double;
    fNewField3: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FechaIni:DateTime read fFechaIni write fFechaIni;
    property FechaFin:DateTime read fFechaFin write fFechaFin;
    property Criterio:Double read fCriterio write fCriterio;
    property NewField3:AnsiString read fNewField3 write fNewField3;
  end;

  { TPerfilPuntosCollection }
  TPerfilPuntosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TPerfilPuntos;
    procedure SetItems(aIndex: Integer; const Value: TPerfilPuntos);
  public
    constructor Create; overload;
    function Add: TPerfilPuntos; reintroduce;
    property Items[Index: Integer]:TPerfilPuntos read GetItems write SetItems; default;
  end;

  { TFacturaElectronica }
  TFacturaElectronica = class(TROComplexType)
  private
    fSerie: AnsiString;
    fFolio: AnsiString;
    fFecha: AnsiString;
    fnoAprobacion: AnsiString;
    fanoAprobacion: AnsiString;
    ftipoComprobante: AnsiString;
    fformaDePago: AnsiString;
    fSubTotal: AnsiString;
    fMunicipioEmisor: AnsiString;
    fTotal: AnsiString;
    fRFCEmisor: AnsiString;
    fNomEmpEmisor: AnsiString;
    fDireccionEm: AnsiString;
    fNoExteriorEm: AnsiString;
    fColoniaEmisor: AnsiString;
    fEstadoEmisor: AnsiString;
    fPaisEmisor: AnsiString;
    fCodigoPostalEmisor: AnsiString;
    fRFCReceptor: AnsiString;
    fNombreReceptor: AnsiString;
    fDomicilioReceptor: AnsiString;
    fNoExteriorReceptor: AnsiString;
    fColoniaReceptor: AnsiString;
    fLocalidadReceptor: AnsiString;
    fMunicipioReceptor: AnsiString;
    fEstadoReceptor: AnsiString;
    fPaisReceptor: AnsiString;
    fCodigoPostalReceptor: AnsiString;
    fFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
    fFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
    fTotalImpuesto: AnsiString;
    fCalleExpedidoEn: AnsiString;
    fNoExterioExpedidoEn: AnsiString;
    fColoniaExpedidoEn: AnsiString;
    fCodigoPostalExpedidoEn: AnsiString;
    fLocalidadExpedidoEn: AnsiString;
    fMunicipioExpedidoEn: AnsiString;
    fEstadoExpedidoEn: AnsiString;
    fPaisExpedidoEn: AnsiString;
    fSucursal: Boolean;
    femail: AnsiString;
    function GetFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
    function GetFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  protected
    property int_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes read fFacturaElectronicaDetalleImportes;
    property int_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos read fFacturaElectronicaDetalleImpuestos;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:AnsiString read fFolio write fFolio;
    property Fecha:AnsiString read fFecha write fFecha;
    property noAprobacion:AnsiString read fnoAprobacion write fnoAprobacion;
    property anoAprobacion:AnsiString read fanoAprobacion write fanoAprobacion;
    property tipoComprobante:AnsiString read ftipoComprobante write ftipoComprobante;
    property formaDePago:AnsiString read fformaDePago write fformaDePago;
    property SubTotal:AnsiString read fSubTotal write fSubTotal;
    property MunicipioEmisor:AnsiString read fMunicipioEmisor write fMunicipioEmisor;
    property Total:AnsiString read fTotal write fTotal;
    property RFCEmisor:AnsiString read fRFCEmisor write fRFCEmisor;
    property NomEmpEmisor:AnsiString read fNomEmpEmisor write fNomEmpEmisor;
    property DireccionEm:AnsiString read fDireccionEm write fDireccionEm;
    property NoExteriorEm:AnsiString read fNoExteriorEm write fNoExteriorEm;
    property ColoniaEmisor:AnsiString read fColoniaEmisor write fColoniaEmisor;
    property EstadoEmisor:AnsiString read fEstadoEmisor write fEstadoEmisor;
    property PaisEmisor:AnsiString read fPaisEmisor write fPaisEmisor;
    property CodigoPostalEmisor:AnsiString read fCodigoPostalEmisor write fCodigoPostalEmisor;
    property RFCReceptor:AnsiString read fRFCReceptor write fRFCReceptor;
    property NombreReceptor:AnsiString read fNombreReceptor write fNombreReceptor;
    property DomicilioReceptor:AnsiString read fDomicilioReceptor write fDomicilioReceptor;
    property NoExteriorReceptor:AnsiString read fNoExteriorReceptor write fNoExteriorReceptor;
    property ColoniaReceptor:AnsiString read fColoniaReceptor write fColoniaReceptor;
    property LocalidadReceptor:AnsiString read fLocalidadReceptor write fLocalidadReceptor;
    property MunicipioReceptor:AnsiString read fMunicipioReceptor write fMunicipioReceptor;
    property EstadoReceptor:AnsiString read fEstadoReceptor write fEstadoReceptor;
    property PaisReceptor:AnsiString read fPaisReceptor write fPaisReceptor;
    property CodigoPostalReceptor:AnsiString read fCodigoPostalReceptor write fCodigoPostalReceptor;
    property FacturaElectronicaDetalleImportes:ATFacturaElectronicaDetalleImportes read GetFacturaElectronicaDetalleImportes write fFacturaElectronicaDetalleImportes;
    property FacturaElectronicaDetalleImpuestos:ATFacturaElectronicaDetalleImpuestos read GetFacturaElectronicaDetalleImpuestos write fFacturaElectronicaDetalleImpuestos;
    property TotalImpuesto:AnsiString read fTotalImpuesto write fTotalImpuesto;
    property CalleExpedidoEn:AnsiString read fCalleExpedidoEn write fCalleExpedidoEn;
    property NoExterioExpedidoEn:AnsiString read fNoExterioExpedidoEn write fNoExterioExpedidoEn;
    property ColoniaExpedidoEn:AnsiString read fColoniaExpedidoEn write fColoniaExpedidoEn;
    property CodigoPostalExpedidoEn:AnsiString read fCodigoPostalExpedidoEn write fCodigoPostalExpedidoEn;
    property LocalidadExpedidoEn:AnsiString read fLocalidadExpedidoEn write fLocalidadExpedidoEn;
    property MunicipioExpedidoEn:AnsiString read fMunicipioExpedidoEn write fMunicipioExpedidoEn;
    property EstadoExpedidoEn:AnsiString read fEstadoExpedidoEn write fEstadoExpedidoEn;
    property PaisExpedidoEn:AnsiString read fPaisExpedidoEn write fPaisExpedidoEn;
    property Sucursal:Boolean read fSucursal write fSucursal;
    property email:AnsiString read femail write femail;
  end;

  { TFacturaElectronicaCollection }
  TFacturaElectronicaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TFacturaElectronica;
    procedure SetItems(aIndex: Integer; const Value: TFacturaElectronica);
  public
    constructor Create; overload;
    function Add: TFacturaElectronica; reintroduce;
    property Items[Index: Integer]:TFacturaElectronica read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaDetalleImportes }
  TFacturaElectronicaDetalleImportes = class(TROComplexType)
  private
    fCantidadReceptor: AnsiString;
    fUnidadReceptor: AnsiString;
    fDescripcionReceptor: AnsiString;
    fValorUnitarioReceptor: AnsiString;
    fImporteReceptor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CantidadReceptor:AnsiString read fCantidadReceptor write fCantidadReceptor;
    property UnidadReceptor:AnsiString read fUnidadReceptor write fUnidadReceptor;
    property DescripcionReceptor:AnsiString read fDescripcionReceptor write fDescripcionReceptor;
    property ValorUnitarioReceptor:AnsiString read fValorUnitarioReceptor write fValorUnitarioReceptor;
    property ImporteReceptor:AnsiString read fImporteReceptor write fImporteReceptor;
  end;

  { TFacturaElectronicaDetalleImportesCollection }
  TFacturaElectronicaDetalleImportesCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TFacturaElectronicaDetalleImportes;
    procedure SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImportes);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaDetalleImportes; reintroduce;
    procedure SaveToArray(anArray: ATFacturaElectronicaDetalleImportes);
    procedure LoadFromArray(anArray: ATFacturaElectronicaDetalleImportes);
    property Items[Index: Integer]:TFacturaElectronicaDetalleImportes read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaDetalleImpuestos }
  TFacturaElectronicaDetalleImpuestos = class(TROComplexType)
  private
    fImpuestoReceptor: AnsiString;
    fTasaReceptor: AnsiString;
    fImporteImpReceptor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ImpuestoReceptor:AnsiString read fImpuestoReceptor write fImpuestoReceptor;
    property TasaReceptor:AnsiString read fTasaReceptor write fTasaReceptor;
    property ImporteImpReceptor:AnsiString read fImporteImpReceptor write fImporteImpReceptor;
  end;

  { TFacturaElectronicaDetalleImpuestosCollection }
  TFacturaElectronicaDetalleImpuestosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TFacturaElectronicaDetalleImpuestos;
    procedure SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImpuestos);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaDetalleImpuestos; reintroduce;
    procedure SaveToArray(anArray: ATFacturaElectronicaDetalleImpuestos);
    procedure LoadFromArray(anArray: ATFacturaElectronicaDetalleImpuestos);
    property Items[Index: Integer]:TFacturaElectronicaDetalleImpuestos read GetItems write SetItems; default;
  end;

  { TDatosFacturaPemex }
  TDatosFacturaPemex = class(TROComplexType)
  private
    fTurnoID: Integer;
    fEstacionID: Integer;
    fFecha: DateTime;
    fNombre: AnsiString;
    fFacturaPemexID: Integer;
    fSerie: AnsiString;
    fFolio: Integer;
    fTotal: Double;
    fDetalleFactura: ADetalleFacturaPemex;
    fProductoID: Integer;
    function GetDetalleFactura: ADetalleFacturaPemex;
  protected
    property int_DetalleFactura: ADetalleFacturaPemex read fDetalleFactura;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TurnoID:Integer read fTurnoID write fTurnoID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property Fecha:DateTime read fFecha write fFecha;
    property Nombre:AnsiString read fNombre write fNombre;
    property FacturaPemexID:Integer read fFacturaPemexID write fFacturaPemexID;
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:Integer read fFolio write fFolio;
    property Total:Double read fTotal write fTotal;
    property DetalleFactura:ADetalleFacturaPemex read GetDetalleFactura write fDetalleFactura;
    property ProductoID:Integer read fProductoID write fProductoID;
  end;

  { TDatosFacturaPemexCollection }
  TDatosFacturaPemexCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosFacturaPemex;
    procedure SetItems(aIndex: Integer; const Value: TDatosFacturaPemex);
  public
    constructor Create; overload;
    function Add: TDatosFacturaPemex; reintroduce;
    property Items[Index: Integer]:TDatosFacturaPemex read GetItems write SetItems; default;
  end;

  { TDetalleFacturaPemex }
  TDetalleFacturaPemex = class(TROComplexType)
  private
    fFacturaPemexID: Integer;
    fTipoValorPemexID: Integer;
    fCantidad: Double;
    fImporte: Double;
    fPrecio: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FacturaPemexID:Integer read fFacturaPemexID write fFacturaPemexID;
    property TipoValorPemexID:Integer read fTipoValorPemexID write fTipoValorPemexID;
    property Cantidad:Double read fCantidad write fCantidad;
    property Importe:Double read fImporte write fImporte;
    property Precio:Double read fPrecio write fPrecio;
  end;

  { TDetalleFacturaPemexCollection }
  TDetalleFacturaPemexCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDetalleFacturaPemex;
    procedure SetItems(aIndex: Integer; const Value: TDetalleFacturaPemex);
  public
    constructor Create; overload;
    function Add: TDetalleFacturaPemex; reintroduce;
    procedure SaveToArray(anArray: ADetalleFacturaPemex);
    procedure LoadFromArray(anArray: ADetalleFacturaPemex);
    property Items[Index: Integer]:TDetalleFacturaPemex read GetItems write SetItems; default;
  end;

  { AAgrupacion }
  AAgrupacion_TAgrupacion = array of TAgrupacion;
  AAgrupacion = class(TROArray)
  private
    fCount: Integer;
    fItems : AAgrupacion_TAgrupacion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TAgrupacion;
    procedure SetItems(aIndex: Integer; const Value: TAgrupacion);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TAgrupacion; overload;
    function Add(const Value: TAgrupacion):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TAgrupacion read GetItems write SetItems; default;
    property InnerArray: AAgrupacion_TAgrupacion read fItems;
  end;

  { AAgrupacionBomba }
  AAgrupacionBomba_Integer = array of Integer;
  AAgrupacionBomba = class(TROArray)
  private
    fCount: Integer;
    fItems : AAgrupacionBomba_Integer;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): Integer;
    procedure SetItems(aIndex: Integer; const Value: Integer);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add(const Value:Integer): Integer;
    function GetIndex(const aValue: Integer; const aStartFrom: Integer = 0) : Integer; overload;
    function GetIndex(const aPropertyName : string;
                      const aPropertyValue : Variant;
                      StartFrom : Integer = 0;
                      Options : TROSearchOptions = [soIgnoreCase]) : Integer; override;
    function IndexOf(const aValue: Integer; const aStartFrom: Integer = 0): Integer;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:Integer read GetItems write SetItems; default;
    property InnerArray: AAgrupacionBomba_Integer read fItems;
  end;

  { ADatosCelular }
  ADatosCelular_TDatosCelular = array of TDatosCelular;
  ADatosCelular = class(TROArray)
  private
    fCount: Integer;
    fItems : ADatosCelular_TDatosCelular;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDatosCelular;
    procedure SetItems(aIndex: Integer; const Value: TDatosCelular);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDatosCelular; overload;
    function Add(const Value: TDatosCelular):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDatosCelular read GetItems write SetItems; default;
    property InnerArray: ADatosCelular_TDatosCelular read fItems;
  end;

  { ADespachadorLiquidacion }
  ADespachadorLiquidacion_TDespachadorLiquidacion = array of TDespachadorLiquidacion;
  ADespachadorLiquidacion = class(TROArray)
  private
    fCount: Integer;
    fItems : ADespachadorLiquidacion_TDespachadorLiquidacion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDespachadorLiquidacion;
    procedure SetItems(aIndex: Integer; const Value: TDespachadorLiquidacion);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDespachadorLiquidacion; overload;
    function Add(const Value: TDespachadorLiquidacion):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDespachadorLiquidacion read GetItems write SetItems; default;
    property InnerArray: ADespachadorLiquidacion_TDespachadorLiquidacion read fItems;
  end;

  { ADetalleExpress }
  ADetalleExpress_TDetalleExpress = array of TDetalleExpress;
  ADetalleExpress = class(TROArray)
  private
    fCount: Integer;
    fItems : ADetalleExpress_TDetalleExpress;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDetalleExpress;
    procedure SetItems(aIndex: Integer; const Value: TDetalleExpress);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleExpress; overload;
    function Add(const Value: TDetalleExpress):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDetalleExpress read GetItems write SetItems; default;
    property InnerArray: ADetalleExpress_TDetalleExpress read fItems;
  end;

  { ADetalleFacturaPemex }
  ADetalleFacturaPemex_TDetalleFacturaPemex = array of TDetalleFacturaPemex;
  ADetalleFacturaPemex = class(TROArray)
  private
    fCount: Integer;
    fItems : ADetalleFacturaPemex_TDetalleFacturaPemex;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDetalleFacturaPemex;
    procedure SetItems(aIndex: Integer; const Value: TDetalleFacturaPemex);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleFacturaPemex; overload;
    function Add(const Value: TDetalleFacturaPemex):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDetalleFacturaPemex read GetItems write SetItems; default;
    property InnerArray: ADetalleFacturaPemex_TDetalleFacturaPemex read fItems;
  end;

  { ADetalleLiquidacion }
  ADetalleLiquidacion_TDetalleLiquidacion = array of TDetalleLiquidacion;
  ADetalleLiquidacion = class(TROArray)
  private
    fCount: Integer;
    fItems : ADetalleLiquidacion_TDetalleLiquidacion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDetalleLiquidacion;
    procedure SetItems(aIndex: Integer; const Value: TDetalleLiquidacion);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleLiquidacion; overload;
    function Add(const Value: TDetalleLiquidacion):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDetalleLiquidacion read GetItems write SetItems; default;
    property InnerArray: ADetalleLiquidacion_TDetalleLiquidacion read fItems;
  end;

  { ArrayOpcion }
  ArrayOpcion_TOpcion = array of TOpcion;
  ArrayOpcion = class(TROArray)
  private
    fCount: Integer;
    fItems : ArrayOpcion_TOpcion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TOpcion;
    procedure SetItems(aIndex: Integer; const Value: TOpcion);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TOpcion; overload;
    function Add(const Value: TOpcion):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TOpcion read GetItems write SetItems; default;
    property InnerArray: ArrayOpcion_TOpcion read fItems;
  end;

  { ATCarteraVale }
  ATCarteraVale_TCarteraVale = array of TCarteraVale;
  ATCarteraVale = class(TROArray)
  private
    fCount: Integer;
    fItems : ATCarteraVale_TCarteraVale;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TCarteraVale;
    procedure SetItems(aIndex: Integer; const Value: TCarteraVale);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TCarteraVale; overload;
    function Add(const Value: TCarteraVale):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TCarteraVale read GetItems write SetItems; default;
    property InnerArray: ATCarteraVale_TCarteraVale read fItems;
  end;

  { ATDetalleCupon }
  ATDetalleCupon_TDetalleCupon = array of TDetalleCupon;
  ATDetalleCupon = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleCupon_TDetalleCupon;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDetalleCupon;
    procedure SetItems(aIndex: Integer; const Value: TDetalleCupon);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleCupon; overload;
    function Add(const Value: TDetalleCupon):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDetalleCupon read GetItems write SetItems; default;
    property InnerArray: ATDetalleCupon_TDetalleCupon read fItems;
  end;

  { ATDetalleFactura }
  ATDetalleFactura_TDetalleFactura = array of TDetalleFactura;
  ATDetalleFactura = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleFactura_TDetalleFactura;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDetalleFactura;
    procedure SetItems(aIndex: Integer; const Value: TDetalleFactura);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleFactura; overload;
    function Add(const Value: TDetalleFactura):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDetalleFactura read GetItems write SetItems; default;
    property InnerArray: ATDetalleFactura_TDetalleFactura read fItems;
  end;

  { ATDetalleRecibo }
  ATDetalleRecibo_TDetalleReciboPago = array of TDetalleReciboPago;
  ATDetalleRecibo = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleRecibo_TDetalleReciboPago;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDetalleReciboPago;
    procedure SetItems(aIndex: Integer; const Value: TDetalleReciboPago);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleReciboPago; overload;
    function Add(const Value: TDetalleReciboPago):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDetalleReciboPago read GetItems write SetItems; default;
    property InnerArray: ATDetalleRecibo_TDetalleReciboPago read fItems;
  end;

  { ATDetalleTransaccion }
  ATDetalleTransaccion_TDetalleTransaccion = array of TDetalleTransaccion;
  ATDetalleTransaccion = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleTransaccion_TDetalleTransaccion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDetalleTransaccion;
    procedure SetItems(aIndex: Integer; const Value: TDetalleTransaccion);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleTransaccion; overload;
    function Add(const Value: TDetalleTransaccion):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDetalleTransaccion read GetItems write SetItems; default;
    property InnerArray: ATDetalleTransaccion_TDetalleTransaccion read fItems;
  end;

  { ATDetalleValeCreditoFactura }
  ATDetalleValeCreditoFactura_TDetalleValeCreditoFactura = array of TDetalleValeCreditoFactura;
  ATDetalleValeCreditoFactura = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleValeCreditoFactura_TDetalleValeCreditoFactura;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDetalleValeCreditoFactura;
    procedure SetItems(aIndex: Integer; const Value: TDetalleValeCreditoFactura);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleValeCreditoFactura; overload;
    function Add(const Value: TDetalleValeCreditoFactura):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDetalleValeCreditoFactura read GetItems write SetItems; default;
    property InnerArray: ATDetalleValeCreditoFactura_TDetalleValeCreditoFactura read fItems;
  end;

  { ATFacturaElectronicaDetalleImportes }
  ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImportes = array of TFacturaElectronicaDetalleImportes;
  ATFacturaElectronicaDetalleImportes = class(TROArray)
  private
    fCount: Integer;
    fItems : ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImportes;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TFacturaElectronicaDetalleImportes;
    procedure SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImportes);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TFacturaElectronicaDetalleImportes; overload;
    function Add(const Value: TFacturaElectronicaDetalleImportes):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TFacturaElectronicaDetalleImportes read GetItems write SetItems; default;
    property InnerArray: ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImportes read fItems;
  end;

  { ATFacturaElectronicaDetalleImpuestos }
  ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestos = array of TFacturaElectronicaDetalleImpuestos;
  ATFacturaElectronicaDetalleImpuestos = class(TROArray)
  private
    fCount: Integer;
    fItems : ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestos;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TFacturaElectronicaDetalleImpuestos;
    procedure SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImpuestos);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TFacturaElectronicaDetalleImpuestos; overload;
    function Add(const Value: TFacturaElectronicaDetalleImpuestos):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TFacturaElectronicaDetalleImpuestos read GetItems write SetItems; default;
    property InnerArray: ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestos read fItems;
  end;

  { ATipoValor }
  ATipoValor_TTipoValor = array of TTipoValor;
  ATipoValor = class(TROArray)
  private
    fCount: Integer;
    fItems : ATipoValor_TTipoValor;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TTipoValor;
    procedure SetItems(aIndex: Integer; const Value: TTipoValor);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TTipoValor; overload;
    function Add(const Value: TTipoValor):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TTipoValor read GetItems write SetItems; default;
    property InnerArray: ATipoValor_TTipoValor read fItems;
  end;

  { ATLiquidacionDetalle }
  ATLiquidacionDetalle_TLiquidacionDetalle = array of TLiquidacionDetalle;
  ATLiquidacionDetalle = class(TROArray)
  private
    fCount: Integer;
    fItems : ATLiquidacionDetalle_TLiquidacionDetalle;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TLiquidacionDetalle;
    procedure SetItems(aIndex: Integer; const Value: TLiquidacionDetalle);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TLiquidacionDetalle; overload;
    function Add(const Value: TLiquidacionDetalle):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TLiquidacionDetalle read GetItems write SetItems; default;
    property InnerArray: ATLiquidacionDetalle_TLiquidacionDetalle read fItems;
  end;

  { ATLiquidacionProducto }
  ATLiquidacionProducto_TLiquidacionProducto = array of TLiquidacionProducto;
  ATLiquidacionProducto = class(TROArray)
  private
    fCount: Integer;
    fItems : ATLiquidacionProducto_TLiquidacionProducto;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TLiquidacionProducto;
    procedure SetItems(aIndex: Integer; const Value: TLiquidacionProducto);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TLiquidacionProducto; overload;
    function Add(const Value: TLiquidacionProducto):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TLiquidacionProducto read GetItems write SetItems; default;
    property InnerArray: ATLiquidacionProducto_TLiquidacionProducto read fItems;
  end;

  { ATTicketFactura }
  ATTicketFactura_TTicketFactura = array of TTicketFactura;
  ATTicketFactura = class(TROArray)
  private
    fCount: Integer;
    fItems : ATTicketFactura_TTicketFactura;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TTicketFactura;
    procedure SetItems(aIndex: Integer; const Value: TTicketFactura);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TTicketFactura; overload;
    function Add(const Value: TTicketFactura):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TTicketFactura read GetItems write SetItems; default;
    property InnerArray: ATTicketFactura_TTicketFactura read fItems;
  end;

  { IServiceEmpresas }
  IServiceEmpresas = interface(IDataAbstractService)
    ['{762597B5-7713-4971-8C5A-32F68BB623AB}']
    function AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros): Binary;
    procedure ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime;
                             const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
    procedure ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime;
                                          const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
    procedure ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
    procedure ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
    procedure ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime;
                                   const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
    function GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer;
                           const UsuarioID: Integer): Integer;
    function BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
    function CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer): AnsiString;
    function CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer): AnsiString;
    function CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
    function CostoProducto(const ProductoID: Integer): Double;
    function DatosCliente(const ClienteID: Integer; const Referencia: AnsiString): TDatosCliente;
    function Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime): Double;
    function FacturaExpress(const Serie: AnsiString; const Folio: Integer): TFacturaExpress;
    function FacturaID(const Serie: AnsiString; const Folio: Integer): Integer;
    function FacturaYLiquidacion(const ClienteID: Integer): Boolean;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FolioActual2(const Campo: AnsiString; const Serie: AnsiString; const EstacionID: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function GuardaConsumoExpress(const Consumo: TConsumoExpress): Boolean;
    procedure GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
    procedure GuardarDatosFactura(const DatosFactura: TDatosFactura);
    procedure GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
    procedure GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
    function GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer): TFacturaExpress;
    procedure InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer;
                              const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer;
                              const Dia: Integer);
    procedure InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer): AnsiString;
    function ObtenerStatusCupon(const Barras: AnsiString): AnsiString;
    function ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer): Integer;
    function ObtenerTipoCambioPorEstacion(const EstacionID: Integer): Double;
    function PrecioProducto(const EstacionID: Integer; const ProductoID: Integer): Double;
    function StatusTicket(const EstacionID: Integer; const TicketID: Integer): Integer;
    function SumaAnticipo(const Estacion: Integer; const Secuencia: Integer): Double;
    function SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer): Double;
    function ValoresTurno(const EstacionID: Integer; const TurnoID: Integer): TValoresTurno;
    function VersionServer: AnsiString;
    function LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer): Boolean;
    function ClienteValido(const ClienteID: Integer; const NewClienteID: Integer): Boolean;
    function BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString): TOtroProducto;
    function TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer): Integer;
    function BuscaSagarpa(const EstacionID: Integer): TSagarpa;
    function PuntosCalculaSaldo(const ClienteID: Integer): Double;
    function PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double): Double;
    procedure PuntosGuardaDatos(const Datos: TDatosPuntos);
    function PuntosDatos(const ClienteID: Integer): TDatosPuntos;
    function EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer): Boolean;
    function BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer): Integer;
    function EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TEntregaPremio;
    function DatosPremio(const PremioID: Integer): TDatosPremio;
    function ValidaConsumo(const Consumo: TConsumoExpress): Integer;
    function AgrupacionesBomba(const EstacionID: Integer): AAgrupacion;
    function DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer): TDatosCerrarLiquidacion;
    procedure ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
    function TicketsLiquidacion(const LiquidacionID: Integer): AnsiString;
    function ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer): Boolean;
    procedure PuntosGuardaCriterios(const PuntosCriterioID: Integer; const Datos: AnsiString);
    function DatosFacturaElectronica(const FacturaID: Integer; const EstacionID: Integer): TFacturaElectronica;
    function LlavePrivaCertificado(const LlavePrivada: AnsiString; const Certificado: AnsiString; const GasolineroID: Integer; const Password: AnsiString;
                                   const EstacionID: Integer): AnsiString;
    function SELLOPEMs(const Texto: UnicodeString; const EstacionID: Integer): AnsiString;
    function CERs(const DIR: AnsiString): AnsiString;
    function ValidaLiquidacionDespachador(const LiquidacionID: Integer): AnsiString;
    function ActualizaLiquidacionProd(const Estacion: Integer; const FechaIni: DateTime; const FechaFin: DateTime; const TurnoID: Integer): Boolean;
    procedure PuntosDespachador(const TurnoID: Integer; const EstacionID: Integer; const UsuarioID: Integer);
    procedure GuardarDatosFacturaPemex(const DatosFacturaPemex: TDatosFacturaPemex);
    function AfectaInventarios(const LiquidacionID: Integer; const UsuarioID: Integer): AnsiString;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: UnicodeString; const SelloDigital: UnicodeString;
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString;
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
    function CERsNUM(const DIR: AnsiString): AnsiString;
    function ActualizaFirmaDefault(const UsuarioID: Integer; const FIRMA: Binary): AnsiString;
    function obtendatosempleados(const EstacionID: AnsiString): AnsiString;
    procedure ProgramaMantenimiento(const IDPROGRAMAMANTENIMIENTO: Integer; const IDESTACION: Integer);
    function obtendatosActividadesProgramadas(const IDESTACION: Integer; const TIPO: Integer): AnsiString;
    function obtenNotificacionesDiarias(const IDESTACION: Integer): AnsiString;
    function registraactividadrealizada(const IDACTIVIDADMANTENIMIENTO: Integer; const NOTA: AnsiString; const STATUS: AnsiString): AnsiString;
  end;

  { CoServiceEmpresas }
  CoServiceEmpresas = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceEmpresas; overload;
    class function Create(const aUri: TROUri): IServiceEmpresas; overload;
    class function Create(const aUrl: string): IServiceEmpresas; overload;
  end;

  { TServiceEmpresas_Proxy }
  TServiceEmpresas_Proxy = class(TDataAbstractService_Proxy, IServiceEmpresas)
  protected
    function __GetInterfaceName:string; override;

    function AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros): Binary;
    procedure ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime;
                             const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
    procedure ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime;
                                          const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
    procedure ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
    procedure ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
    procedure ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime;
                                   const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
    function GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer;
                           const UsuarioID: Integer): Integer;
    function BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
    function CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer): AnsiString;
    function CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer): AnsiString;
    function CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
    function CostoProducto(const ProductoID: Integer): Double;
    function DatosCliente(const ClienteID: Integer; const Referencia: AnsiString): TDatosCliente;
    function Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime): Double;
    function FacturaExpress(const Serie: AnsiString; const Folio: Integer): TFacturaExpress;
    function FacturaID(const Serie: AnsiString; const Folio: Integer): Integer;
    function FacturaYLiquidacion(const ClienteID: Integer): Boolean;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FolioActual2(const Campo: AnsiString; const Serie: AnsiString; const EstacionID: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function GuardaConsumoExpress(const Consumo: TConsumoExpress): Boolean;
    procedure GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
    procedure GuardarDatosFactura(const DatosFactura: TDatosFactura);
    procedure GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
    procedure GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
    function GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer): TFacturaExpress;
    procedure InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer;
                              const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer;
                              const Dia: Integer);
    procedure InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer): AnsiString;
    function ObtenerStatusCupon(const Barras: AnsiString): AnsiString;
    function ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer): Integer;
    function ObtenerTipoCambioPorEstacion(const EstacionID: Integer): Double;
    function PrecioProducto(const EstacionID: Integer; const ProductoID: Integer): Double;
    function StatusTicket(const EstacionID: Integer; const TicketID: Integer): Integer;
    function SumaAnticipo(const Estacion: Integer; const Secuencia: Integer): Double;
    function SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer): Double;
    function ValoresTurno(const EstacionID: Integer; const TurnoID: Integer): TValoresTurno;
    function VersionServer: AnsiString;
    function LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer): Boolean;
    function ClienteValido(const ClienteID: Integer; const NewClienteID: Integer): Boolean;
    function BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString): TOtroProducto;
    function TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer): Integer;
    function BuscaSagarpa(const EstacionID: Integer): TSagarpa;
    function PuntosCalculaSaldo(const ClienteID: Integer): Double;
    function PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double): Double;
    procedure PuntosGuardaDatos(const Datos: TDatosPuntos);
    function PuntosDatos(const ClienteID: Integer): TDatosPuntos;
    function EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer): Boolean;
    function BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer): Integer;
    function EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TEntregaPremio;
    function DatosPremio(const PremioID: Integer): TDatosPremio;
    function ValidaConsumo(const Consumo: TConsumoExpress): Integer;
    function AgrupacionesBomba(const EstacionID: Integer): AAgrupacion;
    function DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer): TDatosCerrarLiquidacion;
    procedure ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
    function TicketsLiquidacion(const LiquidacionID: Integer): AnsiString;
    function ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer): Boolean;
    procedure PuntosGuardaCriterios(const PuntosCriterioID: Integer; const Datos: AnsiString);
    function DatosFacturaElectronica(const FacturaID: Integer; const EstacionID: Integer): TFacturaElectronica;
    function LlavePrivaCertificado(const LlavePrivada: AnsiString; const Certificado: AnsiString; const GasolineroID: Integer; const Password: AnsiString;
                                   const EstacionID: Integer): AnsiString;
    function SELLOPEMs(const Texto: UnicodeString; const EstacionID: Integer): AnsiString;
    function CERs(const DIR: AnsiString): AnsiString;
    function ValidaLiquidacionDespachador(const LiquidacionID: Integer): AnsiString;
    function ActualizaLiquidacionProd(const Estacion: Integer; const FechaIni: DateTime; const FechaFin: DateTime; const TurnoID: Integer): Boolean;
    procedure PuntosDespachador(const TurnoID: Integer; const EstacionID: Integer; const UsuarioID: Integer);
    procedure GuardarDatosFacturaPemex(const DatosFacturaPemex: TDatosFacturaPemex);
    function AfectaInventarios(const LiquidacionID: Integer; const UsuarioID: Integer): AnsiString;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: UnicodeString; const SelloDigital: UnicodeString;
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString;
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
    function CERsNUM(const DIR: AnsiString): AnsiString;
    function ActualizaFirmaDefault(const UsuarioID: Integer; const FIRMA: Binary): AnsiString;
    function obtendatosempleados(const EstacionID: AnsiString): AnsiString;
    procedure ProgramaMantenimiento(const IDPROGRAMAMANTENIMIENTO: Integer; const IDESTACION: Integer);
    function obtendatosActividadesProgramadas(const IDESTACION: Integer; const TIPO: Integer): AnsiString;
    function obtenNotificacionesDiarias(const IDESTACION: Integer): AnsiString;
    function registraactividadrealizada(const IDACTIVIDADMANTENIMIENTO: Integer; const NOTA: AnsiString; const STATUS: AnsiString): AnsiString;
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uROEventReceiver, uROSerializer, uROClient, uRORes;

{ AAgrupacion }

procedure AAgrupacion.Assign(iSource: TPersistent);
var
  lSource: AAgrupacion;
  i: Integer;
  lItem: TAgrupacion;
begin
  if (iSource is AAgrupacion) then begin
    lSource := AAgrupacion(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TAgrupacion(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AAgrupacion.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TAgrupacion);
end;

class function AAgrupacion.GetItemClass: System.TClass;
begin
  Result := TAgrupacion;
end;

class function AAgrupacion.GetItemSize: Integer;
begin
  Result := System.SizeOf(TAgrupacion);
end;

function AAgrupacion.GetItems(aIndex: Integer): TAgrupacion;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function AAgrupacion.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure AAgrupacion.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure AAgrupacion.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure AAgrupacion.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure AAgrupacion.SetItems(aIndex: Integer; const Value: TAgrupacion);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure AAgrupacion.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TAgrupacion.Create;
  FCount := ElementCount;
end;

function AAgrupacion.GetCount: Integer;
begin
  Result := FCount;
end;

procedure AAgrupacion.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function AAgrupacion.Add: TAgrupacion;
begin
  Result := TAgrupacion.Create;
  Self.Add(Result);
end;

function AAgrupacion.Add(const Value:TAgrupacion): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure AAgrupacion.ReadComplex(ASerializer: TObject);
var
  lval: TAgrupacion;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TAgrupacion, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure AAgrupacion.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(AAgrupacion);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TAgrupacion, i);
end;

{ AAgrupacionBomba }

procedure AAgrupacionBomba.Assign(iSource: TPersistent);
var
  lSource: AAgrupacionBomba;
  i: Integer;
begin
  if (iSource is AAgrupacionBomba) then begin
    lSource := AAgrupacionBomba(iSource);
    Self.Clear();

    Self.Resize(lSource.Count);
    for i := 0 to lSource.Count-1 do
      Self.Items[i] := lSource.Items[i];
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AAgrupacionBomba.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(Integer);
end;

class function AAgrupacionBomba.GetItemSize: Integer;
begin
  Result := System.SizeOf(Integer);
end;

function AAgrupacionBomba.GetItems(aIndex: Integer): Integer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function AAgrupacionBomba.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := @fItems[aIndex];
end;

procedure AAgrupacionBomba.Clear;
begin
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure AAgrupacionBomba.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure AAgrupacionBomba.SetItems(aIndex: Integer; const Value: Integer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  fItems[aIndex] := Value;
end;

procedure AAgrupacionBomba.Resize(ElementCount: Integer);
begin
  if fCount = ElementCount then Exit;
  System.SetLength(fItems, ElementCount);
  FCount := ElementCount;
end;

function AAgrupacionBomba.GetCount: Integer;
begin
  Result := FCount;
end;

procedure AAgrupacionBomba.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function AAgrupacionBomba.Add(const Value: Integer): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

function AAgrupacionBomba.GetIndex(const aValue: Integer; const aStartFrom: Integer = 0) : Integer;
begin
  Result := Self.IndexOf(aValue, aStartFrom);
end;

function AAgrupacionBomba.GetIndex(const aPropertyName : string;
  const aPropertyValue : Variant; StartFrom : Integer;
  Options : TROSearchOptions) : Integer;
begin
  Result := -1;
end;

function AAgrupacionBomba.IndexOf(const aValue: Integer; const aStartFrom: Integer = 0): Integer;
begin
  for Result := aStartFrom to Self.Count-1 do
    if Items[Result] = aValue then Exit;
  Result := -1;
end;

procedure AAgrupacionBomba.ReadComplex(ASerializer: TObject);
var
  lval: Integer;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadInteger(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TypInfo.otSLong, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure AAgrupacionBomba.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(AAgrupacionBomba);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteInteger(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TypInfo.otSLong, fItems[i], i);
end;

{ ADatosCelular }

procedure ADatosCelular.Assign(iSource: TPersistent);
var
  lSource: ADatosCelular;
  i: Integer;
  lItem: TDatosCelular;
begin
  if (iSource is ADatosCelular) then begin
    lSource := ADatosCelular(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDatosCelular(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADatosCelular.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDatosCelular);
end;

class function ADatosCelular.GetItemClass: System.TClass;
begin
  Result := TDatosCelular;
end;

class function ADatosCelular.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDatosCelular);
end;

function ADatosCelular.GetItems(aIndex: Integer): TDatosCelular;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ADatosCelular.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ADatosCelular.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADatosCelular.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADatosCelular.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ADatosCelular.SetItems(aIndex: Integer; const Value: TDatosCelular);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADatosCelular.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDatosCelular.Create;
  FCount := ElementCount;
end;

function ADatosCelular.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ADatosCelular.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ADatosCelular.Add: TDatosCelular;
begin
  Result := TDatosCelular.Create;
  Self.Add(Result);
end;

function ADatosCelular.Add(const Value:TDatosCelular): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ADatosCelular.ReadComplex(ASerializer: TObject);
var
  lval: TDatosCelular;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDatosCelular, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ADatosCelular.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ADatosCelular);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDatosCelular, i);
end;

{ ADespachadorLiquidacion }

procedure ADespachadorLiquidacion.Assign(iSource: TPersistent);
var
  lSource: ADespachadorLiquidacion;
  i: Integer;
  lItem: TDespachadorLiquidacion;
begin
  if (iSource is ADespachadorLiquidacion) then begin
    lSource := ADespachadorLiquidacion(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDespachadorLiquidacion(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADespachadorLiquidacion.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDespachadorLiquidacion);
end;

class function ADespachadorLiquidacion.GetItemClass: System.TClass;
begin
  Result := TDespachadorLiquidacion;
end;

class function ADespachadorLiquidacion.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDespachadorLiquidacion);
end;

function ADespachadorLiquidacion.GetItems(aIndex: Integer): TDespachadorLiquidacion;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ADespachadorLiquidacion.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ADespachadorLiquidacion.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADespachadorLiquidacion.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADespachadorLiquidacion.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ADespachadorLiquidacion.SetItems(aIndex: Integer; const Value: TDespachadorLiquidacion);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADespachadorLiquidacion.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDespachadorLiquidacion.Create;
  FCount := ElementCount;
end;

function ADespachadorLiquidacion.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ADespachadorLiquidacion.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ADespachadorLiquidacion.Add: TDespachadorLiquidacion;
begin
  Result := TDespachadorLiquidacion.Create;
  Self.Add(Result);
end;

function ADespachadorLiquidacion.Add(const Value:TDespachadorLiquidacion): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ADespachadorLiquidacion.ReadComplex(ASerializer: TObject);
var
  lval: TDespachadorLiquidacion;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDespachadorLiquidacion, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ADespachadorLiquidacion.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ADespachadorLiquidacion);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDespachadorLiquidacion, i);
end;

{ ADetalleExpress }

procedure ADetalleExpress.Assign(iSource: TPersistent);
var
  lSource: ADetalleExpress;
  i: Integer;
  lItem: TDetalleExpress;
begin
  if (iSource is ADetalleExpress) then begin
    lSource := ADetalleExpress(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDetalleExpress(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADetalleExpress.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDetalleExpress);
end;

class function ADetalleExpress.GetItemClass: System.TClass;
begin
  Result := TDetalleExpress;
end;

class function ADetalleExpress.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDetalleExpress);
end;

function ADetalleExpress.GetItems(aIndex: Integer): TDetalleExpress;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ADetalleExpress.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ADetalleExpress.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADetalleExpress.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADetalleExpress.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ADetalleExpress.SetItems(aIndex: Integer; const Value: TDetalleExpress);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADetalleExpress.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleExpress.Create;
  FCount := ElementCount;
end;

function ADetalleExpress.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ADetalleExpress.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ADetalleExpress.Add: TDetalleExpress;
begin
  Result := TDetalleExpress.Create;
  Self.Add(Result);
end;

function ADetalleExpress.Add(const Value:TDetalleExpress): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ADetalleExpress.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleExpress;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleExpress, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ADetalleExpress.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ADetalleExpress);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleExpress, i);
end;

{ ADetalleFacturaPemex }

procedure ADetalleFacturaPemex.Assign(iSource: TPersistent);
var
  lSource: ADetalleFacturaPemex;
  i: Integer;
  lItem: TDetalleFacturaPemex;
begin
  if (iSource is ADetalleFacturaPemex) then begin
    lSource := ADetalleFacturaPemex(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDetalleFacturaPemex(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADetalleFacturaPemex.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDetalleFacturaPemex);
end;

class function ADetalleFacturaPemex.GetItemClass: System.TClass;
begin
  Result := TDetalleFacturaPemex;
end;

class function ADetalleFacturaPemex.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDetalleFacturaPemex);
end;

function ADetalleFacturaPemex.GetItems(aIndex: Integer): TDetalleFacturaPemex;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ADetalleFacturaPemex.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ADetalleFacturaPemex.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADetalleFacturaPemex.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADetalleFacturaPemex.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ADetalleFacturaPemex.SetItems(aIndex: Integer; const Value: TDetalleFacturaPemex);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADetalleFacturaPemex.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleFacturaPemex.Create;
  FCount := ElementCount;
end;

function ADetalleFacturaPemex.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ADetalleFacturaPemex.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ADetalleFacturaPemex.Add: TDetalleFacturaPemex;
begin
  Result := TDetalleFacturaPemex.Create;
  Self.Add(Result);
end;

function ADetalleFacturaPemex.Add(const Value:TDetalleFacturaPemex): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ADetalleFacturaPemex.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleFacturaPemex;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleFacturaPemex, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ADetalleFacturaPemex.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ADetalleFacturaPemex);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleFacturaPemex, i);
end;

{ ADetalleLiquidacion }

procedure ADetalleLiquidacion.Assign(iSource: TPersistent);
var
  lSource: ADetalleLiquidacion;
  i: Integer;
  lItem: TDetalleLiquidacion;
begin
  if (iSource is ADetalleLiquidacion) then begin
    lSource := ADetalleLiquidacion(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDetalleLiquidacion(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADetalleLiquidacion.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDetalleLiquidacion);
end;

class function ADetalleLiquidacion.GetItemClass: System.TClass;
begin
  Result := TDetalleLiquidacion;
end;

class function ADetalleLiquidacion.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDetalleLiquidacion);
end;

function ADetalleLiquidacion.GetItems(aIndex: Integer): TDetalleLiquidacion;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ADetalleLiquidacion.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ADetalleLiquidacion.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADetalleLiquidacion.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADetalleLiquidacion.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ADetalleLiquidacion.SetItems(aIndex: Integer; const Value: TDetalleLiquidacion);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADetalleLiquidacion.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleLiquidacion.Create;
  FCount := ElementCount;
end;

function ADetalleLiquidacion.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ADetalleLiquidacion.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ADetalleLiquidacion.Add: TDetalleLiquidacion;
begin
  Result := TDetalleLiquidacion.Create;
  Self.Add(Result);
end;

function ADetalleLiquidacion.Add(const Value:TDetalleLiquidacion): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ADetalleLiquidacion.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleLiquidacion;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleLiquidacion, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ADetalleLiquidacion.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ADetalleLiquidacion);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleLiquidacion, i);
end;

{ ArrayOpcion }

procedure ArrayOpcion.Assign(iSource: TPersistent);
var
  lSource: ArrayOpcion;
  i: Integer;
  lItem: TOpcion;
begin
  if (iSource is ArrayOpcion) then begin
    lSource := ArrayOpcion(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TOpcion(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ArrayOpcion.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TOpcion);
end;

class function ArrayOpcion.GetItemClass: System.TClass;
begin
  Result := TOpcion;
end;

class function ArrayOpcion.GetItemSize: Integer;
begin
  Result := System.SizeOf(TOpcion);
end;

function ArrayOpcion.GetItems(aIndex: Integer): TOpcion;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ArrayOpcion.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ArrayOpcion.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ArrayOpcion.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ArrayOpcion.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ArrayOpcion.SetItems(aIndex: Integer; const Value: TOpcion);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ArrayOpcion.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TOpcion.Create;
  FCount := ElementCount;
end;

function ArrayOpcion.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ArrayOpcion.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ArrayOpcion.Add: TOpcion;
begin
  Result := TOpcion.Create;
  Self.Add(Result);
end;

function ArrayOpcion.Add(const Value:TOpcion): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ArrayOpcion.ReadComplex(ASerializer: TObject);
var
  lval: TOpcion;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TOpcion, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ArrayOpcion.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ArrayOpcion);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TOpcion, i);
end;

{ ATCarteraVale }

procedure ATCarteraVale.Assign(iSource: TPersistent);
var
  lSource: ATCarteraVale;
  i: Integer;
  lItem: TCarteraVale;
begin
  if (iSource is ATCarteraVale) then begin
    lSource := ATCarteraVale(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TCarteraVale(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATCarteraVale.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TCarteraVale);
end;

class function ATCarteraVale.GetItemClass: System.TClass;
begin
  Result := TCarteraVale;
end;

class function ATCarteraVale.GetItemSize: Integer;
begin
  Result := System.SizeOf(TCarteraVale);
end;

function ATCarteraVale.GetItems(aIndex: Integer): TCarteraVale;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATCarteraVale.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATCarteraVale.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATCarteraVale.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATCarteraVale.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATCarteraVale.SetItems(aIndex: Integer; const Value: TCarteraVale);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATCarteraVale.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TCarteraVale.Create;
  FCount := ElementCount;
end;

function ATCarteraVale.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATCarteraVale.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATCarteraVale.Add: TCarteraVale;
begin
  Result := TCarteraVale.Create;
  Self.Add(Result);
end;

function ATCarteraVale.Add(const Value:TCarteraVale): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATCarteraVale.ReadComplex(ASerializer: TObject);
var
  lval: TCarteraVale;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TCarteraVale, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATCarteraVale.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATCarteraVale);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TCarteraVale, i);
end;

{ ATDetalleCupon }

procedure ATDetalleCupon.Assign(iSource: TPersistent);
var
  lSource: ATDetalleCupon;
  i: Integer;
  lItem: TDetalleCupon;
begin
  if (iSource is ATDetalleCupon) then begin
    lSource := ATDetalleCupon(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDetalleCupon(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleCupon.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDetalleCupon);
end;

class function ATDetalleCupon.GetItemClass: System.TClass;
begin
  Result := TDetalleCupon;
end;

class function ATDetalleCupon.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDetalleCupon);
end;

function ATDetalleCupon.GetItems(aIndex: Integer): TDetalleCupon;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATDetalleCupon.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATDetalleCupon.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleCupon.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleCupon.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATDetalleCupon.SetItems(aIndex: Integer; const Value: TDetalleCupon);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleCupon.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleCupon.Create;
  FCount := ElementCount;
end;

function ATDetalleCupon.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATDetalleCupon.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATDetalleCupon.Add: TDetalleCupon;
begin
  Result := TDetalleCupon.Create;
  Self.Add(Result);
end;

function ATDetalleCupon.Add(const Value:TDetalleCupon): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATDetalleCupon.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleCupon;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleCupon, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATDetalleCupon.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATDetalleCupon);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleCupon, i);
end;

{ ATDetalleFactura }

procedure ATDetalleFactura.Assign(iSource: TPersistent);
var
  lSource: ATDetalleFactura;
  i: Integer;
  lItem: TDetalleFactura;
begin
  if (iSource is ATDetalleFactura) then begin
    lSource := ATDetalleFactura(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDetalleFactura(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleFactura.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDetalleFactura);
end;

class function ATDetalleFactura.GetItemClass: System.TClass;
begin
  Result := TDetalleFactura;
end;

class function ATDetalleFactura.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDetalleFactura);
end;

function ATDetalleFactura.GetItems(aIndex: Integer): TDetalleFactura;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATDetalleFactura.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATDetalleFactura.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleFactura.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleFactura.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATDetalleFactura.SetItems(aIndex: Integer; const Value: TDetalleFactura);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleFactura.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleFactura.Create;
  FCount := ElementCount;
end;

function ATDetalleFactura.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATDetalleFactura.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATDetalleFactura.Add: TDetalleFactura;
begin
  Result := TDetalleFactura.Create;
  Self.Add(Result);
end;

function ATDetalleFactura.Add(const Value:TDetalleFactura): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATDetalleFactura.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleFactura;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleFactura, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATDetalleFactura.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATDetalleFactura);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleFactura, i);
end;

{ ATDetalleRecibo }

procedure ATDetalleRecibo.Assign(iSource: TPersistent);
var
  lSource: ATDetalleRecibo;
  i: Integer;
  lItem: TDetalleReciboPago;
begin
  if (iSource is ATDetalleRecibo) then begin
    lSource := ATDetalleRecibo(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDetalleReciboPago(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleRecibo.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDetalleReciboPago);
end;

class function ATDetalleRecibo.GetItemClass: System.TClass;
begin
  Result := TDetalleReciboPago;
end;

class function ATDetalleRecibo.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDetalleReciboPago);
end;

function ATDetalleRecibo.GetItems(aIndex: Integer): TDetalleReciboPago;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATDetalleRecibo.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATDetalleRecibo.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleRecibo.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleRecibo.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATDetalleRecibo.SetItems(aIndex: Integer; const Value: TDetalleReciboPago);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleRecibo.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleReciboPago.Create;
  FCount := ElementCount;
end;

function ATDetalleRecibo.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATDetalleRecibo.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATDetalleRecibo.Add: TDetalleReciboPago;
begin
  Result := TDetalleReciboPago.Create;
  Self.Add(Result);
end;

function ATDetalleRecibo.Add(const Value:TDetalleReciboPago): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATDetalleRecibo.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleReciboPago;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleReciboPago, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATDetalleRecibo.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATDetalleRecibo);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleReciboPago, i);
end;

{ ATDetalleTransaccion }

procedure ATDetalleTransaccion.Assign(iSource: TPersistent);
var
  lSource: ATDetalleTransaccion;
  i: Integer;
  lItem: TDetalleTransaccion;
begin
  if (iSource is ATDetalleTransaccion) then begin
    lSource := ATDetalleTransaccion(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDetalleTransaccion(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleTransaccion.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDetalleTransaccion);
end;

class function ATDetalleTransaccion.GetItemClass: System.TClass;
begin
  Result := TDetalleTransaccion;
end;

class function ATDetalleTransaccion.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDetalleTransaccion);
end;

function ATDetalleTransaccion.GetItems(aIndex: Integer): TDetalleTransaccion;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATDetalleTransaccion.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATDetalleTransaccion.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleTransaccion.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleTransaccion.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATDetalleTransaccion.SetItems(aIndex: Integer; const Value: TDetalleTransaccion);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleTransaccion.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleTransaccion.Create;
  FCount := ElementCount;
end;

function ATDetalleTransaccion.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATDetalleTransaccion.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATDetalleTransaccion.Add: TDetalleTransaccion;
begin
  Result := TDetalleTransaccion.Create;
  Self.Add(Result);
end;

function ATDetalleTransaccion.Add(const Value:TDetalleTransaccion): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATDetalleTransaccion.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleTransaccion;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleTransaccion, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATDetalleTransaccion.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATDetalleTransaccion);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleTransaccion, i);
end;

{ ATDetalleValeCreditoFactura }

procedure ATDetalleValeCreditoFactura.Assign(iSource: TPersistent);
var
  lSource: ATDetalleValeCreditoFactura;
  i: Integer;
  lItem: TDetalleValeCreditoFactura;
begin
  if (iSource is ATDetalleValeCreditoFactura) then begin
    lSource := ATDetalleValeCreditoFactura(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDetalleValeCreditoFactura(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleValeCreditoFactura.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDetalleValeCreditoFactura);
end;

class function ATDetalleValeCreditoFactura.GetItemClass: System.TClass;
begin
  Result := TDetalleValeCreditoFactura;
end;

class function ATDetalleValeCreditoFactura.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDetalleValeCreditoFactura);
end;

function ATDetalleValeCreditoFactura.GetItems(aIndex: Integer): TDetalleValeCreditoFactura;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATDetalleValeCreditoFactura.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATDetalleValeCreditoFactura.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleValeCreditoFactura.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleValeCreditoFactura.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATDetalleValeCreditoFactura.SetItems(aIndex: Integer; const Value: TDetalleValeCreditoFactura);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleValeCreditoFactura.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleValeCreditoFactura.Create;
  FCount := ElementCount;
end;

function ATDetalleValeCreditoFactura.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATDetalleValeCreditoFactura.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATDetalleValeCreditoFactura.Add: TDetalleValeCreditoFactura;
begin
  Result := TDetalleValeCreditoFactura.Create;
  Self.Add(Result);
end;

function ATDetalleValeCreditoFactura.Add(const Value:TDetalleValeCreditoFactura): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATDetalleValeCreditoFactura.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleValeCreditoFactura;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleValeCreditoFactura, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATDetalleValeCreditoFactura.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATDetalleValeCreditoFactura);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleValeCreditoFactura, i);
end;

{ ATFacturaElectronicaDetalleImportes }

procedure ATFacturaElectronicaDetalleImportes.Assign(iSource: TPersistent);
var
  lSource: ATFacturaElectronicaDetalleImportes;
  i: Integer;
  lItem: TFacturaElectronicaDetalleImportes;
begin
  if (iSource is ATFacturaElectronicaDetalleImportes) then begin
    lSource := ATFacturaElectronicaDetalleImportes(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TFacturaElectronicaDetalleImportes(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATFacturaElectronicaDetalleImportes.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TFacturaElectronicaDetalleImportes);
end;

class function ATFacturaElectronicaDetalleImportes.GetItemClass: System.TClass;
begin
  Result := TFacturaElectronicaDetalleImportes;
end;

class function ATFacturaElectronicaDetalleImportes.GetItemSize: Integer;
begin
  Result := System.SizeOf(TFacturaElectronicaDetalleImportes);
end;

function ATFacturaElectronicaDetalleImportes.GetItems(aIndex: Integer): TFacturaElectronicaDetalleImportes;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATFacturaElectronicaDetalleImportes.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATFacturaElectronicaDetalleImportes.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATFacturaElectronicaDetalleImportes.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATFacturaElectronicaDetalleImportes.SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImportes);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TFacturaElectronicaDetalleImportes.Create;
  FCount := ElementCount;
end;

function ATFacturaElectronicaDetalleImportes.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATFacturaElectronicaDetalleImportes.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATFacturaElectronicaDetalleImportes.Add: TFacturaElectronicaDetalleImportes;
begin
  Result := TFacturaElectronicaDetalleImportes.Create;
  Self.Add(Result);
end;

function ATFacturaElectronicaDetalleImportes.Add(const Value:TFacturaElectronicaDetalleImportes): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATFacturaElectronicaDetalleImportes.ReadComplex(ASerializer: TObject);
var
  lval: TFacturaElectronicaDetalleImportes;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TFacturaElectronicaDetalleImportes, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATFacturaElectronicaDetalleImportes);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TFacturaElectronicaDetalleImportes, i);
end;

{ ATFacturaElectronicaDetalleImpuestos }

procedure ATFacturaElectronicaDetalleImpuestos.Assign(iSource: TPersistent);
var
  lSource: ATFacturaElectronicaDetalleImpuestos;
  i: Integer;
  lItem: TFacturaElectronicaDetalleImpuestos;
begin
  if (iSource is ATFacturaElectronicaDetalleImpuestos) then begin
    lSource := ATFacturaElectronicaDetalleImpuestos(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TFacturaElectronicaDetalleImpuestos(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TFacturaElectronicaDetalleImpuestos);
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemClass: System.TClass;
begin
  Result := TFacturaElectronicaDetalleImpuestos;
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemSize: Integer;
begin
  Result := System.SizeOf(TFacturaElectronicaDetalleImpuestos);
end;

function ATFacturaElectronicaDetalleImpuestos.GetItems(aIndex: Integer): TFacturaElectronicaDetalleImpuestos;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATFacturaElectronicaDetalleImpuestos.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATFacturaElectronicaDetalleImpuestos.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATFacturaElectronicaDetalleImpuestos.SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImpuestos);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TFacturaElectronicaDetalleImpuestos.Create;
  FCount := ElementCount;
end;

function ATFacturaElectronicaDetalleImpuestos.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATFacturaElectronicaDetalleImpuestos.Add: TFacturaElectronicaDetalleImpuestos;
begin
  Result := TFacturaElectronicaDetalleImpuestos.Create;
  Self.Add(Result);
end;

function ATFacturaElectronicaDetalleImpuestos.Add(const Value:TFacturaElectronicaDetalleImpuestos): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATFacturaElectronicaDetalleImpuestos.ReadComplex(ASerializer: TObject);
var
  lval: TFacturaElectronicaDetalleImpuestos;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TFacturaElectronicaDetalleImpuestos, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATFacturaElectronicaDetalleImpuestos);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TFacturaElectronicaDetalleImpuestos, i);
end;

{ ATipoValor }

procedure ATipoValor.Assign(iSource: TPersistent);
var
  lSource: ATipoValor;
  i: Integer;
  lItem: TTipoValor;
begin
  if (iSource is ATipoValor) then begin
    lSource := ATipoValor(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TTipoValor(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATipoValor.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TTipoValor);
end;

class function ATipoValor.GetItemClass: System.TClass;
begin
  Result := TTipoValor;
end;

class function ATipoValor.GetItemSize: Integer;
begin
  Result := System.SizeOf(TTipoValor);
end;

function ATipoValor.GetItems(aIndex: Integer): TTipoValor;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATipoValor.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATipoValor.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATipoValor.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATipoValor.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATipoValor.SetItems(aIndex: Integer; const Value: TTipoValor);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATipoValor.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TTipoValor.Create;
  FCount := ElementCount;
end;

function ATipoValor.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATipoValor.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATipoValor.Add: TTipoValor;
begin
  Result := TTipoValor.Create;
  Self.Add(Result);
end;

function ATipoValor.Add(const Value:TTipoValor): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATipoValor.ReadComplex(ASerializer: TObject);
var
  lval: TTipoValor;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TTipoValor, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATipoValor.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATipoValor);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TTipoValor, i);
end;

{ ATLiquidacionDetalle }

procedure ATLiquidacionDetalle.Assign(iSource: TPersistent);
var
  lSource: ATLiquidacionDetalle;
  i: Integer;
  lItem: TLiquidacionDetalle;
begin
  if (iSource is ATLiquidacionDetalle) then begin
    lSource := ATLiquidacionDetalle(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TLiquidacionDetalle(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATLiquidacionDetalle.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TLiquidacionDetalle);
end;

class function ATLiquidacionDetalle.GetItemClass: System.TClass;
begin
  Result := TLiquidacionDetalle;
end;

class function ATLiquidacionDetalle.GetItemSize: Integer;
begin
  Result := System.SizeOf(TLiquidacionDetalle);
end;

function ATLiquidacionDetalle.GetItems(aIndex: Integer): TLiquidacionDetalle;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATLiquidacionDetalle.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATLiquidacionDetalle.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATLiquidacionDetalle.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATLiquidacionDetalle.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATLiquidacionDetalle.SetItems(aIndex: Integer; const Value: TLiquidacionDetalle);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATLiquidacionDetalle.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TLiquidacionDetalle.Create;
  FCount := ElementCount;
end;

function ATLiquidacionDetalle.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATLiquidacionDetalle.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATLiquidacionDetalle.Add: TLiquidacionDetalle;
begin
  Result := TLiquidacionDetalle.Create;
  Self.Add(Result);
end;

function ATLiquidacionDetalle.Add(const Value:TLiquidacionDetalle): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATLiquidacionDetalle.ReadComplex(ASerializer: TObject);
var
  lval: TLiquidacionDetalle;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TLiquidacionDetalle, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATLiquidacionDetalle.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATLiquidacionDetalle);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TLiquidacionDetalle, i);
end;

{ ATLiquidacionProducto }

procedure ATLiquidacionProducto.Assign(iSource: TPersistent);
var
  lSource: ATLiquidacionProducto;
  i: Integer;
  lItem: TLiquidacionProducto;
begin
  if (iSource is ATLiquidacionProducto) then begin
    lSource := ATLiquidacionProducto(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TLiquidacionProducto(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATLiquidacionProducto.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TLiquidacionProducto);
end;

class function ATLiquidacionProducto.GetItemClass: System.TClass;
begin
  Result := TLiquidacionProducto;
end;

class function ATLiquidacionProducto.GetItemSize: Integer;
begin
  Result := System.SizeOf(TLiquidacionProducto);
end;

function ATLiquidacionProducto.GetItems(aIndex: Integer): TLiquidacionProducto;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATLiquidacionProducto.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATLiquidacionProducto.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATLiquidacionProducto.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATLiquidacionProducto.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATLiquidacionProducto.SetItems(aIndex: Integer; const Value: TLiquidacionProducto);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATLiquidacionProducto.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TLiquidacionProducto.Create;
  FCount := ElementCount;
end;

function ATLiquidacionProducto.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATLiquidacionProducto.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATLiquidacionProducto.Add: TLiquidacionProducto;
begin
  Result := TLiquidacionProducto.Create;
  Self.Add(Result);
end;

function ATLiquidacionProducto.Add(const Value:TLiquidacionProducto): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATLiquidacionProducto.ReadComplex(ASerializer: TObject);
var
  lval: TLiquidacionProducto;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TLiquidacionProducto, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATLiquidacionProducto.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATLiquidacionProducto);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TLiquidacionProducto, i);
end;

{ ATTicketFactura }

procedure ATTicketFactura.Assign(iSource: TPersistent);
var
  lSource: ATTicketFactura;
  i: Integer;
  lItem: TTicketFactura;
begin
  if (iSource is ATTicketFactura) then begin
    lSource := ATTicketFactura(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TTicketFactura(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATTicketFactura.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TTicketFactura);
end;

class function ATTicketFactura.GetItemClass: System.TClass;
begin
  Result := TTicketFactura;
end;

class function ATTicketFactura.GetItemSize: Integer;
begin
  Result := System.SizeOf(TTicketFactura);
end;

function ATTicketFactura.GetItems(aIndex: Integer): TTicketFactura;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATTicketFactura.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATTicketFactura.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATTicketFactura.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATTicketFactura.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATTicketFactura.SetItems(aIndex: Integer; const Value: TTicketFactura);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATTicketFactura.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TTicketFactura.Create;
  FCount := ElementCount;
end;

function ATTicketFactura.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATTicketFactura.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATTicketFactura.Add: TTicketFactura;
begin
  Result := TTicketFactura.Create;
  Self.Add(Result);
end;

function ATTicketFactura.Add(const Value:TTicketFactura): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATTicketFactura.ReadComplex(ASerializer: TObject);
var
  lval: TTicketFactura;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TTicketFactura, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATTicketFactura.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATTicketFactura);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TTicketFactura, i);
end;

{ TParametros }

procedure TParametros.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TParametros;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TParametros) then begin
    lSource := LibraryEmpresas_Intf.TParametros(iSource);

    Self.FechaIni := lSource.FechaIni;
    Self.FechaFin := lSource.FechaFin;
    Self.ClienteIni := lSource.ClienteIni;
    Self.ClienteFin := lSource.ClienteFin;
    Self.Estacion := lSource.Estacion;
    Self.SecuenciaIni := lSource.SecuenciaIni;
    Self.SecuenciaFin := lSource.SecuenciaFin;
    Self.Factura := lSource.Factura;
    Self.FolioFactura := lSource.FolioFactura;
    Self.Serie := lSource.Serie;
    Self.Ejercicio := lSource.Ejercicio;
    Self.Periodo := lSource.Periodo;
    Self.Dia := lSource.Dia;
    Self.EjercicioFin := lSource.EjercicioFin;
    Self.PeriodoFin := lSource.PeriodoFin;
    Self.DiaFin := lSource.DiaFin;
    Self.Secuencia := lSource.Secuencia;
    Self.Status := lSource.Status;
    Self.Agrupacion := lSource.Agrupacion;
    Self.Almacen := lSource.Almacen;
    Self.SecuenciaIniLiquidacion := lSource.SecuenciaIniLiquidacion;
    Self.SecuenciaFinLiquidacion := lSource.SecuenciaFinLiquidacion;
    Self.FacturasdeCompras := lSource.FacturasdeCompras;
    Self.MontoFacturado := lSource.MontoFacturado;
    Self.Turno := lSource.Turno;
    Self.EmpleadoIni := lSource.EmpleadoIni;
    Self.EmpleadoFin := lSource.EmpleadoFin;
    Self.EstacionIni := lSource.EstacionIni;
    Self.EstacionFin := lSource.EstacionFin;
  end;
end;

procedure TParametros.ReadComplex(ASerializer: TObject);
var
  l_Agrupacion: Integer;
  l_Almacen: Integer;
  l_ClienteFin: Integer;
  l_ClienteIni: Integer;
  l_Dia: Integer;
  l_DiaFin: Integer;
  l_Ejercicio: Integer;
  l_EjercicioFin: Integer;
  l_EmpleadoFin: Integer;
  l_EmpleadoIni: Integer;
  l_Estacion: Integer;
  l_EstacionFin: Integer;
  l_EstacionIni: Integer;
  l_Factura: Integer;
  l_FacturasdeCompras: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_FolioFactura: Integer;
  l_MontoFacturado: Double;
  l_Periodo: Integer;
  l_PeriodoFin: Integer;
  l_Secuencia: AnsiString;
  l_SecuenciaFin: Integer;
  l_SecuenciaFinLiquidacion: Integer;
  l_SecuenciaIni: Integer;
  l_SecuenciaIniLiquidacion: Integer;
  l_Serie: AnsiString;
  l_Status: AnsiString;
  l_Turno: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FechaIni := Self.FechaIni;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaIni']));
    end;
    Self.FechaIni := l_FechaIni;
    l_FechaFin := Self.FechaFin;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaFin']));
    end;
    Self.FechaFin := l_FechaFin;
    l_ClienteIni := Self.ClienteIni;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteIni', TypInfo.otSLong, l_ClienteIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteIni']));
    end;
    Self.ClienteIni := l_ClienteIni;
    l_ClienteFin := Self.ClienteFin;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteFin', TypInfo.otSLong, l_ClienteFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteFin']));
    end;
    Self.ClienteFin := l_ClienteFin;
    l_Estacion := Self.Estacion;
    try
      TROSerializer(ASerializer).ReadInteger('Estacion', TypInfo.otSLong, l_Estacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Estacion']));
    end;
    Self.Estacion := l_Estacion;
    l_SecuenciaIni := Self.SecuenciaIni;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaIni', TypInfo.otSLong, l_SecuenciaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaIni']));
    end;
    Self.SecuenciaIni := l_SecuenciaIni;
    l_SecuenciaFin := Self.SecuenciaFin;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaFin', TypInfo.otSLong, l_SecuenciaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaFin']));
    end;
    Self.SecuenciaFin := l_SecuenciaFin;
    l_Factura := Self.Factura;
    try
      TROSerializer(ASerializer).ReadInteger('Factura', TypInfo.otSLong, l_Factura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Factura']));
    end;
    Self.Factura := l_Factura;
    l_FolioFactura := Self.FolioFactura;
    try
      TROSerializer(ASerializer).ReadInteger('FolioFactura', TypInfo.otSLong, l_FolioFactura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FolioFactura']));
    end;
    Self.FolioFactura := l_FolioFactura;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Ejercicio := Self.Ejercicio;
    try
      TROSerializer(ASerializer).ReadInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ejercicio']));
    end;
    Self.Ejercicio := l_Ejercicio;
    l_Periodo := Self.Periodo;
    try
      TROSerializer(ASerializer).ReadInteger('Periodo', TypInfo.otSLong, l_Periodo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Periodo']));
    end;
    Self.Periodo := l_Periodo;
    l_Dia := Self.Dia;
    try
      TROSerializer(ASerializer).ReadInteger('Dia', TypInfo.otSLong, l_Dia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Dia']));
    end;
    Self.Dia := l_Dia;
    l_EjercicioFin := Self.EjercicioFin;
    try
      TROSerializer(ASerializer).ReadInteger('EjercicioFin', TypInfo.otSLong, l_EjercicioFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EjercicioFin']));
    end;
    Self.EjercicioFin := l_EjercicioFin;
    l_PeriodoFin := Self.PeriodoFin;
    try
      TROSerializer(ASerializer).ReadInteger('PeriodoFin', TypInfo.otSLong, l_PeriodoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PeriodoFin']));
    end;
    Self.PeriodoFin := l_PeriodoFin;
    l_DiaFin := Self.DiaFin;
    try
      TROSerializer(ASerializer).ReadInteger('DiaFin', TypInfo.otSLong, l_DiaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DiaFin']));
    end;
    Self.DiaFin := l_DiaFin;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Secuencia', l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_Status := Self.Status;
    try
      TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Status']));
    end;
    Self.Status := l_Status;
    l_Agrupacion := Self.Agrupacion;
    try
      TROSerializer(ASerializer).ReadInteger('Agrupacion', TypInfo.otSLong, l_Agrupacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Agrupacion']));
    end;
    Self.Agrupacion := l_Agrupacion;
    l_Almacen := Self.Almacen;
    try
      TROSerializer(ASerializer).ReadInteger('Almacen', TypInfo.otSLong, l_Almacen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Almacen']));
    end;
    Self.Almacen := l_Almacen;
    l_SecuenciaIniLiquidacion := Self.SecuenciaIniLiquidacion;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaIniLiquidacion', TypInfo.otSLong, l_SecuenciaIniLiquidacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaIniLiquidacion']));
    end;
    Self.SecuenciaIniLiquidacion := l_SecuenciaIniLiquidacion;
    l_SecuenciaFinLiquidacion := Self.SecuenciaFinLiquidacion;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaFinLiquidacion', TypInfo.otSLong, l_SecuenciaFinLiquidacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaFinLiquidacion']));
    end;
    Self.SecuenciaFinLiquidacion := l_SecuenciaFinLiquidacion;
    l_FacturasdeCompras := Self.FacturasdeCompras;
    try
      TROSerializer(ASerializer).ReadInteger('FacturasdeCompras', TypInfo.otSLong, l_FacturasdeCompras);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturasdeCompras']));
    end;
    Self.FacturasdeCompras := l_FacturasdeCompras;
    l_MontoFacturado := Self.MontoFacturado;
    try
      TROSerializer(ASerializer).ReadDouble('MontoFacturado', TypInfo.ftDouble, l_MontoFacturado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MontoFacturado']));
    end;
    Self.MontoFacturado := l_MontoFacturado;
    l_Turno := Self.Turno;
    try
      TROSerializer(ASerializer).ReadInteger('Turno', TypInfo.otSLong, l_Turno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Turno']));
    end;
    Self.Turno := l_Turno;
    l_EmpleadoIni := Self.EmpleadoIni;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoIni', TypInfo.otSLong, l_EmpleadoIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoIni']));
    end;
    Self.EmpleadoIni := l_EmpleadoIni;
    l_EmpleadoFin := Self.EmpleadoFin;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoFin', TypInfo.otSLong, l_EmpleadoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoFin']));
    end;
    Self.EmpleadoFin := l_EmpleadoFin;
    l_EstacionIni := Self.EstacionIni;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionIni']));
    end;
    Self.EstacionIni := l_EstacionIni;
    l_EstacionFin := Self.EstacionFin;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionFin']));
    end;
    Self.EstacionFin := l_EstacionFin;
  end
  else begin
    l_Agrupacion := Self.Agrupacion;
    try
      TROSerializer(ASerializer).ReadInteger('Agrupacion', TypInfo.otSLong, l_Agrupacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Agrupacion']));
    end;
    Self.Agrupacion := l_Agrupacion;
    l_Almacen := Self.Almacen;
    try
      TROSerializer(ASerializer).ReadInteger('Almacen', TypInfo.otSLong, l_Almacen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Almacen']));
    end;
    Self.Almacen := l_Almacen;
    l_ClienteFin := Self.ClienteFin;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteFin', TypInfo.otSLong, l_ClienteFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteFin']));
    end;
    Self.ClienteFin := l_ClienteFin;
    l_ClienteIni := Self.ClienteIni;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteIni', TypInfo.otSLong, l_ClienteIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteIni']));
    end;
    Self.ClienteIni := l_ClienteIni;
    l_Dia := Self.Dia;
    try
      TROSerializer(ASerializer).ReadInteger('Dia', TypInfo.otSLong, l_Dia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Dia']));
    end;
    Self.Dia := l_Dia;
    l_DiaFin := Self.DiaFin;
    try
      TROSerializer(ASerializer).ReadInteger('DiaFin', TypInfo.otSLong, l_DiaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DiaFin']));
    end;
    Self.DiaFin := l_DiaFin;
    l_Ejercicio := Self.Ejercicio;
    try
      TROSerializer(ASerializer).ReadInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ejercicio']));
    end;
    Self.Ejercicio := l_Ejercicio;
    l_EjercicioFin := Self.EjercicioFin;
    try
      TROSerializer(ASerializer).ReadInteger('EjercicioFin', TypInfo.otSLong, l_EjercicioFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EjercicioFin']));
    end;
    Self.EjercicioFin := l_EjercicioFin;
    l_EmpleadoFin := Self.EmpleadoFin;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoFin', TypInfo.otSLong, l_EmpleadoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoFin']));
    end;
    Self.EmpleadoFin := l_EmpleadoFin;
    l_EmpleadoIni := Self.EmpleadoIni;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoIni', TypInfo.otSLong, l_EmpleadoIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoIni']));
    end;
    Self.EmpleadoIni := l_EmpleadoIni;
    l_Estacion := Self.Estacion;
    try
      TROSerializer(ASerializer).ReadInteger('Estacion', TypInfo.otSLong, l_Estacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Estacion']));
    end;
    Self.Estacion := l_Estacion;
    l_EstacionFin := Self.EstacionFin;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionFin']));
    end;
    Self.EstacionFin := l_EstacionFin;
    l_EstacionIni := Self.EstacionIni;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionIni']));
    end;
    Self.EstacionIni := l_EstacionIni;
    l_Factura := Self.Factura;
    try
      TROSerializer(ASerializer).ReadInteger('Factura', TypInfo.otSLong, l_Factura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Factura']));
    end;
    Self.Factura := l_Factura;
    l_FacturasdeCompras := Self.FacturasdeCompras;
    try
      TROSerializer(ASerializer).ReadInteger('FacturasdeCompras', TypInfo.otSLong, l_FacturasdeCompras);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturasdeCompras']));
    end;
    Self.FacturasdeCompras := l_FacturasdeCompras;
    l_FechaFin := Self.FechaFin;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaFin']));
    end;
    Self.FechaFin := l_FechaFin;
    l_FechaIni := Self.FechaIni;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaIni']));
    end;
    Self.FechaIni := l_FechaIni;
    l_FolioFactura := Self.FolioFactura;
    try
      TROSerializer(ASerializer).ReadInteger('FolioFactura', TypInfo.otSLong, l_FolioFactura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FolioFactura']));
    end;
    Self.FolioFactura := l_FolioFactura;
    l_MontoFacturado := Self.MontoFacturado;
    try
      TROSerializer(ASerializer).ReadDouble('MontoFacturado', TypInfo.ftDouble, l_MontoFacturado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MontoFacturado']));
    end;
    Self.MontoFacturado := l_MontoFacturado;
    l_Periodo := Self.Periodo;
    try
      TROSerializer(ASerializer).ReadInteger('Periodo', TypInfo.otSLong, l_Periodo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Periodo']));
    end;
    Self.Periodo := l_Periodo;
    l_PeriodoFin := Self.PeriodoFin;
    try
      TROSerializer(ASerializer).ReadInteger('PeriodoFin', TypInfo.otSLong, l_PeriodoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PeriodoFin']));
    end;
    Self.PeriodoFin := l_PeriodoFin;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Secuencia', l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_SecuenciaFin := Self.SecuenciaFin;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaFin', TypInfo.otSLong, l_SecuenciaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaFin']));
    end;
    Self.SecuenciaFin := l_SecuenciaFin;
    l_SecuenciaFinLiquidacion := Self.SecuenciaFinLiquidacion;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaFinLiquidacion', TypInfo.otSLong, l_SecuenciaFinLiquidacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaFinLiquidacion']));
    end;
    Self.SecuenciaFinLiquidacion := l_SecuenciaFinLiquidacion;
    l_SecuenciaIni := Self.SecuenciaIni;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaIni', TypInfo.otSLong, l_SecuenciaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaIni']));
    end;
    Self.SecuenciaIni := l_SecuenciaIni;
    l_SecuenciaIniLiquidacion := Self.SecuenciaIniLiquidacion;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaIniLiquidacion', TypInfo.otSLong, l_SecuenciaIniLiquidacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaIniLiquidacion']));
    end;
    Self.SecuenciaIniLiquidacion := l_SecuenciaIniLiquidacion;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Status := Self.Status;
    try
      TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Status']));
    end;
    Self.Status := l_Status;
    l_Turno := Self.Turno;
    try
      TROSerializer(ASerializer).ReadInteger('Turno', TypInfo.otSLong, l_Turno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Turno']));
    end;
    Self.Turno := l_Turno;
  end;
end;

procedure TParametros.WriteComplex(ASerializer: TObject);
var
  l_Agrupacion: Integer;
  l_Almacen: Integer;
  l_ClienteFin: Integer;
  l_ClienteIni: Integer;
  l_Dia: Integer;
  l_DiaFin: Integer;
  l_Ejercicio: Integer;
  l_EjercicioFin: Integer;
  l_EmpleadoFin: Integer;
  l_EmpleadoIni: Integer;
  l_Estacion: Integer;
  l_EstacionFin: Integer;
  l_EstacionIni: Integer;
  l_Factura: Integer;
  l_FacturasdeCompras: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_FolioFactura: Integer;
  l_MontoFacturado: Double;
  l_Periodo: Integer;
  l_PeriodoFin: Integer;
  l_Secuencia: AnsiString;
  l_SecuenciaFin: Integer;
  l_SecuenciaFinLiquidacion: Integer;
  l_SecuenciaIni: Integer;
  l_SecuenciaIniLiquidacion: Integer;
  l_Serie: AnsiString;
  l_Status: AnsiString;
  l_Turno: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TParametros);
    l_FechaIni := Self.FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FechaFin := Self.FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_ClienteIni := Self.ClienteIni;
    TROSerializer(ASerializer).WriteInteger('ClienteIni', TypInfo.otSLong, l_ClienteIni);
    l_ClienteFin := Self.ClienteFin;
    TROSerializer(ASerializer).WriteInteger('ClienteFin', TypInfo.otSLong, l_ClienteFin);
    l_Estacion := Self.Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', TypInfo.otSLong, l_Estacion);
    l_SecuenciaIni := Self.SecuenciaIni;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIni', TypInfo.otSLong, l_SecuenciaIni);
    l_SecuenciaFin := Self.SecuenciaFin;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFin', TypInfo.otSLong, l_SecuenciaFin);
    l_Factura := Self.Factura;
    TROSerializer(ASerializer).WriteInteger('Factura', TypInfo.otSLong, l_Factura);
    l_FolioFactura := Self.FolioFactura;
    TROSerializer(ASerializer).WriteInteger('FolioFactura', TypInfo.otSLong, l_FolioFactura);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Ejercicio := Self.Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    l_Periodo := Self.Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', TypInfo.otSLong, l_Periodo);
    l_Dia := Self.Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', TypInfo.otSLong, l_Dia);
    l_EjercicioFin := Self.EjercicioFin;
    TROSerializer(ASerializer).WriteInteger('EjercicioFin', TypInfo.otSLong, l_EjercicioFin);
    l_PeriodoFin := Self.PeriodoFin;
    TROSerializer(ASerializer).WriteInteger('PeriodoFin', TypInfo.otSLong, l_PeriodoFin);
    l_DiaFin := Self.DiaFin;
    TROSerializer(ASerializer).WriteInteger('DiaFin', TypInfo.otSLong, l_DiaFin);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteAnsiString('Secuencia', l_Secuencia);
    l_Status := Self.Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_Agrupacion := Self.Agrupacion;
    TROSerializer(ASerializer).WriteInteger('Agrupacion', TypInfo.otSLong, l_Agrupacion);
    l_Almacen := Self.Almacen;
    TROSerializer(ASerializer).WriteInteger('Almacen', TypInfo.otSLong, l_Almacen);
    l_SecuenciaIniLiquidacion := Self.SecuenciaIniLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIniLiquidacion', TypInfo.otSLong, l_SecuenciaIniLiquidacion);
    l_SecuenciaFinLiquidacion := Self.SecuenciaFinLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFinLiquidacion', TypInfo.otSLong, l_SecuenciaFinLiquidacion);
    l_FacturasdeCompras := Self.FacturasdeCompras;
    TROSerializer(ASerializer).WriteInteger('FacturasdeCompras', TypInfo.otSLong, l_FacturasdeCompras);
    l_MontoFacturado := Self.MontoFacturado;
    TROSerializer(ASerializer).WriteDouble('MontoFacturado', TypInfo.ftDouble, l_MontoFacturado);
    l_Turno := Self.Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', TypInfo.otSLong, l_Turno);
    l_EmpleadoIni := Self.EmpleadoIni;
    TROSerializer(ASerializer).WriteInteger('EmpleadoIni', TypInfo.otSLong, l_EmpleadoIni);
    l_EmpleadoFin := Self.EmpleadoFin;
    TROSerializer(ASerializer).WriteInteger('EmpleadoFin', TypInfo.otSLong, l_EmpleadoFin);
    l_EstacionIni := Self.EstacionIni;
    TROSerializer(ASerializer).WriteInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    l_EstacionFin := Self.EstacionFin;
    TROSerializer(ASerializer).WriteInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
  end
  else begin
    l_Agrupacion := Self.Agrupacion;
    TROSerializer(ASerializer).WriteInteger('Agrupacion', TypInfo.otSLong, l_Agrupacion);
    l_Almacen := Self.Almacen;
    TROSerializer(ASerializer).WriteInteger('Almacen', TypInfo.otSLong, l_Almacen);
    l_ClienteFin := Self.ClienteFin;
    TROSerializer(ASerializer).WriteInteger('ClienteFin', TypInfo.otSLong, l_ClienteFin);
    l_ClienteIni := Self.ClienteIni;
    TROSerializer(ASerializer).WriteInteger('ClienteIni', TypInfo.otSLong, l_ClienteIni);
    l_Dia := Self.Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', TypInfo.otSLong, l_Dia);
    l_DiaFin := Self.DiaFin;
    TROSerializer(ASerializer).WriteInteger('DiaFin', TypInfo.otSLong, l_DiaFin);
    l_Ejercicio := Self.Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    l_EjercicioFin := Self.EjercicioFin;
    TROSerializer(ASerializer).WriteInteger('EjercicioFin', TypInfo.otSLong, l_EjercicioFin);
    l_EmpleadoFin := Self.EmpleadoFin;
    TROSerializer(ASerializer).WriteInteger('EmpleadoFin', TypInfo.otSLong, l_EmpleadoFin);
    l_EmpleadoIni := Self.EmpleadoIni;
    TROSerializer(ASerializer).WriteInteger('EmpleadoIni', TypInfo.otSLong, l_EmpleadoIni);
    l_Estacion := Self.Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', TypInfo.otSLong, l_Estacion);
    l_EstacionFin := Self.EstacionFin;
    TROSerializer(ASerializer).WriteInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
    l_EstacionIni := Self.EstacionIni;
    TROSerializer(ASerializer).WriteInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    l_Factura := Self.Factura;
    TROSerializer(ASerializer).WriteInteger('Factura', TypInfo.otSLong, l_Factura);
    l_FacturasdeCompras := Self.FacturasdeCompras;
    TROSerializer(ASerializer).WriteInteger('FacturasdeCompras', TypInfo.otSLong, l_FacturasdeCompras);
    l_FechaFin := Self.FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_FechaIni := Self.FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FolioFactura := Self.FolioFactura;
    TROSerializer(ASerializer).WriteInteger('FolioFactura', TypInfo.otSLong, l_FolioFactura);
    l_MontoFacturado := Self.MontoFacturado;
    TROSerializer(ASerializer).WriteDouble('MontoFacturado', TypInfo.ftDouble, l_MontoFacturado);
    l_Periodo := Self.Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', TypInfo.otSLong, l_Periodo);
    l_PeriodoFin := Self.PeriodoFin;
    TROSerializer(ASerializer).WriteInteger('PeriodoFin', TypInfo.otSLong, l_PeriodoFin);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteAnsiString('Secuencia', l_Secuencia);
    l_SecuenciaFin := Self.SecuenciaFin;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFin', TypInfo.otSLong, l_SecuenciaFin);
    l_SecuenciaFinLiquidacion := Self.SecuenciaFinLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFinLiquidacion', TypInfo.otSLong, l_SecuenciaFinLiquidacion);
    l_SecuenciaIni := Self.SecuenciaIni;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIni', TypInfo.otSLong, l_SecuenciaIni);
    l_SecuenciaIniLiquidacion := Self.SecuenciaIniLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIniLiquidacion', TypInfo.otSLong, l_SecuenciaIniLiquidacion);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Status := Self.Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_Turno := Self.Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', TypInfo.otSLong, l_Turno);
  end;
end;

{ TParametrosCollection }
constructor TParametrosCollection.Create;
begin
  inherited Create(TParametros);
end;

constructor TParametrosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TParametrosCollection.Add: TParametros;
begin
  Result := TParametros(inherited Add);
end;

function TParametrosCollection.GetItems(aIndex: Integer): TParametros;
begin
  Result := TParametros(inherited Items[aIndex]);
end;

procedure TParametrosCollection.SetItems(aIndex: Integer; const Value: TParametros);
begin
  TParametros(inherited Items[aIndex]).Assign(Value);
end;

{ TFactura }

procedure TFactura.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TFactura) then begin
    lSource := LibraryEmpresas_Intf.TFactura(iSource);

    Self.Serie := lSource.Serie;
    Self.Fecha := lSource.Fecha;
    Self.Subtotal := lSource.Subtotal;
    Self.Impuesto := lSource.Impuesto;
    Self.Total := lSource.Total;
    Self.ImpuestoPorcentaje := lSource.ImpuestoPorcentaje;
    Self.Turno := lSource.Turno;
    Self.EstacionID := lSource.EstacionID;
    Self.ClienteID := lSource.ClienteID;
    Self.FormaPagoID := lSource.FormaPagoID;
    Self.TipoFacturaID := lSource.TipoFacturaID;
    Self.FacturaID := lSource.FacturaID;
    Self.Tickets := lSource.Tickets;
    Self.UsuarioID := lSource.UsuarioID;
    Self.ISR := lSource.ISR;
    Self.IVARTN := lSource.IVARTN;
  end;
end;

procedure TFactura.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_FormaPagoID: Integer;
  l_Impuesto: Double;
  l_ImpuestoPorcentaje: Double;
  l_ISR: Double;
  l_IVARTN: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Tickets: AnsiString;
  l_TipoFacturaID: Integer;
  l_Total: Double;
  l_Turno: Integer;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Subtotal := Self.Subtotal;
    try
      TROSerializer(ASerializer).ReadDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Subtotal']));
    end;
    Self.Subtotal := l_Subtotal;
    l_Impuesto := Self.Impuesto;
    try
      TROSerializer(ASerializer).ReadDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Impuesto']));
    end;
    Self.Impuesto := l_Impuesto;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_ImpuestoPorcentaje := Self.ImpuestoPorcentaje;
    try
      TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', TypInfo.ftDouble, l_ImpuestoPorcentaje);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImpuestoPorcentaje']));
    end;
    Self.ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_Turno := Self.Turno;
    try
      TROSerializer(ASerializer).ReadInteger('Turno', TypInfo.otSLong, l_Turno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Turno']));
    end;
    Self.Turno := l_Turno;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_FormaPagoID := Self.FormaPagoID;
    try
      TROSerializer(ASerializer).ReadInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FormaPagoID']));
    end;
    Self.FormaPagoID := l_FormaPagoID;
    l_TipoFacturaID := Self.TipoFacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('TipoFacturaID', TypInfo.otSLong, l_TipoFacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoFacturaID']));
    end;
    Self.TipoFacturaID := l_TipoFacturaID;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Tickets := Self.Tickets;
    try
      TROSerializer(ASerializer).ReadAnsiString('Tickets', l_Tickets);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tickets']));
    end;
    Self.Tickets := l_Tickets;
    l_UsuarioID := Self.UsuarioID;
    try
      TROSerializer(ASerializer).ReadInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'UsuarioID']));
    end;
    Self.UsuarioID := l_UsuarioID;
    l_ISR := Self.ISR;
    try
      TROSerializer(ASerializer).ReadDouble('ISR', TypInfo.ftDouble, l_ISR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ISR']));
    end;
    Self.ISR := l_ISR;
    l_IVARTN := Self.IVARTN;
    try
      TROSerializer(ASerializer).ReadDouble('IVARTN', TypInfo.ftDouble, l_IVARTN);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IVARTN']));
    end;
    Self.IVARTN := l_IVARTN;
  end
  else begin
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_FormaPagoID := Self.FormaPagoID;
    try
      TROSerializer(ASerializer).ReadInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FormaPagoID']));
    end;
    Self.FormaPagoID := l_FormaPagoID;
    l_Impuesto := Self.Impuesto;
    try
      TROSerializer(ASerializer).ReadDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Impuesto']));
    end;
    Self.Impuesto := l_Impuesto;
    l_ImpuestoPorcentaje := Self.ImpuestoPorcentaje;
    try
      TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', TypInfo.ftDouble, l_ImpuestoPorcentaje);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImpuestoPorcentaje']));
    end;
    Self.ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_ISR := Self.ISR;
    try
      TROSerializer(ASerializer).ReadDouble('ISR', TypInfo.ftDouble, l_ISR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ISR']));
    end;
    Self.ISR := l_ISR;
    l_IVARTN := Self.IVARTN;
    try
      TROSerializer(ASerializer).ReadDouble('IVARTN', TypInfo.ftDouble, l_IVARTN);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IVARTN']));
    end;
    Self.IVARTN := l_IVARTN;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Subtotal := Self.Subtotal;
    try
      TROSerializer(ASerializer).ReadDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Subtotal']));
    end;
    Self.Subtotal := l_Subtotal;
    l_Tickets := Self.Tickets;
    try
      TROSerializer(ASerializer).ReadAnsiString('Tickets', l_Tickets);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tickets']));
    end;
    Self.Tickets := l_Tickets;
    l_TipoFacturaID := Self.TipoFacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('TipoFacturaID', TypInfo.otSLong, l_TipoFacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoFacturaID']));
    end;
    Self.TipoFacturaID := l_TipoFacturaID;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_Turno := Self.Turno;
    try
      TROSerializer(ASerializer).ReadInteger('Turno', TypInfo.otSLong, l_Turno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Turno']));
    end;
    Self.Turno := l_Turno;
    l_UsuarioID := Self.UsuarioID;
    try
      TROSerializer(ASerializer).ReadInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'UsuarioID']));
    end;
    Self.UsuarioID := l_UsuarioID;
  end;
end;

procedure TFactura.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_FormaPagoID: Integer;
  l_Impuesto: Double;
  l_ImpuestoPorcentaje: Double;
  l_ISR: Double;
  l_IVARTN: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Tickets: AnsiString;
  l_TipoFacturaID: Integer;
  l_Total: Double;
  l_Turno: Integer;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFactura);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Subtotal := Self.Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    l_Impuesto := Self.Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_ImpuestoPorcentaje := Self.ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', TypInfo.ftDouble, l_ImpuestoPorcentaje);
    l_Turno := Self.Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', TypInfo.otSLong, l_Turno);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_FormaPagoID := Self.FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    l_TipoFacturaID := Self.TipoFacturaID;
    TROSerializer(ASerializer).WriteInteger('TipoFacturaID', TypInfo.otSLong, l_TipoFacturaID);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Tickets := Self.Tickets;
    TROSerializer(ASerializer).WriteAnsiString('Tickets', l_Tickets);
    l_UsuarioID := Self.UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
    l_ISR := Self.ISR;
    TROSerializer(ASerializer).WriteDouble('ISR', TypInfo.ftDouble, l_ISR);
    l_IVARTN := Self.IVARTN;
    TROSerializer(ASerializer).WriteDouble('IVARTN', TypInfo.ftDouble, l_IVARTN);
  end
  else begin
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FormaPagoID := Self.FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    l_Impuesto := Self.Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    l_ImpuestoPorcentaje := Self.ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', TypInfo.ftDouble, l_ImpuestoPorcentaje);
    l_ISR := Self.ISR;
    TROSerializer(ASerializer).WriteDouble('ISR', TypInfo.ftDouble, l_ISR);
    l_IVARTN := Self.IVARTN;
    TROSerializer(ASerializer).WriteDouble('IVARTN', TypInfo.ftDouble, l_IVARTN);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Self.Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    l_Tickets := Self.Tickets;
    TROSerializer(ASerializer).WriteAnsiString('Tickets', l_Tickets);
    l_TipoFacturaID := Self.TipoFacturaID;
    TROSerializer(ASerializer).WriteInteger('TipoFacturaID', TypInfo.otSLong, l_TipoFacturaID);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_Turno := Self.Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', TypInfo.otSLong, l_Turno);
    l_UsuarioID := Self.UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
  end;
end;

{ TFacturaCollection }
constructor TFacturaCollection.Create;
begin
  inherited Create(TFactura);
end;

constructor TFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaCollection.Add: TFactura;
begin
  Result := TFactura(inherited Add);
end;

function TFacturaCollection.GetItems(aIndex: Integer): TFactura;
begin
  Result := TFactura(inherited Items[aIndex]);
end;

procedure TFacturaCollection.SetItems(aIndex: Integer; const Value: TFactura);
begin
  TFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleFactura }

procedure TDetalleFactura.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDetalleFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleFactura) then begin
    lSource := LibraryEmpresas_Intf.TDetalleFactura(iSource);

    Self.Cantidad := lSource.Cantidad;
    Self.Precio := lSource.Precio;
    Self.Importe := lSource.Importe;
    Self.FacturaID := lSource.FacturaID;
    Self.ProductoID := lSource.ProductoID;
    Self.Codigo := lSource.Codigo;
    Self.Descripcion := lSource.Descripcion;
  end;
end;

procedure TDetalleFactura.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Codigo: AnsiString;
  l_Descripcion: AnsiString;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_Codigo := Self.Codigo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Codigo']));
    end;
    Self.Codigo := l_Codigo;
    l_Descripcion := Self.Descripcion;
    try
      TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Descripcion']));
    end;
    Self.Descripcion := l_Descripcion;
  end
  else begin
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Codigo := Self.Codigo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Codigo']));
    end;
    Self.Codigo := l_Codigo;
    l_Descripcion := Self.Descripcion;
    try
      TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Descripcion']));
    end;
    Self.Descripcion := l_Descripcion;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
  end;
end;

procedure TDetalleFactura.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Codigo: AnsiString;
  l_Descripcion: AnsiString;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleFactura);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_Codigo := Self.Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Descripcion := Self.Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
  end
  else begin
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Codigo := Self.Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Descripcion := Self.Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
  end;
end;

{ TDetalleFacturaCollection }
constructor TDetalleFacturaCollection.Create;
begin
  inherited Create(TDetalleFactura);
end;

constructor TDetalleFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleFacturaCollection.Add: TDetalleFactura;
begin
  Result := TDetalleFactura(inherited Add);
end;

function TDetalleFacturaCollection.GetItems(aIndex: Integer): TDetalleFactura;
begin
  Result := TDetalleFactura(inherited Items[aIndex]);
end;

procedure TDetalleFacturaCollection.LoadFromArray(anArray: ATDetalleFactura);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDetalleFacturaCollection.SaveToArray(anArray: ATDetalleFactura);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDetalleFactura(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDetalleFacturaCollection.SetItems(aIndex: Integer; const Value: TDetalleFactura);
begin
  TDetalleFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TTicketFactura }

procedure TTicketFactura.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TTicketFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TTicketFactura) then begin
    lSource := LibraryEmpresas_Intf.TTicketFactura(iSource);

    Self.TicketID := lSource.TicketID;
    Self.Fecha := lSource.Fecha;
    Self.Volumen := lSource.Volumen;
    Self.Precio := lSource.Precio;
    Self.Importe := lSource.Importe;
    Self.ProductoID := lSource.ProductoID;
    Self.FacturaID := lSource.FacturaID;
    Self.EstacionID := lSource.EstacionID;
  end;
end;

procedure TTicketFactura.ReadComplex(ASerializer: TObject);
var
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_TicketID: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TicketID := Self.TicketID;
    try
      TROSerializer(ASerializer).ReadInteger('TicketID', TypInfo.otSLong, l_TicketID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TicketID']));
    end;
    Self.TicketID := l_TicketID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Volumen := Self.Volumen;
    try
      TROSerializer(ASerializer).ReadDouble('Volumen', TypInfo.ftDouble, l_Volumen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Volumen']));
    end;
    Self.Volumen := l_Volumen;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
  end
  else begin
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_TicketID := Self.TicketID;
    try
      TROSerializer(ASerializer).ReadInteger('TicketID', TypInfo.otSLong, l_TicketID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TicketID']));
    end;
    Self.TicketID := l_TicketID;
    l_Volumen := Self.Volumen;
    try
      TROSerializer(ASerializer).ReadDouble('Volumen', TypInfo.ftDouble, l_Volumen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Volumen']));
    end;
    Self.Volumen := l_Volumen;
  end;
end;

procedure TTicketFactura.WriteComplex(ASerializer: TObject);
var
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_TicketID: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTicketFactura);
    l_TicketID := Self.TicketID;
    TROSerializer(ASerializer).WriteInteger('TicketID', TypInfo.otSLong, l_TicketID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Volumen := Self.Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', TypInfo.ftDouble, l_Volumen);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
  end
  else begin
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_TicketID := Self.TicketID;
    TROSerializer(ASerializer).WriteInteger('TicketID', TypInfo.otSLong, l_TicketID);
    l_Volumen := Self.Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', TypInfo.ftDouble, l_Volumen);
  end;
end;

{ TTicketFacturaCollection }
constructor TTicketFacturaCollection.Create;
begin
  inherited Create(TTicketFactura);
end;

constructor TTicketFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTicketFacturaCollection.Add: TTicketFactura;
begin
  Result := TTicketFactura(inherited Add);
end;

function TTicketFacturaCollection.GetItems(aIndex: Integer): TTicketFactura;
begin
  Result := TTicketFactura(inherited Items[aIndex]);
end;

procedure TTicketFacturaCollection.LoadFromArray(anArray: ATTicketFactura);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TTicketFacturaCollection.SaveToArray(anArray: ATTicketFactura);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TTicketFactura(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TTicketFacturaCollection.SetItems(aIndex: Integer; const Value: TTicketFactura);
begin
  TTicketFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleCupon }

procedure TDetalleCupon.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDetalleCupon;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleCupon) then begin
    lSource := LibraryEmpresas_Intf.TDetalleCupon(iSource);

    Self.Denominacion := lSource.Denominacion;
    Self.Cantidad := lSource.Cantidad;
    Self.Referencia := lSource.Referencia;
    Self.FacturaID := lSource.FacturaID;
  end;
end;

procedure TDetalleCupon.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Denominacion: Double;
  l_FacturaID: Integer;
  l_Referencia: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Denominacion := Self.Denominacion;
    try
      TROSerializer(ASerializer).ReadDouble('Denominacion', TypInfo.ftDouble, l_Denominacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Denominacion']));
    end;
    Self.Denominacion := l_Denominacion;
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Referencia := Self.Referencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Referencia']));
    end;
    Self.Referencia := l_Referencia;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
  end
  else begin
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Denominacion := Self.Denominacion;
    try
      TROSerializer(ASerializer).ReadDouble('Denominacion', TypInfo.ftDouble, l_Denominacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Denominacion']));
    end;
    Self.Denominacion := l_Denominacion;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Referencia := Self.Referencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Referencia']));
    end;
    Self.Referencia := l_Referencia;
  end;
end;

procedure TDetalleCupon.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Denominacion: Double;
  l_FacturaID: Integer;
  l_Referencia: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleCupon);
    l_Denominacion := Self.Denominacion;
    TROSerializer(ASerializer).WriteDouble('Denominacion', TypInfo.ftDouble, l_Denominacion);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Referencia := Self.Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
  end
  else begin
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Denominacion := Self.Denominacion;
    TROSerializer(ASerializer).WriteDouble('Denominacion', TypInfo.ftDouble, l_Denominacion);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Referencia := Self.Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
  end;
end;

{ TDetalleCuponCollection }
constructor TDetalleCuponCollection.Create;
begin
  inherited Create(TDetalleCupon);
end;

constructor TDetalleCuponCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleCuponCollection.Add: TDetalleCupon;
begin
  Result := TDetalleCupon(inherited Add);
end;

function TDetalleCuponCollection.GetItems(aIndex: Integer): TDetalleCupon;
begin
  Result := TDetalleCupon(inherited Items[aIndex]);
end;

procedure TDetalleCuponCollection.LoadFromArray(anArray: ATDetalleCupon);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDetalleCuponCollection.SaveToArray(anArray: ATDetalleCupon);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDetalleCupon(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDetalleCuponCollection.SetItems(aIndex: Integer; const Value: TDetalleCupon);
begin
  TDetalleCupon(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleValeCreditoFactura }

procedure TDetalleValeCreditoFactura.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDetalleValeCreditoFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleValeCreditoFactura) then begin
    lSource := LibraryEmpresas_Intf.TDetalleValeCreditoFactura(iSource);

    Self.NoVale := lSource.NoVale;
    Self.Importe := lSource.Importe;
    Self.FacturaID := lSource.FacturaID;
    Self.CarteraValeCreditoID := lSource.CarteraValeCreditoID;
  end;
end;

procedure TDetalleValeCreditoFactura.ReadComplex(ASerializer: TObject);
var
  l_CarteraValeCreditoID: Integer;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_NoVale: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_NoVale := Self.NoVale;
    try
      TROSerializer(ASerializer).ReadInteger('NoVale', TypInfo.otSLong, l_NoVale);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoVale']));
    end;
    Self.NoVale := l_NoVale;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_CarteraValeCreditoID := Self.CarteraValeCreditoID;
    try
      TROSerializer(ASerializer).ReadInteger('CarteraValeCreditoID', TypInfo.otSLong, l_CarteraValeCreditoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CarteraValeCreditoID']));
    end;
    Self.CarteraValeCreditoID := l_CarteraValeCreditoID;
  end
  else begin
    l_CarteraValeCreditoID := Self.CarteraValeCreditoID;
    try
      TROSerializer(ASerializer).ReadInteger('CarteraValeCreditoID', TypInfo.otSLong, l_CarteraValeCreditoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CarteraValeCreditoID']));
    end;
    Self.CarteraValeCreditoID := l_CarteraValeCreditoID;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_NoVale := Self.NoVale;
    try
      TROSerializer(ASerializer).ReadInteger('NoVale', TypInfo.otSLong, l_NoVale);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoVale']));
    end;
    Self.NoVale := l_NoVale;
  end;
end;

procedure TDetalleValeCreditoFactura.WriteComplex(ASerializer: TObject);
var
  l_CarteraValeCreditoID: Integer;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_NoVale: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleValeCreditoFactura);
    l_NoVale := Self.NoVale;
    TROSerializer(ASerializer).WriteInteger('NoVale', TypInfo.otSLong, l_NoVale);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_CarteraValeCreditoID := Self.CarteraValeCreditoID;
    TROSerializer(ASerializer).WriteInteger('CarteraValeCreditoID', TypInfo.otSLong, l_CarteraValeCreditoID);
  end
  else begin
    l_CarteraValeCreditoID := Self.CarteraValeCreditoID;
    TROSerializer(ASerializer).WriteInteger('CarteraValeCreditoID', TypInfo.otSLong, l_CarteraValeCreditoID);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_NoVale := Self.NoVale;
    TROSerializer(ASerializer).WriteInteger('NoVale', TypInfo.otSLong, l_NoVale);
  end;
end;

{ TDetalleValeCreditoFacturaCollection }
constructor TDetalleValeCreditoFacturaCollection.Create;
begin
  inherited Create(TDetalleValeCreditoFactura);
end;

constructor TDetalleValeCreditoFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleValeCreditoFacturaCollection.Add: TDetalleValeCreditoFactura;
begin
  Result := TDetalleValeCreditoFactura(inherited Add);
end;

function TDetalleValeCreditoFacturaCollection.GetItems(aIndex: Integer): TDetalleValeCreditoFactura;
begin
  Result := TDetalleValeCreditoFactura(inherited Items[aIndex]);
end;

procedure TDetalleValeCreditoFacturaCollection.LoadFromArray(anArray: ATDetalleValeCreditoFactura);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDetalleValeCreditoFacturaCollection.SaveToArray(anArray: ATDetalleValeCreditoFactura);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDetalleValeCreditoFactura(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDetalleValeCreditoFacturaCollection.SetItems(aIndex: Integer; const Value: TDetalleValeCreditoFactura);
begin
  TDetalleValeCreditoFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosFactura }

procedure TDatosFactura.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDatosFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosFactura) then begin
    lSource := LibraryEmpresas_Intf.TDatosFactura(iSource);

    if System.Assigned(lSource.fFactura) then
      Self.Factura.Assign(lSource.fFactura)
    else
      SysUtils.FreeAndNil(fFactura);
    if System.Assigned(lSource.fDetalles) then
      Self.Detalles.Assign(lSource.fDetalles)
    else
      SysUtils.FreeAndNil(fDetalles);
    if System.Assigned(lSource.fTickets) then
      Self.Tickets.Assign(lSource.fTickets)
    else
      SysUtils.FreeAndNil(fTickets);
    if System.Assigned(lSource.fDetalleCupon) then
      Self.DetalleCupon.Assign(lSource.fDetalleCupon)
    else
      SysUtils.FreeAndNil(fDetalleCupon);
    if System.Assigned(lSource.fVales) then
      Self.Vales.Assign(lSource.fVales)
    else
      SysUtils.FreeAndNil(fVales);
    Self.ValesS := lSource.ValesS;
    if System.Assigned(lSource.fCliente) then
      Self.Cliente.Assign(lSource.fCliente)
    else
      SysUtils.FreeAndNil(fCliente);
  end;
end;

function TDatosFactura.GetFactura: TFactura;
begin
  if (fFactura = nil) then fFactura := TFactura.Create();
  Result := fFactura;
end;

function TDatosFactura.GetDetalles: ATDetalleFactura;
begin
  if (fDetalles = nil) then fDetalles := ATDetalleFactura.Create();
  Result := fDetalles;
end;

function TDatosFactura.GetTickets: ATTicketFactura;
begin
  if (fTickets = nil) then fTickets := ATTicketFactura.Create();
  Result := fTickets;
end;

function TDatosFactura.GetDetalleCupon: ATDetalleCupon;
begin
  if (fDetalleCupon = nil) then fDetalleCupon := ATDetalleCupon.Create();
  Result := fDetalleCupon;
end;

function TDatosFactura.GetVales: ATDetalleValeCreditoFactura;
begin
  if (fVales = nil) then fVales := ATDetalleValeCreditoFactura.Create();
  Result := fVales;
end;

function TDatosFactura.GetCliente: TDatosCliente;
begin
  if (fCliente = nil) then fCliente := TDatosCliente.Create();
  Result := fCliente;
end;

procedure TDatosFactura.ReadComplex(ASerializer: TObject);
var
  l_Cliente: TDatosCliente;
  l_DetalleCupon: ATDetalleCupon;
  l_Detalles: ATDetalleFactura;
  l_Factura: TFactura;
  l_Tickets: ATTicketFactura;
  l_Vales: ATDetalleValeCreditoFactura;
  l_ValesS: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Factura := int_Factura;
    try
      TROSerializer(ASerializer).ReadStruct('Factura', TFactura, l_Factura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Factura']));
    end;
    if int_Factura <> l_Factura then Self.Factura.Free;
    Self.Factura := l_Factura;
    l_Detalles := int_Detalles;
    try
      TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleFactura, l_Detalles);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalles']));
    end;
    if int_Detalles <> l_Detalles then Self.Detalles.Free;
    Self.Detalles := l_Detalles;
    l_Tickets := int_Tickets;
    try
      TROSerializer(ASerializer).ReadArray('Tickets', ATTicketFactura, l_Tickets);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tickets']));
    end;
    if int_Tickets <> l_Tickets then Self.Tickets.Free;
    Self.Tickets := l_Tickets;
    l_DetalleCupon := int_DetalleCupon;
    try
      TROSerializer(ASerializer).ReadArray('DetalleCupon', ATDetalleCupon, l_DetalleCupon);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleCupon']));
    end;
    if int_DetalleCupon <> l_DetalleCupon then Self.DetalleCupon.Free;
    Self.DetalleCupon := l_DetalleCupon;
    l_Vales := int_Vales;
    try
      TROSerializer(ASerializer).ReadArray('Vales', ATDetalleValeCreditoFactura, l_Vales);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Vales']));
    end;
    if int_Vales <> l_Vales then Self.Vales.Free;
    Self.Vales := l_Vales;
    l_ValesS := Self.ValesS;
    try
      TROSerializer(ASerializer).ReadAnsiString('ValesS', l_ValesS);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ValesS']));
    end;
    Self.ValesS := l_ValesS;
    l_Cliente := int_Cliente;
    try
      TROSerializer(ASerializer).ReadStruct('Cliente', TDatosCliente, l_Cliente);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cliente']));
    end;
    if int_Cliente <> l_Cliente then Self.Cliente.Free;
    Self.Cliente := l_Cliente;
  end
  else begin
    l_Cliente := int_Cliente;
    try
      TROSerializer(ASerializer).ReadStruct('Cliente', TDatosCliente, l_Cliente);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cliente']));
    end;
    if int_Cliente <> l_Cliente then Cliente.Free;
    Self.Cliente := l_Cliente;
    l_DetalleCupon := int_DetalleCupon;
    try
      TROSerializer(ASerializer).ReadArray('DetalleCupon', ATDetalleCupon, l_DetalleCupon);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleCupon']));
    end;
    if int_DetalleCupon <> l_DetalleCupon then DetalleCupon.Free;
    Self.DetalleCupon := l_DetalleCupon;
    l_Detalles := int_Detalles;
    try
      TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleFactura, l_Detalles);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalles']));
    end;
    if int_Detalles <> l_Detalles then Detalles.Free;
    Self.Detalles := l_Detalles;
    l_Factura := int_Factura;
    try
      TROSerializer(ASerializer).ReadStruct('Factura', TFactura, l_Factura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Factura']));
    end;
    if int_Factura <> l_Factura then Factura.Free;
    Self.Factura := l_Factura;
    l_Tickets := int_Tickets;
    try
      TROSerializer(ASerializer).ReadArray('Tickets', ATTicketFactura, l_Tickets);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tickets']));
    end;
    if int_Tickets <> l_Tickets then Tickets.Free;
    Self.Tickets := l_Tickets;
    l_Vales := int_Vales;
    try
      TROSerializer(ASerializer).ReadArray('Vales', ATDetalleValeCreditoFactura, l_Vales);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Vales']));
    end;
    if int_Vales <> l_Vales then Vales.Free;
    Self.Vales := l_Vales;
    l_ValesS := Self.ValesS;
    try
      TROSerializer(ASerializer).ReadAnsiString('ValesS', l_ValesS);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ValesS']));
    end;
    Self.ValesS := l_ValesS;
  end;
end;

procedure TDatosFactura.WriteComplex(ASerializer: TObject);
var
  l_Cliente: TDatosCliente;
  l_DetalleCupon: ATDetalleCupon;
  l_Detalles: ATDetalleFactura;
  l_Factura: TFactura;
  l_Tickets: ATTicketFactura;
  l_Vales: ATDetalleValeCreditoFactura;
  l_ValesS: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosFactura);
    l_Factura := int_Factura;
    TROSerializer(ASerializer).WriteStruct('Factura', l_Factura, TFactura);
    l_Detalles := int_Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleFactura);
    l_Tickets := int_Tickets;
    TROSerializer(ASerializer).WriteArray('Tickets', l_Tickets, ATTicketFactura);
    l_DetalleCupon := int_DetalleCupon;
    TROSerializer(ASerializer).WriteArray('DetalleCupon', l_DetalleCupon, ATDetalleCupon);
    l_Vales := int_Vales;
    TROSerializer(ASerializer).WriteArray('Vales', l_Vales, ATDetalleValeCreditoFactura);
    l_ValesS := Self.ValesS;
    TROSerializer(ASerializer).WriteAnsiString('ValesS', l_ValesS);
    l_Cliente := int_Cliente;
    TROSerializer(ASerializer).WriteStruct('Cliente', l_Cliente, TDatosCliente);
  end
  else begin
    l_Cliente := int_Cliente;
    TROSerializer(ASerializer).WriteStruct('Cliente', l_Cliente, TDatosCliente);
    l_DetalleCupon := int_DetalleCupon;
    TROSerializer(ASerializer).WriteArray('DetalleCupon', l_DetalleCupon, ATDetalleCupon);
    l_Detalles := int_Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleFactura);
    l_Factura := int_Factura;
    TROSerializer(ASerializer).WriteStruct('Factura', l_Factura, TFactura);
    l_Tickets := int_Tickets;
    TROSerializer(ASerializer).WriteArray('Tickets', l_Tickets, ATTicketFactura);
    l_Vales := int_Vales;
    TROSerializer(ASerializer).WriteArray('Vales', l_Vales, ATDetalleValeCreditoFactura);
    l_ValesS := Self.ValesS;
    TROSerializer(ASerializer).WriteAnsiString('ValesS', l_ValesS);
  end;
end;

{ TDatosFacturaCollection }
constructor TDatosFacturaCollection.Create;
begin
  inherited Create(TDatosFactura);
end;

constructor TDatosFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosFacturaCollection.Add: TDatosFactura;
begin
  Result := TDatosFactura(inherited Add);
end;

function TDatosFacturaCollection.GetItems(aIndex: Integer): TDatosFactura;
begin
  Result := TDatosFactura(inherited Items[aIndex]);
end;

procedure TDatosFacturaCollection.SetItems(aIndex: Integer; const Value: TDatosFactura);
begin
  TDatosFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TLiquidacion }

procedure TLiquidacion.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TLiquidacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TLiquidacion) then begin
    lSource := LibraryEmpresas_Intf.TLiquidacion(iSource);

    Self.LiquidacionID := lSource.LiquidacionID;
    Self.Fecha := lSource.Fecha;
    Self.VentasTotales := lSource.VentasTotales;
    Self.Anticipos := lSource.Anticipos;
    Self.Diferencias := lSource.Diferencias;
    Self.Secuencia := lSource.Secuencia;
    Self.EstacionID := lSource.EstacionID;
    Self.DespachadorID := lSource.DespachadorID;
    Self.AgrupacionID := lSource.AgrupacionID;
  end;
end;

procedure TLiquidacion.ReadComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_Anticipos: Double;
  l_DespachadorID: Integer;
  l_Diferencias: Double;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_LiquidacionID: Integer;
  l_Secuencia: Integer;
  l_VentasTotales: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_LiquidacionID := Self.LiquidacionID;
    try
      TROSerializer(ASerializer).ReadInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionID']));
    end;
    Self.LiquidacionID := l_LiquidacionID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_VentasTotales := Self.VentasTotales;
    try
      TROSerializer(ASerializer).ReadDouble('VentasTotales', TypInfo.ftDouble, l_VentasTotales);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'VentasTotales']));
    end;
    Self.VentasTotales := l_VentasTotales;
    l_Anticipos := Self.Anticipos;
    try
      TROSerializer(ASerializer).ReadDouble('Anticipos', TypInfo.ftDouble, l_Anticipos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Anticipos']));
    end;
    Self.Anticipos := l_Anticipos;
    l_Diferencias := Self.Diferencias;
    try
      TROSerializer(ASerializer).ReadDouble('Diferencias', TypInfo.ftDouble, l_Diferencias);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Diferencias']));
    end;
    Self.Diferencias := l_Diferencias;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_DespachadorID := Self.DespachadorID;
    try
      TROSerializer(ASerializer).ReadInteger('DespachadorID', TypInfo.otSLong, l_DespachadorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DespachadorID']));
    end;
    Self.DespachadorID := l_DespachadorID;
    l_AgrupacionID := Self.AgrupacionID;
    try
      TROSerializer(ASerializer).ReadInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AgrupacionID']));
    end;
    Self.AgrupacionID := l_AgrupacionID;
  end
  else begin
    l_AgrupacionID := Self.AgrupacionID;
    try
      TROSerializer(ASerializer).ReadInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AgrupacionID']));
    end;
    Self.AgrupacionID := l_AgrupacionID;
    l_Anticipos := Self.Anticipos;
    try
      TROSerializer(ASerializer).ReadDouble('Anticipos', TypInfo.ftDouble, l_Anticipos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Anticipos']));
    end;
    Self.Anticipos := l_Anticipos;
    l_DespachadorID := Self.DespachadorID;
    try
      TROSerializer(ASerializer).ReadInteger('DespachadorID', TypInfo.otSLong, l_DespachadorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DespachadorID']));
    end;
    Self.DespachadorID := l_DespachadorID;
    l_Diferencias := Self.Diferencias;
    try
      TROSerializer(ASerializer).ReadDouble('Diferencias', TypInfo.ftDouble, l_Diferencias);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Diferencias']));
    end;
    Self.Diferencias := l_Diferencias;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_LiquidacionID := Self.LiquidacionID;
    try
      TROSerializer(ASerializer).ReadInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionID']));
    end;
    Self.LiquidacionID := l_LiquidacionID;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_VentasTotales := Self.VentasTotales;
    try
      TROSerializer(ASerializer).ReadDouble('VentasTotales', TypInfo.ftDouble, l_VentasTotales);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'VentasTotales']));
    end;
    Self.VentasTotales := l_VentasTotales;
  end;
end;

procedure TLiquidacion.WriteComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_Anticipos: Double;
  l_DespachadorID: Integer;
  l_Diferencias: Double;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_LiquidacionID: Integer;
  l_Secuencia: Integer;
  l_VentasTotales: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLiquidacion);
    l_LiquidacionID := Self.LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_VentasTotales := Self.VentasTotales;
    TROSerializer(ASerializer).WriteDouble('VentasTotales', TypInfo.ftDouble, l_VentasTotales);
    l_Anticipos := Self.Anticipos;
    TROSerializer(ASerializer).WriteDouble('Anticipos', TypInfo.ftDouble, l_Anticipos);
    l_Diferencias := Self.Diferencias;
    TROSerializer(ASerializer).WriteDouble('Diferencias', TypInfo.ftDouble, l_Diferencias);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_DespachadorID := Self.DespachadorID;
    TROSerializer(ASerializer).WriteInteger('DespachadorID', TypInfo.otSLong, l_DespachadorID);
    l_AgrupacionID := Self.AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
  end
  else begin
    l_AgrupacionID := Self.AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
    l_Anticipos := Self.Anticipos;
    TROSerializer(ASerializer).WriteDouble('Anticipos', TypInfo.ftDouble, l_Anticipos);
    l_DespachadorID := Self.DespachadorID;
    TROSerializer(ASerializer).WriteInteger('DespachadorID', TypInfo.otSLong, l_DespachadorID);
    l_Diferencias := Self.Diferencias;
    TROSerializer(ASerializer).WriteDouble('Diferencias', TypInfo.ftDouble, l_Diferencias);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_LiquidacionID := Self.LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    l_VentasTotales := Self.VentasTotales;
    TROSerializer(ASerializer).WriteDouble('VentasTotales', TypInfo.ftDouble, l_VentasTotales);
  end;
end;

{ TLiquidacionCollection }
constructor TLiquidacionCollection.Create;
begin
  inherited Create(TLiquidacion);
end;

constructor TLiquidacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLiquidacionCollection.Add: TLiquidacion;
begin
  Result := TLiquidacion(inherited Add);
end;

function TLiquidacionCollection.GetItems(aIndex: Integer): TLiquidacion;
begin
  Result := TLiquidacion(inherited Items[aIndex]);
end;

procedure TLiquidacionCollection.SetItems(aIndex: Integer; const Value: TLiquidacion);
begin
  TLiquidacion(inherited Items[aIndex]).Assign(Value);
end;

{ TLiquidacionDetalle }

procedure TLiquidacionDetalle.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TLiquidacionDetalle;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TLiquidacionDetalle) then begin
    lSource := LibraryEmpresas_Intf.TLiquidacionDetalle(iSource);

    Self.LiquidacionDetalleID := lSource.LiquidacionDetalleID;
    Self.Importe := lSource.Importe;
    Self.Secuencia := lSource.Secuencia;
    Self.Referencia := lSource.Referencia;
    Self.Ticket := lSource.Ticket;
    Self.Cupon := lSource.Cupon;
    Self.LiquidacionID := lSource.LiquidacionID;
    Self.TipoValorID := lSource.TipoValorID;
    Self.BancoID := lSource.BancoID;
    Self.SalidaID := lSource.SalidaID;
    Self.ClienteID := lSource.ClienteID;
  end;
end;

procedure TLiquidacionDetalle.ReadComplex(ASerializer: TObject);
var
  l_BancoID: Integer;
  l_ClienteID: Integer;
  l_Cupon: AnsiString;
  l_Importe: Double;
  l_LiquidacionDetalleID: Integer;
  l_LiquidacionID: Integer;
  l_Referencia: AnsiString;
  l_SalidaID: Integer;
  l_Secuencia: Integer;
  l_Ticket: Integer;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_LiquidacionDetalleID := Self.LiquidacionDetalleID;
    try
      TROSerializer(ASerializer).ReadInteger('LiquidacionDetalleID', TypInfo.otSLong, l_LiquidacionDetalleID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionDetalleID']));
    end;
    Self.LiquidacionDetalleID := l_LiquidacionDetalleID;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_Referencia := Self.Referencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Referencia']));
    end;
    Self.Referencia := l_Referencia;
    l_Ticket := Self.Ticket;
    try
      TROSerializer(ASerializer).ReadInteger('Ticket', TypInfo.otSLong, l_Ticket);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ticket']));
    end;
    Self.Ticket := l_Ticket;
    l_Cupon := Self.Cupon;
    try
      TROSerializer(ASerializer).ReadAnsiString('Cupon', l_Cupon);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cupon']));
    end;
    Self.Cupon := l_Cupon;
    l_LiquidacionID := Self.LiquidacionID;
    try
      TROSerializer(ASerializer).ReadInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionID']));
    end;
    Self.LiquidacionID := l_LiquidacionID;
    l_TipoValorID := Self.TipoValorID;
    try
      TROSerializer(ASerializer).ReadInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoValorID']));
    end;
    Self.TipoValorID := l_TipoValorID;
    l_BancoID := Self.BancoID;
    try
      TROSerializer(ASerializer).ReadInteger('BancoID', TypInfo.otSLong, l_BancoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'BancoID']));
    end;
    Self.BancoID := l_BancoID;
    l_SalidaID := Self.SalidaID;
    try
      TROSerializer(ASerializer).ReadInteger('SalidaID', TypInfo.otSLong, l_SalidaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SalidaID']));
    end;
    Self.SalidaID := l_SalidaID;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
  end
  else begin
    l_BancoID := Self.BancoID;
    try
      TROSerializer(ASerializer).ReadInteger('BancoID', TypInfo.otSLong, l_BancoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'BancoID']));
    end;
    Self.BancoID := l_BancoID;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_Cupon := Self.Cupon;
    try
      TROSerializer(ASerializer).ReadAnsiString('Cupon', l_Cupon);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cupon']));
    end;
    Self.Cupon := l_Cupon;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_LiquidacionDetalleID := Self.LiquidacionDetalleID;
    try
      TROSerializer(ASerializer).ReadInteger('LiquidacionDetalleID', TypInfo.otSLong, l_LiquidacionDetalleID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionDetalleID']));
    end;
    Self.LiquidacionDetalleID := l_LiquidacionDetalleID;
    l_LiquidacionID := Self.LiquidacionID;
    try
      TROSerializer(ASerializer).ReadInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionID']));
    end;
    Self.LiquidacionID := l_LiquidacionID;
    l_Referencia := Self.Referencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Referencia']));
    end;
    Self.Referencia := l_Referencia;
    l_SalidaID := Self.SalidaID;
    try
      TROSerializer(ASerializer).ReadInteger('SalidaID', TypInfo.otSLong, l_SalidaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SalidaID']));
    end;
    Self.SalidaID := l_SalidaID;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_Ticket := Self.Ticket;
    try
      TROSerializer(ASerializer).ReadInteger('Ticket', TypInfo.otSLong, l_Ticket);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ticket']));
    end;
    Self.Ticket := l_Ticket;
    l_TipoValorID := Self.TipoValorID;
    try
      TROSerializer(ASerializer).ReadInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoValorID']));
    end;
    Self.TipoValorID := l_TipoValorID;
  end;
end;

procedure TLiquidacionDetalle.WriteComplex(ASerializer: TObject);
var
  l_BancoID: Integer;
  l_ClienteID: Integer;
  l_Cupon: AnsiString;
  l_Importe: Double;
  l_LiquidacionDetalleID: Integer;
  l_LiquidacionID: Integer;
  l_Referencia: AnsiString;
  l_SalidaID: Integer;
  l_Secuencia: Integer;
  l_Ticket: Integer;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLiquidacionDetalle);
    l_LiquidacionDetalleID := Self.LiquidacionDetalleID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionDetalleID', TypInfo.otSLong, l_LiquidacionDetalleID);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    l_Referencia := Self.Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Ticket := Self.Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', TypInfo.otSLong, l_Ticket);
    l_Cupon := Self.Cupon;
    TROSerializer(ASerializer).WriteAnsiString('Cupon', l_Cupon);
    l_LiquidacionID := Self.LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    l_TipoValorID := Self.TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
    l_BancoID := Self.BancoID;
    TROSerializer(ASerializer).WriteInteger('BancoID', TypInfo.otSLong, l_BancoID);
    l_SalidaID := Self.SalidaID;
    TROSerializer(ASerializer).WriteInteger('SalidaID', TypInfo.otSLong, l_SalidaID);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
  end
  else begin
    l_BancoID := Self.BancoID;
    TROSerializer(ASerializer).WriteInteger('BancoID', TypInfo.otSLong, l_BancoID);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_Cupon := Self.Cupon;
    TROSerializer(ASerializer).WriteAnsiString('Cupon', l_Cupon);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_LiquidacionDetalleID := Self.LiquidacionDetalleID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionDetalleID', TypInfo.otSLong, l_LiquidacionDetalleID);
    l_LiquidacionID := Self.LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    l_Referencia := Self.Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_SalidaID := Self.SalidaID;
    TROSerializer(ASerializer).WriteInteger('SalidaID', TypInfo.otSLong, l_SalidaID);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    l_Ticket := Self.Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', TypInfo.otSLong, l_Ticket);
    l_TipoValorID := Self.TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
  end;
end;

{ TLiquidacionDetalleCollection }
constructor TLiquidacionDetalleCollection.Create;
begin
  inherited Create(TLiquidacionDetalle);
end;

constructor TLiquidacionDetalleCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLiquidacionDetalleCollection.Add: TLiquidacionDetalle;
begin
  Result := TLiquidacionDetalle(inherited Add);
end;

function TLiquidacionDetalleCollection.GetItems(aIndex: Integer): TLiquidacionDetalle;
begin
  Result := TLiquidacionDetalle(inherited Items[aIndex]);
end;

procedure TLiquidacionDetalleCollection.LoadFromArray(anArray: ATLiquidacionDetalle);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TLiquidacionDetalleCollection.SaveToArray(anArray: ATLiquidacionDetalle);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TLiquidacionDetalle(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TLiquidacionDetalleCollection.SetItems(aIndex: Integer; const Value: TLiquidacionDetalle);
begin
  TLiquidacionDetalle(inherited Items[aIndex]).Assign(Value);
end;

{ TLiquidacionProducto }

procedure TLiquidacionProducto.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TLiquidacionProducto;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TLiquidacionProducto) then begin
    lSource := LibraryEmpresas_Intf.TLiquidacionProducto(iSource);

    Self.PrecioVenta := lSource.PrecioVenta;
    Self.InventarioInicial := lSource.InventarioInicial;
    Self.InventarioFinal := lSource.InventarioFinal;
    Self.Cantidad := lSource.Cantidad;
    Self.Importe := lSource.Importe;
    Self.Secuencia := lSource.Secuencia;
    Self.Traspasos := lSource.Traspasos;
    Self.ProductoID := lSource.ProductoID;
    Self.BombaID := lSource.BombaID;
    Self.Costo := lSource.Costo;
  end;
end;

procedure TLiquidacionProducto.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_Cantidad: Double;
  l_Costo: Double;
  l_Importe: Double;
  l_InventarioFinal: Double;
  l_InventarioInicial: Double;
  l_PrecioVenta: Double;
  l_ProductoID: Integer;
  l_Secuencia: Integer;
  l_Traspasos: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_PrecioVenta := Self.PrecioVenta;
    try
      TROSerializer(ASerializer).ReadDouble('PrecioVenta', TypInfo.ftDouble, l_PrecioVenta);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PrecioVenta']));
    end;
    Self.PrecioVenta := l_PrecioVenta;
    l_InventarioInicial := Self.InventarioInicial;
    try
      TROSerializer(ASerializer).ReadDouble('InventarioInicial', TypInfo.ftDouble, l_InventarioInicial);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'InventarioInicial']));
    end;
    Self.InventarioInicial := l_InventarioInicial;
    l_InventarioFinal := Self.InventarioFinal;
    try
      TROSerializer(ASerializer).ReadDouble('InventarioFinal', TypInfo.ftDouble, l_InventarioFinal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'InventarioFinal']));
    end;
    Self.InventarioFinal := l_InventarioFinal;
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_Traspasos := Self.Traspasos;
    try
      TROSerializer(ASerializer).ReadDouble('Traspasos', TypInfo.ftDouble, l_Traspasos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Traspasos']));
    end;
    Self.Traspasos := l_Traspasos;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_BombaID := Self.BombaID;
    try
      TROSerializer(ASerializer).ReadInteger('BombaID', TypInfo.otSLong, l_BombaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'BombaID']));
    end;
    Self.BombaID := l_BombaID;
    l_Costo := Self.Costo;
    try
      TROSerializer(ASerializer).ReadDouble('Costo', TypInfo.ftDouble, l_Costo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Costo']));
    end;
    Self.Costo := l_Costo;
  end
  else begin
    l_BombaID := Self.BombaID;
    try
      TROSerializer(ASerializer).ReadInteger('BombaID', TypInfo.otSLong, l_BombaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'BombaID']));
    end;
    Self.BombaID := l_BombaID;
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Costo := Self.Costo;
    try
      TROSerializer(ASerializer).ReadDouble('Costo', TypInfo.ftDouble, l_Costo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Costo']));
    end;
    Self.Costo := l_Costo;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_InventarioFinal := Self.InventarioFinal;
    try
      TROSerializer(ASerializer).ReadDouble('InventarioFinal', TypInfo.ftDouble, l_InventarioFinal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'InventarioFinal']));
    end;
    Self.InventarioFinal := l_InventarioFinal;
    l_InventarioInicial := Self.InventarioInicial;
    try
      TROSerializer(ASerializer).ReadDouble('InventarioInicial', TypInfo.ftDouble, l_InventarioInicial);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'InventarioInicial']));
    end;
    Self.InventarioInicial := l_InventarioInicial;
    l_PrecioVenta := Self.PrecioVenta;
    try
      TROSerializer(ASerializer).ReadDouble('PrecioVenta', TypInfo.ftDouble, l_PrecioVenta);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PrecioVenta']));
    end;
    Self.PrecioVenta := l_PrecioVenta;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_Traspasos := Self.Traspasos;
    try
      TROSerializer(ASerializer).ReadDouble('Traspasos', TypInfo.ftDouble, l_Traspasos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Traspasos']));
    end;
    Self.Traspasos := l_Traspasos;
  end;
end;

procedure TLiquidacionProducto.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_Cantidad: Double;
  l_Costo: Double;
  l_Importe: Double;
  l_InventarioFinal: Double;
  l_InventarioInicial: Double;
  l_PrecioVenta: Double;
  l_ProductoID: Integer;
  l_Secuencia: Integer;
  l_Traspasos: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLiquidacionProducto);
    l_PrecioVenta := Self.PrecioVenta;
    TROSerializer(ASerializer).WriteDouble('PrecioVenta', TypInfo.ftDouble, l_PrecioVenta);
    l_InventarioInicial := Self.InventarioInicial;
    TROSerializer(ASerializer).WriteDouble('InventarioInicial', TypInfo.ftDouble, l_InventarioInicial);
    l_InventarioFinal := Self.InventarioFinal;
    TROSerializer(ASerializer).WriteDouble('InventarioFinal', TypInfo.ftDouble, l_InventarioFinal);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    l_Traspasos := Self.Traspasos;
    TROSerializer(ASerializer).WriteDouble('Traspasos', TypInfo.ftDouble, l_Traspasos);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_BombaID := Self.BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', TypInfo.otSLong, l_BombaID);
    l_Costo := Self.Costo;
    TROSerializer(ASerializer).WriteDouble('Costo', TypInfo.ftDouble, l_Costo);
  end
  else begin
    l_BombaID := Self.BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', TypInfo.otSLong, l_BombaID);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Costo := Self.Costo;
    TROSerializer(ASerializer).WriteDouble('Costo', TypInfo.ftDouble, l_Costo);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_InventarioFinal := Self.InventarioFinal;
    TROSerializer(ASerializer).WriteDouble('InventarioFinal', TypInfo.ftDouble, l_InventarioFinal);
    l_InventarioInicial := Self.InventarioInicial;
    TROSerializer(ASerializer).WriteDouble('InventarioInicial', TypInfo.ftDouble, l_InventarioInicial);
    l_PrecioVenta := Self.PrecioVenta;
    TROSerializer(ASerializer).WriteDouble('PrecioVenta', TypInfo.ftDouble, l_PrecioVenta);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    l_Traspasos := Self.Traspasos;
    TROSerializer(ASerializer).WriteDouble('Traspasos', TypInfo.ftDouble, l_Traspasos);
  end;
end;

{ TLiquidacionProductoCollection }
constructor TLiquidacionProductoCollection.Create;
begin
  inherited Create(TLiquidacionProducto);
end;

constructor TLiquidacionProductoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLiquidacionProductoCollection.Add: TLiquidacionProducto;
begin
  Result := TLiquidacionProducto(inherited Add);
end;

function TLiquidacionProductoCollection.GetItems(aIndex: Integer): TLiquidacionProducto;
begin
  Result := TLiquidacionProducto(inherited Items[aIndex]);
end;

procedure TLiquidacionProductoCollection.LoadFromArray(anArray: ATLiquidacionProducto);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TLiquidacionProductoCollection.SaveToArray(anArray: ATLiquidacionProducto);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TLiquidacionProducto(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TLiquidacionProductoCollection.SetItems(aIndex: Integer; const Value: TLiquidacionProducto);
begin
  TLiquidacionProducto(inherited Items[aIndex]).Assign(Value);
end;

{ TTransaccion }

procedure TTransaccion.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TTransaccion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TTransaccion) then begin
    lSource := LibraryEmpresas_Intf.TTransaccion(iSource);

    Self.TransaccionID := lSource.TransaccionID;
    Self.Folio := lSource.Folio;
    Self.Tipo := lSource.Tipo;
    Self.Credito := lSource.Credito;
    Self.Referencia := lSource.Referencia;
    Self.Fecha := lSource.Fecha;
    Self.Total := lSource.Total;
    Self.Subtotal := lSource.Subtotal;
    Self.Impuesto := lSource.Impuesto;
    Self.Plazo := lSource.Plazo;
    Self.Secuencia := lSource.Secuencia;
    Self.EstacionDestinoID := lSource.EstacionDestinoID;
    Self.AlmacenDestinoID := lSource.AlmacenDestinoID;
    Self.EstacionID := lSource.EstacionID;
    Self.ProveedorId := lSource.ProveedorId;
    Self.AlmacenID := lSource.AlmacenID;
    Self.MovimientoAlmacen := lSource.MovimientoAlmacen;
  end;
end;

procedure TTransaccion.ReadComplex(ASerializer: TObject);
var
  l_AlmacenDestinoID: Integer;
  l_AlmacenID: Integer;
  l_Credito: Boolean;
  l_EstacionDestinoID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Impuesto: Double;
  l_MovimientoAlmacen: Integer;
  l_Plazo: Integer;
  l_ProveedorId: Integer;
  l_Referencia: AnsiString;
  l_Secuencia: Integer;
  l_Subtotal: Double;
  l_Tipo: AnsiString;
  l_Total: Double;
  l_TransaccionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TransaccionID := Self.TransaccionID;
    try
      TROSerializer(ASerializer).ReadInteger('TransaccionID', TypInfo.otSLong, l_TransaccionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TransaccionID']));
    end;
    Self.TransaccionID := l_TransaccionID;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadInteger('Folio', TypInfo.otSLong, l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_Tipo := Self.Tipo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Tipo', l_Tipo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tipo']));
    end;
    Self.Tipo := l_Tipo;
    l_Credito := Self.Credito;
    try
      TROSerializer(ASerializer).ReadEnumerated('Credito',System.TypeInfo(boolean), l_Credito);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Credito']));
    end;
    Self.Credito := l_Credito;
    l_Referencia := Self.Referencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Referencia']));
    end;
    Self.Referencia := l_Referencia;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_Subtotal := Self.Subtotal;
    try
      TROSerializer(ASerializer).ReadDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Subtotal']));
    end;
    Self.Subtotal := l_Subtotal;
    l_Impuesto := Self.Impuesto;
    try
      TROSerializer(ASerializer).ReadDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Impuesto']));
    end;
    Self.Impuesto := l_Impuesto;
    l_Plazo := Self.Plazo;
    try
      TROSerializer(ASerializer).ReadInteger('Plazo', TypInfo.otSLong, l_Plazo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Plazo']));
    end;
    Self.Plazo := l_Plazo;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_EstacionDestinoID := Self.EstacionDestinoID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionDestinoID', TypInfo.otSLong, l_EstacionDestinoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionDestinoID']));
    end;
    Self.EstacionDestinoID := l_EstacionDestinoID;
    l_AlmacenDestinoID := Self.AlmacenDestinoID;
    try
      TROSerializer(ASerializer).ReadInteger('AlmacenDestinoID', TypInfo.otSLong, l_AlmacenDestinoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AlmacenDestinoID']));
    end;
    Self.AlmacenDestinoID := l_AlmacenDestinoID;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_ProveedorId := Self.ProveedorId;
    try
      TROSerializer(ASerializer).ReadInteger('ProveedorId', TypInfo.otSLong, l_ProveedorId);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProveedorId']));
    end;
    Self.ProveedorId := l_ProveedorId;
    l_AlmacenID := Self.AlmacenID;
    try
      TROSerializer(ASerializer).ReadInteger('AlmacenID', TypInfo.otSLong, l_AlmacenID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AlmacenID']));
    end;
    Self.AlmacenID := l_AlmacenID;
    l_MovimientoAlmacen := Self.MovimientoAlmacen;
    try
      TROSerializer(ASerializer).ReadInteger('MovimientoAlmacen', TypInfo.otSLong, l_MovimientoAlmacen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MovimientoAlmacen']));
    end;
    Self.MovimientoAlmacen := l_MovimientoAlmacen;
  end
  else begin
    l_AlmacenDestinoID := Self.AlmacenDestinoID;
    try
      TROSerializer(ASerializer).ReadInteger('AlmacenDestinoID', TypInfo.otSLong, l_AlmacenDestinoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AlmacenDestinoID']));
    end;
    Self.AlmacenDestinoID := l_AlmacenDestinoID;
    l_AlmacenID := Self.AlmacenID;
    try
      TROSerializer(ASerializer).ReadInteger('AlmacenID', TypInfo.otSLong, l_AlmacenID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AlmacenID']));
    end;
    Self.AlmacenID := l_AlmacenID;
    l_Credito := Self.Credito;
    try
      TROSerializer(ASerializer).ReadEnumerated('Credito',System.TypeInfo(boolean), l_Credito);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Credito']));
    end;
    Self.Credito := l_Credito;
    l_EstacionDestinoID := Self.EstacionDestinoID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionDestinoID', TypInfo.otSLong, l_EstacionDestinoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionDestinoID']));
    end;
    Self.EstacionDestinoID := l_EstacionDestinoID;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadInteger('Folio', TypInfo.otSLong, l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_Impuesto := Self.Impuesto;
    try
      TROSerializer(ASerializer).ReadDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Impuesto']));
    end;
    Self.Impuesto := l_Impuesto;
    l_MovimientoAlmacen := Self.MovimientoAlmacen;
    try
      TROSerializer(ASerializer).ReadInteger('MovimientoAlmacen', TypInfo.otSLong, l_MovimientoAlmacen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MovimientoAlmacen']));
    end;
    Self.MovimientoAlmacen := l_MovimientoAlmacen;
    l_Plazo := Self.Plazo;
    try
      TROSerializer(ASerializer).ReadInteger('Plazo', TypInfo.otSLong, l_Plazo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Plazo']));
    end;
    Self.Plazo := l_Plazo;
    l_ProveedorId := Self.ProveedorId;
    try
      TROSerializer(ASerializer).ReadInteger('ProveedorId', TypInfo.otSLong, l_ProveedorId);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProveedorId']));
    end;
    Self.ProveedorId := l_ProveedorId;
    l_Referencia := Self.Referencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Referencia']));
    end;
    Self.Referencia := l_Referencia;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_Subtotal := Self.Subtotal;
    try
      TROSerializer(ASerializer).ReadDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Subtotal']));
    end;
    Self.Subtotal := l_Subtotal;
    l_Tipo := Self.Tipo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Tipo', l_Tipo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tipo']));
    end;
    Self.Tipo := l_Tipo;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_TransaccionID := Self.TransaccionID;
    try
      TROSerializer(ASerializer).ReadInteger('TransaccionID', TypInfo.otSLong, l_TransaccionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TransaccionID']));
    end;
    Self.TransaccionID := l_TransaccionID;
  end;
end;

procedure TTransaccion.WriteComplex(ASerializer: TObject);
var
  l_AlmacenDestinoID: Integer;
  l_AlmacenID: Integer;
  l_Credito: Boolean;
  l_EstacionDestinoID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Impuesto: Double;
  l_MovimientoAlmacen: Integer;
  l_Plazo: Integer;
  l_ProveedorId: Integer;
  l_Referencia: AnsiString;
  l_Secuencia: Integer;
  l_Subtotal: Double;
  l_Tipo: AnsiString;
  l_Total: Double;
  l_TransaccionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTransaccion);
    l_TransaccionID := Self.TransaccionID;
    TROSerializer(ASerializer).WriteInteger('TransaccionID', TypInfo.otSLong, l_TransaccionID);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', TypInfo.otSLong, l_Folio);
    l_Tipo := Self.Tipo;
    TROSerializer(ASerializer).WriteAnsiString('Tipo', l_Tipo);
    l_Credito := Self.Credito;
    TROSerializer(ASerializer).WriteEnumerated('Credito',System.TypeInfo(boolean), l_Credito);
    l_Referencia := Self.Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_Subtotal := Self.Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    l_Impuesto := Self.Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    l_Plazo := Self.Plazo;
    TROSerializer(ASerializer).WriteInteger('Plazo', TypInfo.otSLong, l_Plazo);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    l_EstacionDestinoID := Self.EstacionDestinoID;
    TROSerializer(ASerializer).WriteInteger('EstacionDestinoID', TypInfo.otSLong, l_EstacionDestinoID);
    l_AlmacenDestinoID := Self.AlmacenDestinoID;
    TROSerializer(ASerializer).WriteInteger('AlmacenDestinoID', TypInfo.otSLong, l_AlmacenDestinoID);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_ProveedorId := Self.ProveedorId;
    TROSerializer(ASerializer).WriteInteger('ProveedorId', TypInfo.otSLong, l_ProveedorId);
    l_AlmacenID := Self.AlmacenID;
    TROSerializer(ASerializer).WriteInteger('AlmacenID', TypInfo.otSLong, l_AlmacenID);
    l_MovimientoAlmacen := Self.MovimientoAlmacen;
    TROSerializer(ASerializer).WriteInteger('MovimientoAlmacen', TypInfo.otSLong, l_MovimientoAlmacen);
  end
  else begin
    l_AlmacenDestinoID := Self.AlmacenDestinoID;
    TROSerializer(ASerializer).WriteInteger('AlmacenDestinoID', TypInfo.otSLong, l_AlmacenDestinoID);
    l_AlmacenID := Self.AlmacenID;
    TROSerializer(ASerializer).WriteInteger('AlmacenID', TypInfo.otSLong, l_AlmacenID);
    l_Credito := Self.Credito;
    TROSerializer(ASerializer).WriteEnumerated('Credito',System.TypeInfo(boolean), l_Credito);
    l_EstacionDestinoID := Self.EstacionDestinoID;
    TROSerializer(ASerializer).WriteInteger('EstacionDestinoID', TypInfo.otSLong, l_EstacionDestinoID);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', TypInfo.otSLong, l_Folio);
    l_Impuesto := Self.Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    l_MovimientoAlmacen := Self.MovimientoAlmacen;
    TROSerializer(ASerializer).WriteInteger('MovimientoAlmacen', TypInfo.otSLong, l_MovimientoAlmacen);
    l_Plazo := Self.Plazo;
    TROSerializer(ASerializer).WriteInteger('Plazo', TypInfo.otSLong, l_Plazo);
    l_ProveedorId := Self.ProveedorId;
    TROSerializer(ASerializer).WriteInteger('ProveedorId', TypInfo.otSLong, l_ProveedorId);
    l_Referencia := Self.Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    l_Subtotal := Self.Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    l_Tipo := Self.Tipo;
    TROSerializer(ASerializer).WriteAnsiString('Tipo', l_Tipo);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_TransaccionID := Self.TransaccionID;
    TROSerializer(ASerializer).WriteInteger('TransaccionID', TypInfo.otSLong, l_TransaccionID);
  end;
end;

{ TTransaccionCollection }
constructor TTransaccionCollection.Create;
begin
  inherited Create(TTransaccion);
end;

constructor TTransaccionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTransaccionCollection.Add: TTransaccion;
begin
  Result := TTransaccion(inherited Add);
end;

function TTransaccionCollection.GetItems(aIndex: Integer): TTransaccion;
begin
  Result := TTransaccion(inherited Items[aIndex]);
end;

procedure TTransaccionCollection.SetItems(aIndex: Integer; const Value: TTransaccion);
begin
  TTransaccion(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleTransaccion }

procedure TDetalleTransaccion.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDetalleTransaccion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleTransaccion) then begin
    lSource := LibraryEmpresas_Intf.TDetalleTransaccion(iSource);

    Self.DetalleTransaccionID := lSource.DetalleTransaccionID;
    Self.Cantidad := lSource.Cantidad;
    Self.Costo := lSource.Costo;
    Self.TransaccionID := lSource.TransaccionID;
    Self.ProductoID := lSource.ProductoID;
    Self.Tipo := lSource.Tipo;
    Self.Operador := lSource.Operador;
    Self.MovimientoAlmacen := lSource.MovimientoAlmacen;
  end;
end;

procedure TDetalleTransaccion.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Costo: Double;
  l_DetalleTransaccionID: Integer;
  l_MovimientoAlmacen: Integer;
  l_Operador: Integer;
  l_ProductoID: Integer;
  l_Tipo: AnsiString;
  l_TransaccionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_DetalleTransaccionID := Self.DetalleTransaccionID;
    try
      TROSerializer(ASerializer).ReadInteger('DetalleTransaccionID', TypInfo.otSLong, l_DetalleTransaccionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleTransaccionID']));
    end;
    Self.DetalleTransaccionID := l_DetalleTransaccionID;
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Costo := Self.Costo;
    try
      TROSerializer(ASerializer).ReadDouble('Costo', TypInfo.ftDouble, l_Costo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Costo']));
    end;
    Self.Costo := l_Costo;
    l_TransaccionID := Self.TransaccionID;
    try
      TROSerializer(ASerializer).ReadInteger('TransaccionID', TypInfo.otSLong, l_TransaccionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TransaccionID']));
    end;
    Self.TransaccionID := l_TransaccionID;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_Tipo := Self.Tipo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Tipo', l_Tipo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tipo']));
    end;
    Self.Tipo := l_Tipo;
    l_Operador := Self.Operador;
    try
      TROSerializer(ASerializer).ReadInteger('Operador', TypInfo.otSLong, l_Operador);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Operador']));
    end;
    Self.Operador := l_Operador;
    l_MovimientoAlmacen := Self.MovimientoAlmacen;
    try
      TROSerializer(ASerializer).ReadInteger('MovimientoAlmacen', TypInfo.otSLong, l_MovimientoAlmacen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MovimientoAlmacen']));
    end;
    Self.MovimientoAlmacen := l_MovimientoAlmacen;
  end
  else begin
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Costo := Self.Costo;
    try
      TROSerializer(ASerializer).ReadDouble('Costo', TypInfo.ftDouble, l_Costo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Costo']));
    end;
    Self.Costo := l_Costo;
    l_DetalleTransaccionID := Self.DetalleTransaccionID;
    try
      TROSerializer(ASerializer).ReadInteger('DetalleTransaccionID', TypInfo.otSLong, l_DetalleTransaccionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleTransaccionID']));
    end;
    Self.DetalleTransaccionID := l_DetalleTransaccionID;
    l_MovimientoAlmacen := Self.MovimientoAlmacen;
    try
      TROSerializer(ASerializer).ReadInteger('MovimientoAlmacen', TypInfo.otSLong, l_MovimientoAlmacen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MovimientoAlmacen']));
    end;
    Self.MovimientoAlmacen := l_MovimientoAlmacen;
    l_Operador := Self.Operador;
    try
      TROSerializer(ASerializer).ReadInteger('Operador', TypInfo.otSLong, l_Operador);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Operador']));
    end;
    Self.Operador := l_Operador;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_Tipo := Self.Tipo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Tipo', l_Tipo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tipo']));
    end;
    Self.Tipo := l_Tipo;
    l_TransaccionID := Self.TransaccionID;
    try
      TROSerializer(ASerializer).ReadInteger('TransaccionID', TypInfo.otSLong, l_TransaccionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TransaccionID']));
    end;
    Self.TransaccionID := l_TransaccionID;
  end;
end;

procedure TDetalleTransaccion.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Costo: Double;
  l_DetalleTransaccionID: Integer;
  l_MovimientoAlmacen: Integer;
  l_Operador: Integer;
  l_ProductoID: Integer;
  l_Tipo: AnsiString;
  l_TransaccionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleTransaccion);
    l_DetalleTransaccionID := Self.DetalleTransaccionID;
    TROSerializer(ASerializer).WriteInteger('DetalleTransaccionID', TypInfo.otSLong, l_DetalleTransaccionID);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Costo := Self.Costo;
    TROSerializer(ASerializer).WriteDouble('Costo', TypInfo.ftDouble, l_Costo);
    l_TransaccionID := Self.TransaccionID;
    TROSerializer(ASerializer).WriteInteger('TransaccionID', TypInfo.otSLong, l_TransaccionID);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_Tipo := Self.Tipo;
    TROSerializer(ASerializer).WriteAnsiString('Tipo', l_Tipo);
    l_Operador := Self.Operador;
    TROSerializer(ASerializer).WriteInteger('Operador', TypInfo.otSLong, l_Operador);
    l_MovimientoAlmacen := Self.MovimientoAlmacen;
    TROSerializer(ASerializer).WriteInteger('MovimientoAlmacen', TypInfo.otSLong, l_MovimientoAlmacen);
  end
  else begin
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Costo := Self.Costo;
    TROSerializer(ASerializer).WriteDouble('Costo', TypInfo.ftDouble, l_Costo);
    l_DetalleTransaccionID := Self.DetalleTransaccionID;
    TROSerializer(ASerializer).WriteInteger('DetalleTransaccionID', TypInfo.otSLong, l_DetalleTransaccionID);
    l_MovimientoAlmacen := Self.MovimientoAlmacen;
    TROSerializer(ASerializer).WriteInteger('MovimientoAlmacen', TypInfo.otSLong, l_MovimientoAlmacen);
    l_Operador := Self.Operador;
    TROSerializer(ASerializer).WriteInteger('Operador', TypInfo.otSLong, l_Operador);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_Tipo := Self.Tipo;
    TROSerializer(ASerializer).WriteAnsiString('Tipo', l_Tipo);
    l_TransaccionID := Self.TransaccionID;
    TROSerializer(ASerializer).WriteInteger('TransaccionID', TypInfo.otSLong, l_TransaccionID);
  end;
end;

{ TDetalleTransaccionCollection }
constructor TDetalleTransaccionCollection.Create;
begin
  inherited Create(TDetalleTransaccion);
end;

constructor TDetalleTransaccionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleTransaccionCollection.Add: TDetalleTransaccion;
begin
  Result := TDetalleTransaccion(inherited Add);
end;

function TDetalleTransaccionCollection.GetItems(aIndex: Integer): TDetalleTransaccion;
begin
  Result := TDetalleTransaccion(inherited Items[aIndex]);
end;

procedure TDetalleTransaccionCollection.LoadFromArray(anArray: ATDetalleTransaccion);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDetalleTransaccionCollection.SaveToArray(anArray: ATDetalleTransaccion);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDetalleTransaccion(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDetalleTransaccionCollection.SetItems(aIndex: Integer; const Value: TDetalleTransaccion);
begin
  TDetalleTransaccion(inherited Items[aIndex]).Assign(Value);
end;

{ TCarteraVale }

procedure TCarteraVale.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TCarteraVale;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TCarteraVale) then begin
    lSource := LibraryEmpresas_Intf.TCarteraVale(iSource);

    Self.CarteraValeCreditoID := lSource.CarteraValeCreditoID;
    Self.NoVale := lSource.NoVale;
    Self.Ticket := lSource.Ticket;
    Self.Importe := lSource.Importe;
    Self.Fecha := lSource.Fecha;
    Self.Status := lSource.Status;
    Self.FacturaID := lSource.FacturaID;
    Self.EstacionID := lSource.EstacionID;
    Self.ClienteID := lSource.ClienteID;
    Self.LiquidacionDetalleID := lSource.LiquidacionDetalleID;
  end;
end;

procedure TCarteraVale.ReadComplex(ASerializer: TObject);
var
  l_CarteraValeCreditoID: Integer;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Importe: Double;
  l_LiquidacionDetalleID: Integer;
  l_NoVale: Integer;
  l_Status: AnsiString;
  l_Ticket: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CarteraValeCreditoID := Self.CarteraValeCreditoID;
    try
      TROSerializer(ASerializer).ReadInteger('CarteraValeCreditoID', TypInfo.otSLong, l_CarteraValeCreditoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CarteraValeCreditoID']));
    end;
    Self.CarteraValeCreditoID := l_CarteraValeCreditoID;
    l_NoVale := Self.NoVale;
    try
      TROSerializer(ASerializer).ReadInteger('NoVale', TypInfo.otSLong, l_NoVale);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoVale']));
    end;
    Self.NoVale := l_NoVale;
    l_Ticket := Self.Ticket;
    try
      TROSerializer(ASerializer).ReadInteger('Ticket', TypInfo.otSLong, l_Ticket);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ticket']));
    end;
    Self.Ticket := l_Ticket;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Status := Self.Status;
    try
      TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Status']));
    end;
    Self.Status := l_Status;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_LiquidacionDetalleID := Self.LiquidacionDetalleID;
    try
      TROSerializer(ASerializer).ReadInteger('LiquidacionDetalleID', TypInfo.otSLong, l_LiquidacionDetalleID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionDetalleID']));
    end;
    Self.LiquidacionDetalleID := l_LiquidacionDetalleID;
  end
  else begin
    l_CarteraValeCreditoID := Self.CarteraValeCreditoID;
    try
      TROSerializer(ASerializer).ReadInteger('CarteraValeCreditoID', TypInfo.otSLong, l_CarteraValeCreditoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CarteraValeCreditoID']));
    end;
    Self.CarteraValeCreditoID := l_CarteraValeCreditoID;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_LiquidacionDetalleID := Self.LiquidacionDetalleID;
    try
      TROSerializer(ASerializer).ReadInteger('LiquidacionDetalleID', TypInfo.otSLong, l_LiquidacionDetalleID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionDetalleID']));
    end;
    Self.LiquidacionDetalleID := l_LiquidacionDetalleID;
    l_NoVale := Self.NoVale;
    try
      TROSerializer(ASerializer).ReadInteger('NoVale', TypInfo.otSLong, l_NoVale);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoVale']));
    end;
    Self.NoVale := l_NoVale;
    l_Status := Self.Status;
    try
      TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Status']));
    end;
    Self.Status := l_Status;
    l_Ticket := Self.Ticket;
    try
      TROSerializer(ASerializer).ReadInteger('Ticket', TypInfo.otSLong, l_Ticket);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ticket']));
    end;
    Self.Ticket := l_Ticket;
  end;
end;

procedure TCarteraVale.WriteComplex(ASerializer: TObject);
var
  l_CarteraValeCreditoID: Integer;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Importe: Double;
  l_LiquidacionDetalleID: Integer;
  l_NoVale: Integer;
  l_Status: AnsiString;
  l_Ticket: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCarteraVale);
    l_CarteraValeCreditoID := Self.CarteraValeCreditoID;
    TROSerializer(ASerializer).WriteInteger('CarteraValeCreditoID', TypInfo.otSLong, l_CarteraValeCreditoID);
    l_NoVale := Self.NoVale;
    TROSerializer(ASerializer).WriteInteger('NoVale', TypInfo.otSLong, l_NoVale);
    l_Ticket := Self.Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', TypInfo.otSLong, l_Ticket);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Status := Self.Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_LiquidacionDetalleID := Self.LiquidacionDetalleID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionDetalleID', TypInfo.otSLong, l_LiquidacionDetalleID);
  end
  else begin
    l_CarteraValeCreditoID := Self.CarteraValeCreditoID;
    TROSerializer(ASerializer).WriteInteger('CarteraValeCreditoID', TypInfo.otSLong, l_CarteraValeCreditoID);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_LiquidacionDetalleID := Self.LiquidacionDetalleID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionDetalleID', TypInfo.otSLong, l_LiquidacionDetalleID);
    l_NoVale := Self.NoVale;
    TROSerializer(ASerializer).WriteInteger('NoVale', TypInfo.otSLong, l_NoVale);
    l_Status := Self.Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_Ticket := Self.Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', TypInfo.otSLong, l_Ticket);
  end;
end;

{ TCarteraValeCollection }
constructor TCarteraValeCollection.Create;
begin
  inherited Create(TCarteraVale);
end;

constructor TCarteraValeCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCarteraValeCollection.Add: TCarteraVale;
begin
  Result := TCarteraVale(inherited Add);
end;

function TCarteraValeCollection.GetItems(aIndex: Integer): TCarteraVale;
begin
  Result := TCarteraVale(inherited Items[aIndex]);
end;

procedure TCarteraValeCollection.LoadFromArray(anArray: ATCarteraVale);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TCarteraValeCollection.SaveToArray(anArray: ATCarteraVale);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TCarteraVale(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TCarteraValeCollection.SetItems(aIndex: Integer; const Value: TCarteraVale);
begin
  TCarteraVale(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosLiquidacion }

procedure TDatosLiquidacion.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDatosLiquidacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosLiquidacion) then begin
    lSource := LibraryEmpresas_Intf.TDatosLiquidacion(iSource);

    if System.Assigned(lSource.fLiquidacion) then
      Self.Liquidacion.Assign(lSource.fLiquidacion)
    else
      SysUtils.FreeAndNil(fLiquidacion);
    if System.Assigned(lSource.fLiquidacionDetalle) then
      Self.LiquidacionDetalle.Assign(lSource.fLiquidacionDetalle)
    else
      SysUtils.FreeAndNil(fLiquidacionDetalle);
    if System.Assigned(lSource.fLiquidacionProducto) then
      Self.LiquidacionProducto.Assign(lSource.fLiquidacionProducto)
    else
      SysUtils.FreeAndNil(fLiquidacionProducto);
    if System.Assigned(lSource.fLiquidacionCombustible) then
      Self.LiquidacionCombustible.Assign(lSource.fLiquidacionCombustible)
    else
      SysUtils.FreeAndNil(fLiquidacionCombustible);
    if System.Assigned(lSource.fTraspaso) then
      Self.Traspaso.Assign(lSource.fTraspaso)
    else
      SysUtils.FreeAndNil(fTraspaso);
    if System.Assigned(lSource.fVenta) then
      Self.Venta.Assign(lSource.fVenta)
    else
      SysUtils.FreeAndNil(fVenta);
    if System.Assigned(lSource.fDetalleTraspaso) then
      Self.DetalleTraspaso.Assign(lSource.fDetalleTraspaso)
    else
      SysUtils.FreeAndNil(fDetalleTraspaso);
    if System.Assigned(lSource.fDetalleVenta) then
      Self.DetalleVenta.Assign(lSource.fDetalleVenta)
    else
      SysUtils.FreeAndNil(fDetalleVenta);
    if System.Assigned(lSource.fCarteraVales) then
      Self.CarteraVales.Assign(lSource.fCarteraVales)
    else
      SysUtils.FreeAndNil(fCarteraVales);
  end;
end;

function TDatosLiquidacion.GetLiquidacion: TLiquidacion;
begin
  if (fLiquidacion = nil) then fLiquidacion := TLiquidacion.Create();
  Result := fLiquidacion;
end;

function TDatosLiquidacion.GetLiquidacionDetalle: ATLiquidacionDetalle;
begin
  if (fLiquidacionDetalle = nil) then fLiquidacionDetalle := ATLiquidacionDetalle.Create();
  Result := fLiquidacionDetalle;
end;

function TDatosLiquidacion.GetLiquidacionProducto: ATLiquidacionProducto;
begin
  if (fLiquidacionProducto = nil) then fLiquidacionProducto := ATLiquidacionProducto.Create();
  Result := fLiquidacionProducto;
end;

function TDatosLiquidacion.GetLiquidacionCombustible: ATLiquidacionProducto;
begin
  if (fLiquidacionCombustible = nil) then fLiquidacionCombustible := ATLiquidacionProducto.Create();
  Result := fLiquidacionCombustible;
end;

function TDatosLiquidacion.GetTraspaso: TTransaccion;
begin
  if (fTraspaso = nil) then fTraspaso := TTransaccion.Create();
  Result := fTraspaso;
end;

function TDatosLiquidacion.GetVenta: TTransaccion;
begin
  if (fVenta = nil) then fVenta := TTransaccion.Create();
  Result := fVenta;
end;

function TDatosLiquidacion.GetDetalleTraspaso: ATDetalleTransaccion;
begin
  if (fDetalleTraspaso = nil) then fDetalleTraspaso := ATDetalleTransaccion.Create();
  Result := fDetalleTraspaso;
end;

function TDatosLiquidacion.GetDetalleVenta: ATDetalleTransaccion;
begin
  if (fDetalleVenta = nil) then fDetalleVenta := ATDetalleTransaccion.Create();
  Result := fDetalleVenta;
end;

function TDatosLiquidacion.GetCarteraVales: ATCarteraVale;
begin
  if (fCarteraVales = nil) then fCarteraVales := ATCarteraVale.Create();
  Result := fCarteraVales;
end;

procedure TDatosLiquidacion.ReadComplex(ASerializer: TObject);
var
  l_CarteraVales: ATCarteraVale;
  l_DetalleTraspaso: ATDetalleTransaccion;
  l_DetalleVenta: ATDetalleTransaccion;
  l_Liquidacion: TLiquidacion;
  l_LiquidacionCombustible: ATLiquidacionProducto;
  l_LiquidacionDetalle: ATLiquidacionDetalle;
  l_LiquidacionProducto: ATLiquidacionProducto;
  l_Traspaso: TTransaccion;
  l_Venta: TTransaccion;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Liquidacion := int_Liquidacion;
    try
      TROSerializer(ASerializer).ReadStruct('Liquidacion', TLiquidacion, l_Liquidacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Liquidacion']));
    end;
    if int_Liquidacion <> l_Liquidacion then Self.Liquidacion.Free;
    Self.Liquidacion := l_Liquidacion;
    l_LiquidacionDetalle := int_LiquidacionDetalle;
    try
      TROSerializer(ASerializer).ReadArray('LiquidacionDetalle', ATLiquidacionDetalle, l_LiquidacionDetalle);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionDetalle']));
    end;
    if int_LiquidacionDetalle <> l_LiquidacionDetalle then Self.LiquidacionDetalle.Free;
    Self.LiquidacionDetalle := l_LiquidacionDetalle;
    l_LiquidacionProducto := int_LiquidacionProducto;
    try
      TROSerializer(ASerializer).ReadArray('LiquidacionProducto', ATLiquidacionProducto, l_LiquidacionProducto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionProducto']));
    end;
    if int_LiquidacionProducto <> l_LiquidacionProducto then Self.LiquidacionProducto.Free;
    Self.LiquidacionProducto := l_LiquidacionProducto;
    l_LiquidacionCombustible := int_LiquidacionCombustible;
    try
      TROSerializer(ASerializer).ReadArray('LiquidacionCombustible', ATLiquidacionProducto, l_LiquidacionCombustible);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionCombustible']));
    end;
    if int_LiquidacionCombustible <> l_LiquidacionCombustible then Self.LiquidacionCombustible.Free;
    Self.LiquidacionCombustible := l_LiquidacionCombustible;
    l_Traspaso := int_Traspaso;
    try
      TROSerializer(ASerializer).ReadStruct('Traspaso', TTransaccion, l_Traspaso);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Traspaso']));
    end;
    if int_Traspaso <> l_Traspaso then Self.Traspaso.Free;
    Self.Traspaso := l_Traspaso;
    l_Venta := int_Venta;
    try
      TROSerializer(ASerializer).ReadStruct('Venta', TTransaccion, l_Venta);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Venta']));
    end;
    if int_Venta <> l_Venta then Self.Venta.Free;
    Self.Venta := l_Venta;
    l_DetalleTraspaso := int_DetalleTraspaso;
    try
      TROSerializer(ASerializer).ReadArray('DetalleTraspaso', ATDetalleTransaccion, l_DetalleTraspaso);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleTraspaso']));
    end;
    if int_DetalleTraspaso <> l_DetalleTraspaso then Self.DetalleTraspaso.Free;
    Self.DetalleTraspaso := l_DetalleTraspaso;
    l_DetalleVenta := int_DetalleVenta;
    try
      TROSerializer(ASerializer).ReadArray('DetalleVenta', ATDetalleTransaccion, l_DetalleVenta);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleVenta']));
    end;
    if int_DetalleVenta <> l_DetalleVenta then Self.DetalleVenta.Free;
    Self.DetalleVenta := l_DetalleVenta;
    l_CarteraVales := int_CarteraVales;
    try
      TROSerializer(ASerializer).ReadArray('CarteraVales', ATCarteraVale, l_CarteraVales);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CarteraVales']));
    end;
    if int_CarteraVales <> l_CarteraVales then Self.CarteraVales.Free;
    Self.CarteraVales := l_CarteraVales;
  end
  else begin
    l_CarteraVales := int_CarteraVales;
    try
      TROSerializer(ASerializer).ReadArray('CarteraVales', ATCarteraVale, l_CarteraVales);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CarteraVales']));
    end;
    if int_CarteraVales <> l_CarteraVales then CarteraVales.Free;
    Self.CarteraVales := l_CarteraVales;
    l_DetalleTraspaso := int_DetalleTraspaso;
    try
      TROSerializer(ASerializer).ReadArray('DetalleTraspaso', ATDetalleTransaccion, l_DetalleTraspaso);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleTraspaso']));
    end;
    if int_DetalleTraspaso <> l_DetalleTraspaso then DetalleTraspaso.Free;
    Self.DetalleTraspaso := l_DetalleTraspaso;
    l_DetalleVenta := int_DetalleVenta;
    try
      TROSerializer(ASerializer).ReadArray('DetalleVenta', ATDetalleTransaccion, l_DetalleVenta);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleVenta']));
    end;
    if int_DetalleVenta <> l_DetalleVenta then DetalleVenta.Free;
    Self.DetalleVenta := l_DetalleVenta;
    l_Liquidacion := int_Liquidacion;
    try
      TROSerializer(ASerializer).ReadStruct('Liquidacion', TLiquidacion, l_Liquidacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Liquidacion']));
    end;
    if int_Liquidacion <> l_Liquidacion then Liquidacion.Free;
    Self.Liquidacion := l_Liquidacion;
    l_LiquidacionCombustible := int_LiquidacionCombustible;
    try
      TROSerializer(ASerializer).ReadArray('LiquidacionCombustible', ATLiquidacionProducto, l_LiquidacionCombustible);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionCombustible']));
    end;
    if int_LiquidacionCombustible <> l_LiquidacionCombustible then LiquidacionCombustible.Free;
    Self.LiquidacionCombustible := l_LiquidacionCombustible;
    l_LiquidacionDetalle := int_LiquidacionDetalle;
    try
      TROSerializer(ASerializer).ReadArray('LiquidacionDetalle', ATLiquidacionDetalle, l_LiquidacionDetalle);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionDetalle']));
    end;
    if int_LiquidacionDetalle <> l_LiquidacionDetalle then LiquidacionDetalle.Free;
    Self.LiquidacionDetalle := l_LiquidacionDetalle;
    l_LiquidacionProducto := int_LiquidacionProducto;
    try
      TROSerializer(ASerializer).ReadArray('LiquidacionProducto', ATLiquidacionProducto, l_LiquidacionProducto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionProducto']));
    end;
    if int_LiquidacionProducto <> l_LiquidacionProducto then LiquidacionProducto.Free;
    Self.LiquidacionProducto := l_LiquidacionProducto;
    l_Traspaso := int_Traspaso;
    try
      TROSerializer(ASerializer).ReadStruct('Traspaso', TTransaccion, l_Traspaso);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Traspaso']));
    end;
    if int_Traspaso <> l_Traspaso then Traspaso.Free;
    Self.Traspaso := l_Traspaso;
    l_Venta := int_Venta;
    try
      TROSerializer(ASerializer).ReadStruct('Venta', TTransaccion, l_Venta);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Venta']));
    end;
    if int_Venta <> l_Venta then Venta.Free;
    Self.Venta := l_Venta;
  end;
end;

procedure TDatosLiquidacion.WriteComplex(ASerializer: TObject);
var
  l_CarteraVales: ATCarteraVale;
  l_DetalleTraspaso: ATDetalleTransaccion;
  l_DetalleVenta: ATDetalleTransaccion;
  l_Liquidacion: TLiquidacion;
  l_LiquidacionCombustible: ATLiquidacionProducto;
  l_LiquidacionDetalle: ATLiquidacionDetalle;
  l_LiquidacionProducto: ATLiquidacionProducto;
  l_Traspaso: TTransaccion;
  l_Venta: TTransaccion;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosLiquidacion);
    l_Liquidacion := int_Liquidacion;
    TROSerializer(ASerializer).WriteStruct('Liquidacion', l_Liquidacion, TLiquidacion);
    l_LiquidacionDetalle := int_LiquidacionDetalle;
    TROSerializer(ASerializer).WriteArray('LiquidacionDetalle', l_LiquidacionDetalle, ATLiquidacionDetalle);
    l_LiquidacionProducto := int_LiquidacionProducto;
    TROSerializer(ASerializer).WriteArray('LiquidacionProducto', l_LiquidacionProducto, ATLiquidacionProducto);
    l_LiquidacionCombustible := int_LiquidacionCombustible;
    TROSerializer(ASerializer).WriteArray('LiquidacionCombustible', l_LiquidacionCombustible, ATLiquidacionProducto);
    l_Traspaso := int_Traspaso;
    TROSerializer(ASerializer).WriteStruct('Traspaso', l_Traspaso, TTransaccion);
    l_Venta := int_Venta;
    TROSerializer(ASerializer).WriteStruct('Venta', l_Venta, TTransaccion);
    l_DetalleTraspaso := int_DetalleTraspaso;
    TROSerializer(ASerializer).WriteArray('DetalleTraspaso', l_DetalleTraspaso, ATDetalleTransaccion);
    l_DetalleVenta := int_DetalleVenta;
    TROSerializer(ASerializer).WriteArray('DetalleVenta', l_DetalleVenta, ATDetalleTransaccion);
    l_CarteraVales := int_CarteraVales;
    TROSerializer(ASerializer).WriteArray('CarteraVales', l_CarteraVales, ATCarteraVale);
  end
  else begin
    l_CarteraVales := int_CarteraVales;
    TROSerializer(ASerializer).WriteArray('CarteraVales', l_CarteraVales, ATCarteraVale);
    l_DetalleTraspaso := int_DetalleTraspaso;
    TROSerializer(ASerializer).WriteArray('DetalleTraspaso', l_DetalleTraspaso, ATDetalleTransaccion);
    l_DetalleVenta := int_DetalleVenta;
    TROSerializer(ASerializer).WriteArray('DetalleVenta', l_DetalleVenta, ATDetalleTransaccion);
    l_Liquidacion := int_Liquidacion;
    TROSerializer(ASerializer).WriteStruct('Liquidacion', l_Liquidacion, TLiquidacion);
    l_LiquidacionCombustible := int_LiquidacionCombustible;
    TROSerializer(ASerializer).WriteArray('LiquidacionCombustible', l_LiquidacionCombustible, ATLiquidacionProducto);
    l_LiquidacionDetalle := int_LiquidacionDetalle;
    TROSerializer(ASerializer).WriteArray('LiquidacionDetalle', l_LiquidacionDetalle, ATLiquidacionDetalle);
    l_LiquidacionProducto := int_LiquidacionProducto;
    TROSerializer(ASerializer).WriteArray('LiquidacionProducto', l_LiquidacionProducto, ATLiquidacionProducto);
    l_Traspaso := int_Traspaso;
    TROSerializer(ASerializer).WriteStruct('Traspaso', l_Traspaso, TTransaccion);
    l_Venta := int_Venta;
    TROSerializer(ASerializer).WriteStruct('Venta', l_Venta, TTransaccion);
  end;
end;

{ TDatosLiquidacionCollection }
constructor TDatosLiquidacionCollection.Create;
begin
  inherited Create(TDatosLiquidacion);
end;

constructor TDatosLiquidacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosLiquidacionCollection.Add: TDatosLiquidacion;
begin
  Result := TDatosLiquidacion(inherited Add);
end;

function TDatosLiquidacionCollection.GetItems(aIndex: Integer): TDatosLiquidacion;
begin
  Result := TDatosLiquidacion(inherited Items[aIndex]);
end;

procedure TDatosLiquidacionCollection.SetItems(aIndex: Integer; const Value: TDatosLiquidacion);
begin
  TDatosLiquidacion(inherited Items[aIndex]).Assign(Value);
end;

{ TReporte }

procedure TReporte.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TReporte;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TReporte) then begin
    lSource := LibraryEmpresas_Intf.TReporte(iSource);

    Self.SQL1 := lSource.SQL1;
    Self.SQL2 := lSource.SQL2;
    Self.Template := lSource.Template;
    Self.CampoJoin := lSource.CampoJoin;
  end;
end;

procedure TReporte.ReadComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_SQL1 := Self.SQL1;
    try
      TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SQL1']));
    end;
    Self.SQL1 := l_SQL1;
    l_SQL2 := Self.SQL2;
    try
      TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SQL2']));
    end;
    Self.SQL2 := l_SQL2;
    l_Template := Self.Template;
    try
      TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Template']));
    end;
    Self.Template := l_Template;
    l_CampoJoin := Self.CampoJoin;
    try
      TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CampoJoin']));
    end;
    Self.CampoJoin := l_CampoJoin;
  end
  else begin
    l_CampoJoin := Self.CampoJoin;
    try
      TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CampoJoin']));
    end;
    Self.CampoJoin := l_CampoJoin;
    l_SQL1 := Self.SQL1;
    try
      TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SQL1']));
    end;
    Self.SQL1 := l_SQL1;
    l_SQL2 := Self.SQL2;
    try
      TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SQL2']));
    end;
    Self.SQL2 := l_SQL2;
    l_Template := Self.Template;
    try
      TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Template']));
    end;
    Self.Template := l_Template;
  end;
end;

procedure TReporte.WriteComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TReporte);
    l_SQL1 := Self.SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := Self.SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Self.Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
    l_CampoJoin := Self.CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
  end
  else begin
    l_CampoJoin := Self.CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
    l_SQL1 := Self.SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := Self.SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Self.Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
  end;
end;

{ TReporteCollection }
constructor TReporteCollection.Create;
begin
  inherited Create(TReporte);
end;

constructor TReporteCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TReporteCollection.Add: TReporte;
begin
  Result := TReporte(inherited Add);
end;

function TReporteCollection.GetItems(aIndex: Integer): TReporte;
begin
  Result := TReporte(inherited Items[aIndex]);
end;

procedure TReporteCollection.SetItems(aIndex: Integer; const Value: TReporte);
begin
  TReporte(inherited Items[aIndex]).Assign(Value);
end;

{ TRecibo }

procedure TRecibo.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TRecibo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TRecibo) then begin
    lSource := LibraryEmpresas_Intf.TRecibo(iSource);

    Self.Serie := lSource.Serie;
    Self.Folio := lSource.Folio;
    Self.Fecha := lSource.Fecha;
    Self.Subtotal := lSource.Subtotal;
    Self.Ejercicio := lSource.Ejercicio;
    Self.Periodo := lSource.Periodo;
    Self.Dia := lSource.Dia;
    Self.Impuesto := lSource.Impuesto;
    Self.Total := lSource.Total;
    Self.ClienteID := lSource.ClienteID;
    Self.EstacionID := lSource.EstacionID;
    Self.FormaPagoID := lSource.FormaPagoID;
    Self.ReciboPagoID := lSource.ReciboPagoID;
  end;
end;

procedure TRecibo.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Dia: Integer;
  l_Ejercicio: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_FormaPagoID: Integer;
  l_Impuesto: Double;
  l_Periodo: Integer;
  l_ReciboPagoID: Integer;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadInteger('Folio', TypInfo.otSLong, l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Subtotal := Self.Subtotal;
    try
      TROSerializer(ASerializer).ReadDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Subtotal']));
    end;
    Self.Subtotal := l_Subtotal;
    l_Ejercicio := Self.Ejercicio;
    try
      TROSerializer(ASerializer).ReadInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ejercicio']));
    end;
    Self.Ejercicio := l_Ejercicio;
    l_Periodo := Self.Periodo;
    try
      TROSerializer(ASerializer).ReadInteger('Periodo', TypInfo.otSLong, l_Periodo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Periodo']));
    end;
    Self.Periodo := l_Periodo;
    l_Dia := Self.Dia;
    try
      TROSerializer(ASerializer).ReadInteger('Dia', TypInfo.otSLong, l_Dia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Dia']));
    end;
    Self.Dia := l_Dia;
    l_Impuesto := Self.Impuesto;
    try
      TROSerializer(ASerializer).ReadDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Impuesto']));
    end;
    Self.Impuesto := l_Impuesto;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_FormaPagoID := Self.FormaPagoID;
    try
      TROSerializer(ASerializer).ReadInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FormaPagoID']));
    end;
    Self.FormaPagoID := l_FormaPagoID;
    l_ReciboPagoID := Self.ReciboPagoID;
    try
      TROSerializer(ASerializer).ReadInteger('ReciboPagoID', TypInfo.otSLong, l_ReciboPagoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ReciboPagoID']));
    end;
    Self.ReciboPagoID := l_ReciboPagoID;
  end
  else begin
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_Dia := Self.Dia;
    try
      TROSerializer(ASerializer).ReadInteger('Dia', TypInfo.otSLong, l_Dia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Dia']));
    end;
    Self.Dia := l_Dia;
    l_Ejercicio := Self.Ejercicio;
    try
      TROSerializer(ASerializer).ReadInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ejercicio']));
    end;
    Self.Ejercicio := l_Ejercicio;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadInteger('Folio', TypInfo.otSLong, l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_FormaPagoID := Self.FormaPagoID;
    try
      TROSerializer(ASerializer).ReadInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FormaPagoID']));
    end;
    Self.FormaPagoID := l_FormaPagoID;
    l_Impuesto := Self.Impuesto;
    try
      TROSerializer(ASerializer).ReadDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Impuesto']));
    end;
    Self.Impuesto := l_Impuesto;
    l_Periodo := Self.Periodo;
    try
      TROSerializer(ASerializer).ReadInteger('Periodo', TypInfo.otSLong, l_Periodo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Periodo']));
    end;
    Self.Periodo := l_Periodo;
    l_ReciboPagoID := Self.ReciboPagoID;
    try
      TROSerializer(ASerializer).ReadInteger('ReciboPagoID', TypInfo.otSLong, l_ReciboPagoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ReciboPagoID']));
    end;
    Self.ReciboPagoID := l_ReciboPagoID;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Subtotal := Self.Subtotal;
    try
      TROSerializer(ASerializer).ReadDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Subtotal']));
    end;
    Self.Subtotal := l_Subtotal;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
  end;
end;

procedure TRecibo.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Dia: Integer;
  l_Ejercicio: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_FormaPagoID: Integer;
  l_Impuesto: Double;
  l_Periodo: Integer;
  l_ReciboPagoID: Integer;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TRecibo);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', TypInfo.otSLong, l_Folio);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Subtotal := Self.Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    l_Ejercicio := Self.Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    l_Periodo := Self.Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', TypInfo.otSLong, l_Periodo);
    l_Dia := Self.Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', TypInfo.otSLong, l_Dia);
    l_Impuesto := Self.Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_FormaPagoID := Self.FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    l_ReciboPagoID := Self.ReciboPagoID;
    TROSerializer(ASerializer).WriteInteger('ReciboPagoID', TypInfo.otSLong, l_ReciboPagoID);
  end
  else begin
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_Dia := Self.Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', TypInfo.otSLong, l_Dia);
    l_Ejercicio := Self.Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', TypInfo.otSLong, l_Folio);
    l_FormaPagoID := Self.FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    l_Impuesto := Self.Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    l_Periodo := Self.Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', TypInfo.otSLong, l_Periodo);
    l_ReciboPagoID := Self.ReciboPagoID;
    TROSerializer(ASerializer).WriteInteger('ReciboPagoID', TypInfo.otSLong, l_ReciboPagoID);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Self.Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
  end;
end;

{ TReciboCollection }
constructor TReciboCollection.Create;
begin
  inherited Create(TRecibo);
end;

constructor TReciboCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TReciboCollection.Add: TRecibo;
begin
  Result := TRecibo(inherited Add);
end;

function TReciboCollection.GetItems(aIndex: Integer): TRecibo;
begin
  Result := TRecibo(inherited Items[aIndex]);
end;

procedure TReciboCollection.SetItems(aIndex: Integer; const Value: TRecibo);
begin
  TRecibo(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleReciboPago }

procedure TDetalleReciboPago.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDetalleReciboPago;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleReciboPago) then begin
    lSource := LibraryEmpresas_Intf.TDetalleReciboPago(iSource);

    Self.FacturaID := lSource.FacturaID;
    Self.Total := lSource.Total;
    Self.ReciboID := lSource.ReciboID;
    Self.ItemNo := lSource.ItemNo;
  end;
end;

procedure TDetalleReciboPago.ReadComplex(ASerializer: TObject);
var
  l_FacturaID: Integer;
  l_ItemNo: Integer;
  l_ReciboID: Integer;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_ReciboID := Self.ReciboID;
    try
      TROSerializer(ASerializer).ReadInteger('ReciboID', TypInfo.otSLong, l_ReciboID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ReciboID']));
    end;
    Self.ReciboID := l_ReciboID;
    l_ItemNo := Self.ItemNo;
    try
      TROSerializer(ASerializer).ReadInteger('ItemNo', TypInfo.otSLong, l_ItemNo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ItemNo']));
    end;
    Self.ItemNo := l_ItemNo;
  end
  else begin
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_ItemNo := Self.ItemNo;
    try
      TROSerializer(ASerializer).ReadInteger('ItemNo', TypInfo.otSLong, l_ItemNo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ItemNo']));
    end;
    Self.ItemNo := l_ItemNo;
    l_ReciboID := Self.ReciboID;
    try
      TROSerializer(ASerializer).ReadInteger('ReciboID', TypInfo.otSLong, l_ReciboID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ReciboID']));
    end;
    Self.ReciboID := l_ReciboID;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
  end;
end;

procedure TDetalleReciboPago.WriteComplex(ASerializer: TObject);
var
  l_FacturaID: Integer;
  l_ItemNo: Integer;
  l_ReciboID: Integer;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleReciboPago);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_ReciboID := Self.ReciboID;
    TROSerializer(ASerializer).WriteInteger('ReciboID', TypInfo.otSLong, l_ReciboID);
    l_ItemNo := Self.ItemNo;
    TROSerializer(ASerializer).WriteInteger('ItemNo', TypInfo.otSLong, l_ItemNo);
  end
  else begin
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_ItemNo := Self.ItemNo;
    TROSerializer(ASerializer).WriteInteger('ItemNo', TypInfo.otSLong, l_ItemNo);
    l_ReciboID := Self.ReciboID;
    TROSerializer(ASerializer).WriteInteger('ReciboID', TypInfo.otSLong, l_ReciboID);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
  end;
end;

{ TDetalleReciboPagoCollection }
constructor TDetalleReciboPagoCollection.Create;
begin
  inherited Create(TDetalleReciboPago);
end;

constructor TDetalleReciboPagoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleReciboPagoCollection.Add: TDetalleReciboPago;
begin
  Result := TDetalleReciboPago(inherited Add);
end;

function TDetalleReciboPagoCollection.GetItems(aIndex: Integer): TDetalleReciboPago;
begin
  Result := TDetalleReciboPago(inherited Items[aIndex]);
end;

procedure TDetalleReciboPagoCollection.LoadFromArray(anArray: ATDetalleRecibo);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDetalleReciboPagoCollection.SaveToArray(anArray: ATDetalleRecibo);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDetalleReciboPago(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDetalleReciboPagoCollection.SetItems(aIndex: Integer; const Value: TDetalleReciboPago);
begin
  TDetalleReciboPago(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosReciboPago }

procedure TDatosReciboPago.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDatosReciboPago;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosReciboPago) then begin
    lSource := LibraryEmpresas_Intf.TDatosReciboPago(iSource);

    if System.Assigned(lSource.fRecibo) then
      Self.Recibo.Assign(lSource.fRecibo)
    else
      SysUtils.FreeAndNil(fRecibo);
    if System.Assigned(lSource.fDetalles) then
      Self.Detalles.Assign(lSource.fDetalles)
    else
      SysUtils.FreeAndNil(fDetalles);
  end;
end;

function TDatosReciboPago.GetRecibo: TRecibo;
begin
  if (fRecibo = nil) then fRecibo := TRecibo.Create();
  Result := fRecibo;
end;

function TDatosReciboPago.GetDetalles: ATDetalleRecibo;
begin
  if (fDetalles = nil) then fDetalles := ATDetalleRecibo.Create();
  Result := fDetalles;
end;

procedure TDatosReciboPago.ReadComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleRecibo;
  l_Recibo: TRecibo;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Recibo := int_Recibo;
    try
      TROSerializer(ASerializer).ReadStruct('Recibo', TRecibo, l_Recibo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Recibo']));
    end;
    if int_Recibo <> l_Recibo then Self.Recibo.Free;
    Self.Recibo := l_Recibo;
    l_Detalles := int_Detalles;
    try
      TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleRecibo, l_Detalles);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalles']));
    end;
    if int_Detalles <> l_Detalles then Self.Detalles.Free;
    Self.Detalles := l_Detalles;
  end
  else begin
    l_Detalles := int_Detalles;
    try
      TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleRecibo, l_Detalles);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalles']));
    end;
    if int_Detalles <> l_Detalles then Detalles.Free;
    Self.Detalles := l_Detalles;
    l_Recibo := int_Recibo;
    try
      TROSerializer(ASerializer).ReadStruct('Recibo', TRecibo, l_Recibo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Recibo']));
    end;
    if int_Recibo <> l_Recibo then Recibo.Free;
    Self.Recibo := l_Recibo;
  end;
end;

procedure TDatosReciboPago.WriteComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleRecibo;
  l_Recibo: TRecibo;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosReciboPago);
    l_Recibo := int_Recibo;
    TROSerializer(ASerializer).WriteStruct('Recibo', l_Recibo, TRecibo);
    l_Detalles := int_Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleRecibo);
  end
  else begin
    l_Detalles := int_Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleRecibo);
    l_Recibo := int_Recibo;
    TROSerializer(ASerializer).WriteStruct('Recibo', l_Recibo, TRecibo);
  end;
end;

{ TDatosReciboPagoCollection }
constructor TDatosReciboPagoCollection.Create;
begin
  inherited Create(TDatosReciboPago);
end;

constructor TDatosReciboPagoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosReciboPagoCollection.Add: TDatosReciboPago;
begin
  Result := TDatosReciboPago(inherited Add);
end;

function TDatosReciboPagoCollection.GetItems(aIndex: Integer): TDatosReciboPago;
begin
  Result := TDatosReciboPago(inherited Items[aIndex]);
end;

procedure TDatosReciboPagoCollection.SetItems(aIndex: Integer; const Value: TDatosReciboPago);
begin
  TDatosReciboPago(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosRecibo }

procedure TDatosRecibo.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDatosRecibo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosRecibo) then begin
    lSource := LibraryEmpresas_Intf.TDatosRecibo(iSource);

    if System.Assigned(lSource.fRecibo) then
      Self.Recibo.Assign(lSource.fRecibo)
    else
      SysUtils.FreeAndNil(fRecibo);
    if System.Assigned(lSource.fDetalles) then
      Self.Detalles.Assign(lSource.fDetalles)
    else
      SysUtils.FreeAndNil(fDetalles);
  end;
end;

function TDatosRecibo.GetRecibo: TRecibo;
begin
  if (fRecibo = nil) then fRecibo := TRecibo.Create();
  Result := fRecibo;
end;

function TDatosRecibo.GetDetalles: ATDetalleRecibo;
begin
  if (fDetalles = nil) then fDetalles := ATDetalleRecibo.Create();
  Result := fDetalles;
end;

procedure TDatosRecibo.ReadComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleRecibo;
  l_Recibo: TRecibo;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Recibo := int_Recibo;
    try
      TROSerializer(ASerializer).ReadStruct('Recibo', TRecibo, l_Recibo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Recibo']));
    end;
    if int_Recibo <> l_Recibo then Self.Recibo.Free;
    Self.Recibo := l_Recibo;
    l_Detalles := int_Detalles;
    try
      TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleRecibo, l_Detalles);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalles']));
    end;
    if int_Detalles <> l_Detalles then Self.Detalles.Free;
    Self.Detalles := l_Detalles;
  end
  else begin
    l_Detalles := int_Detalles;
    try
      TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleRecibo, l_Detalles);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalles']));
    end;
    if int_Detalles <> l_Detalles then Detalles.Free;
    Self.Detalles := l_Detalles;
    l_Recibo := int_Recibo;
    try
      TROSerializer(ASerializer).ReadStruct('Recibo', TRecibo, l_Recibo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Recibo']));
    end;
    if int_Recibo <> l_Recibo then Recibo.Free;
    Self.Recibo := l_Recibo;
  end;
end;

procedure TDatosRecibo.WriteComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleRecibo;
  l_Recibo: TRecibo;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosRecibo);
    l_Recibo := int_Recibo;
    TROSerializer(ASerializer).WriteStruct('Recibo', l_Recibo, TRecibo);
    l_Detalles := int_Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleRecibo);
  end
  else begin
    l_Detalles := int_Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleRecibo);
    l_Recibo := int_Recibo;
    TROSerializer(ASerializer).WriteStruct('Recibo', l_Recibo, TRecibo);
  end;
end;

{ TDatosReciboCollection }
constructor TDatosReciboCollection.Create;
begin
  inherited Create(TDatosRecibo);
end;

constructor TDatosReciboCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosReciboCollection.Add: TDatosRecibo;
begin
  Result := TDatosRecibo(inherited Add);
end;

function TDatosReciboCollection.GetItems(aIndex: Integer): TDatosRecibo;
begin
  Result := TDatosRecibo(inherited Items[aIndex]);
end;

procedure TDatosReciboCollection.SetItems(aIndex: Integer; const Value: TDatosRecibo);
begin
  TDatosRecibo(inherited Items[aIndex]).Assign(Value);
end;

{ TLoginInfo }

procedure TLoginInfo.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TLoginInfo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TLoginInfo) then begin
    lSource := LibraryEmpresas_Intf.TLoginInfo(iSource);

    Self.Valida := lSource.Valida;
    Self.EmpleadoID := lSource.EmpleadoID;
    Self.NombreEmpleado := lSource.NombreEmpleado;
    if System.Assigned(lSource.fAccesos) then
      Self.Accesos.Assign(lSource.fAccesos)
    else
      SysUtils.FreeAndNil(fAccesos);
  end;
end;

function TLoginInfo.GetAccesos: ArrayOpcion;
begin
  if (fAccesos = nil) then fAccesos := ArrayOpcion.Create();
  Result := fAccesos;
end;

procedure TLoginInfo.ReadComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcion;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Valida := Self.Valida;
    try
      TROSerializer(ASerializer).ReadEnumerated('Valida',System.TypeInfo(boolean), l_Valida);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Valida']));
    end;
    Self.Valida := l_Valida;
    l_EmpleadoID := Self.EmpleadoID;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoID', TypInfo.otSLong, l_EmpleadoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoID']));
    end;
    Self.EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := Self.NombreEmpleado;
    try
      TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NombreEmpleado']));
    end;
    Self.NombreEmpleado := l_NombreEmpleado;
    l_Accesos := int_Accesos;
    try
      TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcion, l_Accesos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Accesos']));
    end;
    if int_Accesos <> l_Accesos then Self.Accesos.Free;
    Self.Accesos := l_Accesos;
  end
  else begin
    l_Accesos := int_Accesos;
    try
      TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcion, l_Accesos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Accesos']));
    end;
    if int_Accesos <> l_Accesos then Accesos.Free;
    Self.Accesos := l_Accesos;
    l_EmpleadoID := Self.EmpleadoID;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoID', TypInfo.otSLong, l_EmpleadoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoID']));
    end;
    Self.EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := Self.NombreEmpleado;
    try
      TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NombreEmpleado']));
    end;
    Self.NombreEmpleado := l_NombreEmpleado;
    l_Valida := Self.Valida;
    try
      TROSerializer(ASerializer).ReadEnumerated('Valida',System.TypeInfo(boolean), l_Valida);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Valida']));
    end;
    Self.Valida := l_Valida;
  end;
end;

procedure TLoginInfo.WriteComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcion;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLoginInfo);
    l_Valida := Self.Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',System.TypeInfo(boolean), l_Valida);
    l_EmpleadoID := Self.EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', TypInfo.otSLong, l_EmpleadoID);
    l_NombreEmpleado := Self.NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Accesos := int_Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcion);
  end
  else begin
    l_Accesos := int_Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcion);
    l_EmpleadoID := Self.EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', TypInfo.otSLong, l_EmpleadoID);
    l_NombreEmpleado := Self.NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Valida := Self.Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',System.TypeInfo(boolean), l_Valida);
  end;
end;

{ TLoginInfoCollection }
constructor TLoginInfoCollection.Create;
begin
  inherited Create(TLoginInfo);
end;

constructor TLoginInfoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLoginInfoCollection.Add: TLoginInfo;
begin
  Result := TLoginInfo(inherited Add);
end;

function TLoginInfoCollection.GetItems(aIndex: Integer): TLoginInfo;
begin
  Result := TLoginInfo(inherited Items[aIndex]);
end;

procedure TLoginInfoCollection.SetItems(aIndex: Integer; const Value: TLoginInfo);
begin
  TLoginInfo(inherited Items[aIndex]).Assign(Value);
end;

{ TOpcion }

procedure TOpcion.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TOpcion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TOpcion) then begin
    lSource := LibraryEmpresas_Intf.TOpcion(iSource);

    Self.OpcionID := lSource.OpcionID;
    Self.Nombre := lSource.Nombre;
  end;
end;

procedure TOpcion.ReadComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_OpcionID := Self.OpcionID;
    try
      TROSerializer(ASerializer).ReadInteger('OpcionID', TypInfo.otSLong, l_OpcionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'OpcionID']));
    end;
    Self.OpcionID := l_OpcionID;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
  end
  else begin
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_OpcionID := Self.OpcionID;
    try
      TROSerializer(ASerializer).ReadInteger('OpcionID', TypInfo.otSLong, l_OpcionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'OpcionID']));
    end;
    Self.OpcionID := l_OpcionID;
  end;
end;

procedure TOpcion.WriteComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TOpcion);
    l_OpcionID := Self.OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', TypInfo.otSLong, l_OpcionID);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
  end
  else begin
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_OpcionID := Self.OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', TypInfo.otSLong, l_OpcionID);
  end;
end;

{ TOpcionCollection }
constructor TOpcionCollection.Create;
begin
  inherited Create(TOpcion);
end;

constructor TOpcionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TOpcionCollection.Add: TOpcion;
begin
  Result := TOpcion(inherited Add);
end;

function TOpcionCollection.GetItems(aIndex: Integer): TOpcion;
begin
  Result := TOpcion(inherited Items[aIndex]);
end;

procedure TOpcionCollection.LoadFromArray(anArray: ArrayOpcion);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TOpcionCollection.SaveToArray(anArray: ArrayOpcion);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TOpcion(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TOpcionCollection.SetItems(aIndex: Integer; const Value: TOpcion);
begin
  TOpcion(inherited Items[aIndex]).Assign(Value);
end;

{ TConsumoExpress }

procedure TConsumoExpress.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TConsumoExpress;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TConsumoExpress) then begin
    lSource := LibraryEmpresas_Intf.TConsumoExpress(iSource);

    Self.Secuencia := lSource.Secuencia;
    Self.EstacionID := lSource.EstacionID;
    Self.ClienteID := lSource.ClienteID;
    Self.Precio := lSource.Precio;
    Self.Volumen := lSource.Volumen;
    Self.Importe := lSource.Importe;
    Self.Facturado := lSource.Facturado;
    Self.BombaID := lSource.BombaID;
    Self.ProductoID := lSource.ProductoID;
    Self.FacturaID := lSource.FacturaID;
    Self.FechaConsumo := lSource.FechaConsumo;
  end;
end;

procedure TConsumoExpress.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_Facturado: Boolean;
  l_FacturaID: Integer;
  l_FechaConsumo: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Secuencia: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
    l_Volumen := Self.Volumen;
    try
      TROSerializer(ASerializer).ReadDouble('Volumen', TypInfo.ftDouble, l_Volumen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Volumen']));
    end;
    Self.Volumen := l_Volumen;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Facturado := Self.Facturado;
    try
      TROSerializer(ASerializer).ReadEnumerated('Facturado',System.TypeInfo(boolean), l_Facturado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Facturado']));
    end;
    Self.Facturado := l_Facturado;
    l_BombaID := Self.BombaID;
    try
      TROSerializer(ASerializer).ReadInteger('BombaID', TypInfo.otSLong, l_BombaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'BombaID']));
    end;
    Self.BombaID := l_BombaID;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_FechaConsumo := Self.FechaConsumo;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaConsumo', l_FechaConsumo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaConsumo']));
    end;
    Self.FechaConsumo := l_FechaConsumo;
  end
  else begin
    l_BombaID := Self.BombaID;
    try
      TROSerializer(ASerializer).ReadInteger('BombaID', TypInfo.otSLong, l_BombaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'BombaID']));
    end;
    Self.BombaID := l_BombaID;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_Facturado := Self.Facturado;
    try
      TROSerializer(ASerializer).ReadEnumerated('Facturado',System.TypeInfo(boolean), l_Facturado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Facturado']));
    end;
    Self.Facturado := l_Facturado;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_FechaConsumo := Self.FechaConsumo;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaConsumo', l_FechaConsumo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaConsumo']));
    end;
    Self.FechaConsumo := l_FechaConsumo;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_Volumen := Self.Volumen;
    try
      TROSerializer(ASerializer).ReadDouble('Volumen', TypInfo.ftDouble, l_Volumen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Volumen']));
    end;
    Self.Volumen := l_Volumen;
  end;
end;

procedure TConsumoExpress.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_Facturado: Boolean;
  l_FacturaID: Integer;
  l_FechaConsumo: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Secuencia: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TConsumoExpress);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
    l_Volumen := Self.Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', TypInfo.ftDouble, l_Volumen);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Facturado := Self.Facturado;
    TROSerializer(ASerializer).WriteEnumerated('Facturado',System.TypeInfo(boolean), l_Facturado);
    l_BombaID := Self.BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', TypInfo.otSLong, l_BombaID);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_FechaConsumo := Self.FechaConsumo;
    TROSerializer(ASerializer).WriteDateTime('FechaConsumo', l_FechaConsumo);
  end
  else begin
    l_BombaID := Self.BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', TypInfo.otSLong, l_BombaID);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_Facturado := Self.Facturado;
    TROSerializer(ASerializer).WriteEnumerated('Facturado',System.TypeInfo(boolean), l_Facturado);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_FechaConsumo := Self.FechaConsumo;
    TROSerializer(ASerializer).WriteDateTime('FechaConsumo', l_FechaConsumo);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', TypInfo.otSLong, l_Secuencia);
    l_Volumen := Self.Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', TypInfo.ftDouble, l_Volumen);
  end;
end;

{ TConsumoExpressCollection }
constructor TConsumoExpressCollection.Create;
begin
  inherited Create(TConsumoExpress);
end;

constructor TConsumoExpressCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TConsumoExpressCollection.Add: TConsumoExpress;
begin
  Result := TConsumoExpress(inherited Add);
end;

function TConsumoExpressCollection.GetItems(aIndex: Integer): TConsumoExpress;
begin
  Result := TConsumoExpress(inherited Items[aIndex]);
end;

procedure TConsumoExpressCollection.SetItems(aIndex: Integer; const Value: TConsumoExpress);
begin
  TConsumoExpress(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosCliente }

procedure TDatosCliente.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDatosCliente;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosCliente) then begin
    lSource := LibraryEmpresas_Intf.TDatosCliente(iSource);

    Self.ClienteID := lSource.ClienteID;
    Self.Nombre := lSource.Nombre;
    Self.RFC := lSource.RFC;
    Self.Direccion := lSource.Direccion;
    Self.Telefono := lSource.Telefono;
    Self.CP := lSource.CP;
    Self.Ciudad := lSource.Ciudad;
    Self.Colonia := lSource.Colonia;
    Self.Telefonos := lSource.Telefonos;
    Self.FacturaExpress := lSource.FacturaExpress;
    Self.Saldo := lSource.Saldo;
    Self.MsnError := lSource.MsnError;
  end;
end;

procedure TDatosCliente.ReadComplex(ASerializer: TObject);
var
  l_Ciudad: AnsiString;
  l_ClienteID: Integer;
  l_Colonia: AnsiString;
  l_CP: AnsiString;
  l_Direccion: AnsiString;
  l_FacturaExpress: Boolean;
  l_MsnError: AnsiString;
  l_Nombre: AnsiString;
  l_RFC: AnsiString;
  l_Saldo: Double;
  l_Telefono: AnsiString;
  l_Telefonos: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_RFC := Self.RFC;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFC']));
    end;
    Self.RFC := l_RFC;
    l_Direccion := Self.Direccion;
    try
      TROSerializer(ASerializer).ReadAnsiString('Direccion', l_Direccion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Direccion']));
    end;
    Self.Direccion := l_Direccion;
    l_Telefono := Self.Telefono;
    try
      TROSerializer(ASerializer).ReadAnsiString('Telefono', l_Telefono);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Telefono']));
    end;
    Self.Telefono := l_Telefono;
    l_CP := Self.CP;
    try
      TROSerializer(ASerializer).ReadAnsiString('CP', l_CP);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CP']));
    end;
    Self.CP := l_CP;
    l_Ciudad := Self.Ciudad;
    try
      TROSerializer(ASerializer).ReadAnsiString('Ciudad', l_Ciudad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ciudad']));
    end;
    Self.Ciudad := l_Ciudad;
    l_Colonia := Self.Colonia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Colonia', l_Colonia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Colonia']));
    end;
    Self.Colonia := l_Colonia;
    l_Telefonos := Self.Telefonos;
    try
      TROSerializer(ASerializer).ReadAnsiString('Telefonos', l_Telefonos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Telefonos']));
    end;
    Self.Telefonos := l_Telefonos;
    l_FacturaExpress := Self.FacturaExpress;
    try
      TROSerializer(ASerializer).ReadEnumerated('FacturaExpress',System.TypeInfo(boolean), l_FacturaExpress);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaExpress']));
    end;
    Self.FacturaExpress := l_FacturaExpress;
    l_Saldo := Self.Saldo;
    try
      TROSerializer(ASerializer).ReadDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Saldo']));
    end;
    Self.Saldo := l_Saldo;
    l_MsnError := Self.MsnError;
    try
      TROSerializer(ASerializer).ReadAnsiString('MsnError', l_MsnError);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MsnError']));
    end;
    Self.MsnError := l_MsnError;
  end
  else begin
    l_Ciudad := Self.Ciudad;
    try
      TROSerializer(ASerializer).ReadAnsiString('Ciudad', l_Ciudad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ciudad']));
    end;
    Self.Ciudad := l_Ciudad;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_Colonia := Self.Colonia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Colonia', l_Colonia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Colonia']));
    end;
    Self.Colonia := l_Colonia;
    l_CP := Self.CP;
    try
      TROSerializer(ASerializer).ReadAnsiString('CP', l_CP);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CP']));
    end;
    Self.CP := l_CP;
    l_Direccion := Self.Direccion;
    try
      TROSerializer(ASerializer).ReadAnsiString('Direccion', l_Direccion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Direccion']));
    end;
    Self.Direccion := l_Direccion;
    l_FacturaExpress := Self.FacturaExpress;
    try
      TROSerializer(ASerializer).ReadEnumerated('FacturaExpress',System.TypeInfo(boolean), l_FacturaExpress);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaExpress']));
    end;
    Self.FacturaExpress := l_FacturaExpress;
    l_MsnError := Self.MsnError;
    try
      TROSerializer(ASerializer).ReadAnsiString('MsnError', l_MsnError);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MsnError']));
    end;
    Self.MsnError := l_MsnError;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_RFC := Self.RFC;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFC']));
    end;
    Self.RFC := l_RFC;
    l_Saldo := Self.Saldo;
    try
      TROSerializer(ASerializer).ReadDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Saldo']));
    end;
    Self.Saldo := l_Saldo;
    l_Telefono := Self.Telefono;
    try
      TROSerializer(ASerializer).ReadAnsiString('Telefono', l_Telefono);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Telefono']));
    end;
    Self.Telefono := l_Telefono;
    l_Telefonos := Self.Telefonos;
    try
      TROSerializer(ASerializer).ReadAnsiString('Telefonos', l_Telefonos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Telefonos']));
    end;
    Self.Telefonos := l_Telefonos;
  end;
end;

procedure TDatosCliente.WriteComplex(ASerializer: TObject);
var
  l_Ciudad: AnsiString;
  l_ClienteID: Integer;
  l_Colonia: AnsiString;
  l_CP: AnsiString;
  l_Direccion: AnsiString;
  l_FacturaExpress: Boolean;
  l_MsnError: AnsiString;
  l_Nombre: AnsiString;
  l_RFC: AnsiString;
  l_Saldo: Double;
  l_Telefono: AnsiString;
  l_Telefonos: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosCliente);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RFC := Self.RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Direccion := Self.Direccion;
    TROSerializer(ASerializer).WriteAnsiString('Direccion', l_Direccion);
    l_Telefono := Self.Telefono;
    TROSerializer(ASerializer).WriteAnsiString('Telefono', l_Telefono);
    l_CP := Self.CP;
    TROSerializer(ASerializer).WriteAnsiString('CP', l_CP);
    l_Ciudad := Self.Ciudad;
    TROSerializer(ASerializer).WriteAnsiString('Ciudad', l_Ciudad);
    l_Colonia := Self.Colonia;
    TROSerializer(ASerializer).WriteAnsiString('Colonia', l_Colonia);
    l_Telefonos := Self.Telefonos;
    TROSerializer(ASerializer).WriteAnsiString('Telefonos', l_Telefonos);
    l_FacturaExpress := Self.FacturaExpress;
    TROSerializer(ASerializer).WriteEnumerated('FacturaExpress',System.TypeInfo(boolean), l_FacturaExpress);
    l_Saldo := Self.Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    l_MsnError := Self.MsnError;
    TROSerializer(ASerializer).WriteAnsiString('MsnError', l_MsnError);
  end
  else begin
    l_Ciudad := Self.Ciudad;
    TROSerializer(ASerializer).WriteAnsiString('Ciudad', l_Ciudad);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_Colonia := Self.Colonia;
    TROSerializer(ASerializer).WriteAnsiString('Colonia', l_Colonia);
    l_CP := Self.CP;
    TROSerializer(ASerializer).WriteAnsiString('CP', l_CP);
    l_Direccion := Self.Direccion;
    TROSerializer(ASerializer).WriteAnsiString('Direccion', l_Direccion);
    l_FacturaExpress := Self.FacturaExpress;
    TROSerializer(ASerializer).WriteEnumerated('FacturaExpress',System.TypeInfo(boolean), l_FacturaExpress);
    l_MsnError := Self.MsnError;
    TROSerializer(ASerializer).WriteAnsiString('MsnError', l_MsnError);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RFC := Self.RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Saldo := Self.Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    l_Telefono := Self.Telefono;
    TROSerializer(ASerializer).WriteAnsiString('Telefono', l_Telefono);
    l_Telefonos := Self.Telefonos;
    TROSerializer(ASerializer).WriteAnsiString('Telefonos', l_Telefonos);
  end;
end;

{ TDatosClienteCollection }
constructor TDatosClienteCollection.Create;
begin
  inherited Create(TDatosCliente);
end;

constructor TDatosClienteCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosClienteCollection.Add: TDatosCliente;
begin
  Result := TDatosCliente(inherited Add);
end;

function TDatosClienteCollection.GetItems(aIndex: Integer): TDatosCliente;
begin
  Result := TDatosCliente(inherited Items[aIndex]);
end;

procedure TDatosClienteCollection.SetItems(aIndex: Integer; const Value: TDatosCliente);
begin
  TDatosCliente(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaExpress }

procedure TFacturaExpress.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TFacturaExpress;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TFacturaExpress) then begin
    lSource := LibraryEmpresas_Intf.TFacturaExpress(iSource);

    Self.FacturaID := lSource.FacturaID;
    Self.Serie := lSource.Serie;
    Self.Folio := lSource.Folio;
    Self.Fecha := lSource.Fecha;
    if System.Assigned(lSource.fCliente) then
      Self.Cliente.Assign(lSource.fCliente)
    else
      SysUtils.FreeAndNil(fCliente);
    Self.Subtotal := lSource.Subtotal;
    Self.IVA := lSource.IVA;
    Self.Total := lSource.Total;
    Self.Impuesto := lSource.Impuesto;
    if System.Assigned(lSource.fDetalle) then
      Self.Detalle.Assign(lSource.fDetalle)
    else
      SysUtils.FreeAndNil(fDetalle);
  end;
end;

function TFacturaExpress.GetCliente: TDatosCliente;
begin
  if (fCliente = nil) then fCliente := TDatosCliente.Create();
  Result := fCliente;
end;

function TFacturaExpress.GetDetalle: ADetalleExpress;
begin
  if (fDetalle = nil) then fDetalle := ADetalleExpress.Create();
  Result := fDetalle;
end;

procedure TFacturaExpress.ReadComplex(ASerializer: TObject);
var
  l_Cliente: TDatosCliente;
  l_Detalle: ADetalleExpress;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Impuesto: Double;
  l_IVA: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadInteger('Folio', TypInfo.otSLong, l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Cliente := int_Cliente;
    try
      TROSerializer(ASerializer).ReadStruct('Cliente', TDatosCliente, l_Cliente);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cliente']));
    end;
    if int_Cliente <> l_Cliente then Self.Cliente.Free;
    Self.Cliente := l_Cliente;
    l_Subtotal := Self.Subtotal;
    try
      TROSerializer(ASerializer).ReadDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Subtotal']));
    end;
    Self.Subtotal := l_Subtotal;
    l_IVA := Self.IVA;
    try
      TROSerializer(ASerializer).ReadDouble('IVA', TypInfo.ftDouble, l_IVA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IVA']));
    end;
    Self.IVA := l_IVA;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_Impuesto := Self.Impuesto;
    try
      TROSerializer(ASerializer).ReadDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Impuesto']));
    end;
    Self.Impuesto := l_Impuesto;
    l_Detalle := int_Detalle;
    try
      TROSerializer(ASerializer).ReadArray('Detalle', ADetalleExpress, l_Detalle);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalle']));
    end;
    if int_Detalle <> l_Detalle then Self.Detalle.Free;
    Self.Detalle := l_Detalle;
  end
  else begin
    l_Cliente := int_Cliente;
    try
      TROSerializer(ASerializer).ReadStruct('Cliente', TDatosCliente, l_Cliente);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cliente']));
    end;
    if int_Cliente <> l_Cliente then Cliente.Free;
    Self.Cliente := l_Cliente;
    l_Detalle := int_Detalle;
    try
      TROSerializer(ASerializer).ReadArray('Detalle', ADetalleExpress, l_Detalle);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalle']));
    end;
    if int_Detalle <> l_Detalle then Detalle.Free;
    Self.Detalle := l_Detalle;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadInteger('Folio', TypInfo.otSLong, l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_Impuesto := Self.Impuesto;
    try
      TROSerializer(ASerializer).ReadDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Impuesto']));
    end;
    Self.Impuesto := l_Impuesto;
    l_IVA := Self.IVA;
    try
      TROSerializer(ASerializer).ReadDouble('IVA', TypInfo.ftDouble, l_IVA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IVA']));
    end;
    Self.IVA := l_IVA;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Subtotal := Self.Subtotal;
    try
      TROSerializer(ASerializer).ReadDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Subtotal']));
    end;
    Self.Subtotal := l_Subtotal;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
  end;
end;

procedure TFacturaExpress.WriteComplex(ASerializer: TObject);
var
  l_Cliente: TDatosCliente;
  l_Detalle: ADetalleExpress;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Impuesto: Double;
  l_IVA: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaExpress);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', TypInfo.otSLong, l_Folio);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Cliente := int_Cliente;
    TROSerializer(ASerializer).WriteStruct('Cliente', l_Cliente, TDatosCliente);
    l_Subtotal := Self.Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    l_IVA := Self.IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', TypInfo.ftDouble, l_IVA);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_Impuesto := Self.Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    l_Detalle := int_Detalle;
    TROSerializer(ASerializer).WriteArray('Detalle', l_Detalle, ADetalleExpress);
  end
  else begin
    l_Cliente := int_Cliente;
    TROSerializer(ASerializer).WriteStruct('Cliente', l_Cliente, TDatosCliente);
    l_Detalle := int_Detalle;
    TROSerializer(ASerializer).WriteArray('Detalle', l_Detalle, ADetalleExpress);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', TypInfo.otSLong, l_Folio);
    l_Impuesto := Self.Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    l_IVA := Self.IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', TypInfo.ftDouble, l_IVA);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Self.Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
  end;
end;

{ TFacturaExpressCollection }
constructor TFacturaExpressCollection.Create;
begin
  inherited Create(TFacturaExpress);
end;

constructor TFacturaExpressCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaExpressCollection.Add: TFacturaExpress;
begin
  Result := TFacturaExpress(inherited Add);
end;

function TFacturaExpressCollection.GetItems(aIndex: Integer): TFacturaExpress;
begin
  Result := TFacturaExpress(inherited Items[aIndex]);
end;

procedure TFacturaExpressCollection.SetItems(aIndex: Integer; const Value: TFacturaExpress);
begin
  TFacturaExpress(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleExpress }

procedure TDetalleExpress.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDetalleExpress;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleExpress) then begin
    lSource := LibraryEmpresas_Intf.TDetalleExpress(iSource);

    Self.Codigo := lSource.Codigo;
    Self.Descripcion := lSource.Descripcion;
    Self.Cantidad := lSource.Cantidad;
    Self.Precio := lSource.Precio;
    Self.Importe := lSource.Importe;
  end;
end;

procedure TDetalleExpress.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Codigo: AnsiString;
  l_Descripcion: AnsiString;
  l_Importe: Double;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Codigo := Self.Codigo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Codigo']));
    end;
    Self.Codigo := l_Codigo;
    l_Descripcion := Self.Descripcion;
    try
      TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Descripcion']));
    end;
    Self.Descripcion := l_Descripcion;
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
  end
  else begin
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Codigo := Self.Codigo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Codigo']));
    end;
    Self.Codigo := l_Codigo;
    l_Descripcion := Self.Descripcion;
    try
      TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Descripcion']));
    end;
    Self.Descripcion := l_Descripcion;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
  end;
end;

procedure TDetalleExpress.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Codigo: AnsiString;
  l_Descripcion: AnsiString;
  l_Importe: Double;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleExpress);
    l_Codigo := Self.Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Descripcion := Self.Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
  end
  else begin
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Codigo := Self.Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Descripcion := Self.Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
  end;
end;

{ TDetalleExpressCollection }
constructor TDetalleExpressCollection.Create;
begin
  inherited Create(TDetalleExpress);
end;

constructor TDetalleExpressCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleExpressCollection.Add: TDetalleExpress;
begin
  Result := TDetalleExpress(inherited Add);
end;

function TDetalleExpressCollection.GetItems(aIndex: Integer): TDetalleExpress;
begin
  Result := TDetalleExpress(inherited Items[aIndex]);
end;

procedure TDetalleExpressCollection.LoadFromArray(anArray: ADetalleExpress);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDetalleExpressCollection.SaveToArray(anArray: ADetalleExpress);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDetalleExpress(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDetalleExpressCollection.SetItems(aIndex: Integer; const Value: TDetalleExpress);
begin
  TDetalleExpress(inherited Items[aIndex]).Assign(Value);
end;

{ TValoresTurno }

procedure TValoresTurno.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TValoresTurno;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TValoresTurno) then begin
    lSource := LibraryEmpresas_Intf.TValoresTurno(iSource);

    Self.Fecha := lSource.Fecha;
    Self.Venta := lSource.Venta;
    Self.Efectivo := lSource.Efectivo;
    Self.Credito := lSource.Credito;
    Self.ConsumoInterno := lSource.ConsumoInterno;
    Self.Calibraciones := lSource.Calibraciones;
    Self.Faltantes := lSource.Faltantes;
    Self.Sobrantes := lSource.Sobrantes;
  end;
end;

procedure TValoresTurno.ReadComplex(ASerializer: TObject);
var
  l_Calibraciones: Double;
  l_ConsumoInterno: Double;
  l_Credito: Double;
  l_Efectivo: Double;
  l_Faltantes: Double;
  l_Fecha: DateTime;
  l_Sobrantes: Double;
  l_Venta: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Venta := Self.Venta;
    try
      TROSerializer(ASerializer).ReadDouble('Venta', TypInfo.ftDouble, l_Venta);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Venta']));
    end;
    Self.Venta := l_Venta;
    l_Efectivo := Self.Efectivo;
    try
      TROSerializer(ASerializer).ReadDouble('Efectivo', TypInfo.ftDouble, l_Efectivo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Efectivo']));
    end;
    Self.Efectivo := l_Efectivo;
    l_Credito := Self.Credito;
    try
      TROSerializer(ASerializer).ReadDouble('Credito', TypInfo.ftDouble, l_Credito);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Credito']));
    end;
    Self.Credito := l_Credito;
    l_ConsumoInterno := Self.ConsumoInterno;
    try
      TROSerializer(ASerializer).ReadDouble('ConsumoInterno', TypInfo.ftDouble, l_ConsumoInterno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ConsumoInterno']));
    end;
    Self.ConsumoInterno := l_ConsumoInterno;
    l_Calibraciones := Self.Calibraciones;
    try
      TROSerializer(ASerializer).ReadDouble('Calibraciones', TypInfo.ftDouble, l_Calibraciones);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Calibraciones']));
    end;
    Self.Calibraciones := l_Calibraciones;
    l_Faltantes := Self.Faltantes;
    try
      TROSerializer(ASerializer).ReadDouble('Faltantes', TypInfo.ftDouble, l_Faltantes);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Faltantes']));
    end;
    Self.Faltantes := l_Faltantes;
    l_Sobrantes := Self.Sobrantes;
    try
      TROSerializer(ASerializer).ReadDouble('Sobrantes', TypInfo.ftDouble, l_Sobrantes);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Sobrantes']));
    end;
    Self.Sobrantes := l_Sobrantes;
  end
  else begin
    l_Calibraciones := Self.Calibraciones;
    try
      TROSerializer(ASerializer).ReadDouble('Calibraciones', TypInfo.ftDouble, l_Calibraciones);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Calibraciones']));
    end;
    Self.Calibraciones := l_Calibraciones;
    l_ConsumoInterno := Self.ConsumoInterno;
    try
      TROSerializer(ASerializer).ReadDouble('ConsumoInterno', TypInfo.ftDouble, l_ConsumoInterno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ConsumoInterno']));
    end;
    Self.ConsumoInterno := l_ConsumoInterno;
    l_Credito := Self.Credito;
    try
      TROSerializer(ASerializer).ReadDouble('Credito', TypInfo.ftDouble, l_Credito);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Credito']));
    end;
    Self.Credito := l_Credito;
    l_Efectivo := Self.Efectivo;
    try
      TROSerializer(ASerializer).ReadDouble('Efectivo', TypInfo.ftDouble, l_Efectivo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Efectivo']));
    end;
    Self.Efectivo := l_Efectivo;
    l_Faltantes := Self.Faltantes;
    try
      TROSerializer(ASerializer).ReadDouble('Faltantes', TypInfo.ftDouble, l_Faltantes);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Faltantes']));
    end;
    Self.Faltantes := l_Faltantes;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Sobrantes := Self.Sobrantes;
    try
      TROSerializer(ASerializer).ReadDouble('Sobrantes', TypInfo.ftDouble, l_Sobrantes);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Sobrantes']));
    end;
    Self.Sobrantes := l_Sobrantes;
    l_Venta := Self.Venta;
    try
      TROSerializer(ASerializer).ReadDouble('Venta', TypInfo.ftDouble, l_Venta);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Venta']));
    end;
    Self.Venta := l_Venta;
  end;
end;

procedure TValoresTurno.WriteComplex(ASerializer: TObject);
var
  l_Calibraciones: Double;
  l_ConsumoInterno: Double;
  l_Credito: Double;
  l_Efectivo: Double;
  l_Faltantes: Double;
  l_Fecha: DateTime;
  l_Sobrantes: Double;
  l_Venta: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TValoresTurno);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Venta := Self.Venta;
    TROSerializer(ASerializer).WriteDouble('Venta', TypInfo.ftDouble, l_Venta);
    l_Efectivo := Self.Efectivo;
    TROSerializer(ASerializer).WriteDouble('Efectivo', TypInfo.ftDouble, l_Efectivo);
    l_Credito := Self.Credito;
    TROSerializer(ASerializer).WriteDouble('Credito', TypInfo.ftDouble, l_Credito);
    l_ConsumoInterno := Self.ConsumoInterno;
    TROSerializer(ASerializer).WriteDouble('ConsumoInterno', TypInfo.ftDouble, l_ConsumoInterno);
    l_Calibraciones := Self.Calibraciones;
    TROSerializer(ASerializer).WriteDouble('Calibraciones', TypInfo.ftDouble, l_Calibraciones);
    l_Faltantes := Self.Faltantes;
    TROSerializer(ASerializer).WriteDouble('Faltantes', TypInfo.ftDouble, l_Faltantes);
    l_Sobrantes := Self.Sobrantes;
    TROSerializer(ASerializer).WriteDouble('Sobrantes', TypInfo.ftDouble, l_Sobrantes);
  end
  else begin
    l_Calibraciones := Self.Calibraciones;
    TROSerializer(ASerializer).WriteDouble('Calibraciones', TypInfo.ftDouble, l_Calibraciones);
    l_ConsumoInterno := Self.ConsumoInterno;
    TROSerializer(ASerializer).WriteDouble('ConsumoInterno', TypInfo.ftDouble, l_ConsumoInterno);
    l_Credito := Self.Credito;
    TROSerializer(ASerializer).WriteDouble('Credito', TypInfo.ftDouble, l_Credito);
    l_Efectivo := Self.Efectivo;
    TROSerializer(ASerializer).WriteDouble('Efectivo', TypInfo.ftDouble, l_Efectivo);
    l_Faltantes := Self.Faltantes;
    TROSerializer(ASerializer).WriteDouble('Faltantes', TypInfo.ftDouble, l_Faltantes);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Sobrantes := Self.Sobrantes;
    TROSerializer(ASerializer).WriteDouble('Sobrantes', TypInfo.ftDouble, l_Sobrantes);
    l_Venta := Self.Venta;
    TROSerializer(ASerializer).WriteDouble('Venta', TypInfo.ftDouble, l_Venta);
  end;
end;

{ TValoresTurnoCollection }
constructor TValoresTurnoCollection.Create;
begin
  inherited Create(TValoresTurno);
end;

constructor TValoresTurnoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TValoresTurnoCollection.Add: TValoresTurno;
begin
  Result := TValoresTurno(inherited Add);
end;

function TValoresTurnoCollection.GetItems(aIndex: Integer): TValoresTurno;
begin
  Result := TValoresTurno(inherited Items[aIndex]);
end;

procedure TValoresTurnoCollection.SetItems(aIndex: Integer; const Value: TValoresTurno);
begin
  TValoresTurno(inherited Items[aIndex]).Assign(Value);
end;

{ TOtroProducto }

procedure TOtroProducto.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TOtroProducto;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TOtroProducto) then begin
    lSource := LibraryEmpresas_Intf.TOtroProducto(iSource);

    Self.ID := lSource.ID;
    Self.Nombre := lSource.Nombre;
    Self.Codigo := lSource.Codigo;
    Self.Barras := lSource.Barras;
    Self.Precio := lSource.Precio;
  end;
end;

procedure TOtroProducto.ReadComplex(ASerializer: TObject);
var
  l_Barras: AnsiString;
  l_Codigo: AnsiString;
  l_ID: Integer;
  l_Nombre: AnsiString;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ID := Self.ID;
    try
      TROSerializer(ASerializer).ReadInteger('ID', TypInfo.otSLong, l_ID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ID']));
    end;
    Self.ID := l_ID;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_Codigo := Self.Codigo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Codigo']));
    end;
    Self.Codigo := l_Codigo;
    l_Barras := Self.Barras;
    try
      TROSerializer(ASerializer).ReadAnsiString('Barras', l_Barras);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Barras']));
    end;
    Self.Barras := l_Barras;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
  end
  else begin
    l_Barras := Self.Barras;
    try
      TROSerializer(ASerializer).ReadAnsiString('Barras', l_Barras);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Barras']));
    end;
    Self.Barras := l_Barras;
    l_Codigo := Self.Codigo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Codigo']));
    end;
    Self.Codigo := l_Codigo;
    l_ID := Self.ID;
    try
      TROSerializer(ASerializer).ReadInteger('ID', TypInfo.otSLong, l_ID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ID']));
    end;
    Self.ID := l_ID;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
  end;
end;

procedure TOtroProducto.WriteComplex(ASerializer: TObject);
var
  l_Barras: AnsiString;
  l_Codigo: AnsiString;
  l_ID: Integer;
  l_Nombre: AnsiString;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TOtroProducto);
    l_ID := Self.ID;
    TROSerializer(ASerializer).WriteInteger('ID', TypInfo.otSLong, l_ID);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Codigo := Self.Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Barras := Self.Barras;
    TROSerializer(ASerializer).WriteAnsiString('Barras', l_Barras);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
  end
  else begin
    l_Barras := Self.Barras;
    TROSerializer(ASerializer).WriteAnsiString('Barras', l_Barras);
    l_Codigo := Self.Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_ID := Self.ID;
    TROSerializer(ASerializer).WriteInteger('ID', TypInfo.otSLong, l_ID);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
  end;
end;

{ TOtroProductoCollection }
constructor TOtroProductoCollection.Create;
begin
  inherited Create(TOtroProducto);
end;

constructor TOtroProductoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TOtroProductoCollection.Add: TOtroProducto;
begin
  Result := TOtroProducto(inherited Add);
end;

function TOtroProductoCollection.GetItems(aIndex: Integer): TOtroProducto;
begin
  Result := TOtroProducto(inherited Items[aIndex]);
end;

procedure TOtroProductoCollection.SetItems(aIndex: Integer; const Value: TOtroProducto);
begin
  TOtroProducto(inherited Items[aIndex]).Assign(Value);
end;

{ TAgrupacion }

procedure TAgrupacion.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TAgrupacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TAgrupacion) then begin
    lSource := LibraryEmpresas_Intf.TAgrupacion(iSource);

    Self.AgrupacionID := lSource.AgrupacionID;
    if System.Assigned(lSource.fBombas) then
      Self.Bombas.Assign(lSource.fBombas)
    else
      SysUtils.FreeAndNil(fBombas);
  end;
end;

function TAgrupacion.GetBombas: AAgrupacionBomba;
begin
  if (fBombas = nil) then fBombas := AAgrupacionBomba.Create();
  Result := fBombas;
end;

procedure TAgrupacion.ReadComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_Bombas: AAgrupacionBomba;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_AgrupacionID := Self.AgrupacionID;
    try
      TROSerializer(ASerializer).ReadInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AgrupacionID']));
    end;
    Self.AgrupacionID := l_AgrupacionID;
    l_Bombas := int_Bombas;
    try
      TROSerializer(ASerializer).ReadArray('Bombas', AAgrupacionBomba, l_Bombas);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Bombas']));
    end;
    if int_Bombas <> l_Bombas then Self.Bombas.Free;
    Self.Bombas := l_Bombas;
  end
  else begin
    l_AgrupacionID := Self.AgrupacionID;
    try
      TROSerializer(ASerializer).ReadInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AgrupacionID']));
    end;
    Self.AgrupacionID := l_AgrupacionID;
    l_Bombas := int_Bombas;
    try
      TROSerializer(ASerializer).ReadArray('Bombas', AAgrupacionBomba, l_Bombas);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Bombas']));
    end;
    if int_Bombas <> l_Bombas then Bombas.Free;
    Self.Bombas := l_Bombas;
  end;
end;

procedure TAgrupacion.WriteComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_Bombas: AAgrupacionBomba;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TAgrupacion);
    l_AgrupacionID := Self.AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
    l_Bombas := int_Bombas;
    TROSerializer(ASerializer).WriteArray('Bombas', l_Bombas, AAgrupacionBomba);
  end
  else begin
    l_AgrupacionID := Self.AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
    l_Bombas := int_Bombas;
    TROSerializer(ASerializer).WriteArray('Bombas', l_Bombas, AAgrupacionBomba);
  end;
end;

{ TAgrupacionCollection }
constructor TAgrupacionCollection.Create;
begin
  inherited Create(TAgrupacion);
end;

constructor TAgrupacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TAgrupacionCollection.Add: TAgrupacion;
begin
  Result := TAgrupacion(inherited Add);
end;

function TAgrupacionCollection.GetItems(aIndex: Integer): TAgrupacion;
begin
  Result := TAgrupacion(inherited Items[aIndex]);
end;

procedure TAgrupacionCollection.LoadFromArray(anArray: AAgrupacion);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TAgrupacionCollection.SaveToArray(anArray: AAgrupacion);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TAgrupacion(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TAgrupacionCollection.SetItems(aIndex: Integer; const Value: TAgrupacion);
begin
  TAgrupacion(inherited Items[aIndex]).Assign(Value);
end;

{ TSagarpa }

procedure TSagarpa.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TSagarpa;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TSagarpa) then begin
    lSource := LibraryEmpresas_Intf.TSagarpa(iSource);

    Self.ClienteSagarpa := lSource.ClienteSagarpa;
    Self.ClienteSagarpaPemex := lSource.ClienteSagarpaPemex;
  end;
end;

procedure TSagarpa.ReadComplex(ASerializer: TObject);
var
  l_ClienteSagarpa: Integer;
  l_ClienteSagarpaPemex: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteSagarpa := Self.ClienteSagarpa;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteSagarpa', TypInfo.otSLong, l_ClienteSagarpa);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteSagarpa']));
    end;
    Self.ClienteSagarpa := l_ClienteSagarpa;
    l_ClienteSagarpaPemex := Self.ClienteSagarpaPemex;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteSagarpaPemex', TypInfo.otSLong, l_ClienteSagarpaPemex);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteSagarpaPemex']));
    end;
    Self.ClienteSagarpaPemex := l_ClienteSagarpaPemex;
  end
  else begin
    l_ClienteSagarpa := Self.ClienteSagarpa;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteSagarpa', TypInfo.otSLong, l_ClienteSagarpa);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteSagarpa']));
    end;
    Self.ClienteSagarpa := l_ClienteSagarpa;
    l_ClienteSagarpaPemex := Self.ClienteSagarpaPemex;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteSagarpaPemex', TypInfo.otSLong, l_ClienteSagarpaPemex);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteSagarpaPemex']));
    end;
    Self.ClienteSagarpaPemex := l_ClienteSagarpaPemex;
  end;
end;

procedure TSagarpa.WriteComplex(ASerializer: TObject);
var
  l_ClienteSagarpa: Integer;
  l_ClienteSagarpaPemex: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TSagarpa);
    l_ClienteSagarpa := Self.ClienteSagarpa;
    TROSerializer(ASerializer).WriteInteger('ClienteSagarpa', TypInfo.otSLong, l_ClienteSagarpa);
    l_ClienteSagarpaPemex := Self.ClienteSagarpaPemex;
    TROSerializer(ASerializer).WriteInteger('ClienteSagarpaPemex', TypInfo.otSLong, l_ClienteSagarpaPemex);
  end
  else begin
    l_ClienteSagarpa := Self.ClienteSagarpa;
    TROSerializer(ASerializer).WriteInteger('ClienteSagarpa', TypInfo.otSLong, l_ClienteSagarpa);
    l_ClienteSagarpaPemex := Self.ClienteSagarpaPemex;
    TROSerializer(ASerializer).WriteInteger('ClienteSagarpaPemex', TypInfo.otSLong, l_ClienteSagarpaPemex);
  end;
end;

{ TSagarpaCollection }
constructor TSagarpaCollection.Create;
begin
  inherited Create(TSagarpa);
end;

constructor TSagarpaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TSagarpaCollection.Add: TSagarpa;
begin
  Result := TSagarpa(inherited Add);
end;

function TSagarpaCollection.GetItems(aIndex: Integer): TSagarpa;
begin
  Result := TSagarpa(inherited Items[aIndex]);
end;

procedure TSagarpaCollection.SetItems(aIndex: Integer; const Value: TSagarpa);
begin
  TSagarpa(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosPuntos }

procedure TDatosPuntos.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDatosPuntos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosPuntos) then begin
    lSource := LibraryEmpresas_Intf.TDatosPuntos(iSource);

    Self.ClienteID := lSource.ClienteID;
    Self.ApellidoPaterno := lSource.ApellidoPaterno;
    Self.ApellidoMaterno := lSource.ApellidoMaterno;
    Self.Nombres := lSource.Nombres;
    Self.email := lSource.email;
    Self.Nacimiento := lSource.Nacimiento;
    Self.Referencia := lSource.Referencia;
    Self.Telefonos := lSource.Telefonos;
    Self.FacturaExpress := lSource.FacturaExpress;
    Self.PuntosCategoriaID := lSource.PuntosCategoriaID;
    Self.Sexo := lSource.Sexo;
    Self.FechaRegistro := lSource.FechaRegistro;
    Self.UsuarioID := lSource.UsuarioID;
    Self.PuntosClubID := lSource.PuntosClubID;
  end;
end;

procedure TDatosPuntos.ReadComplex(ASerializer: TObject);
var
  l_ApellidoMaterno: AnsiString;
  l_ApellidoPaterno: AnsiString;
  l_ClienteID: Integer;
  l_email: AnsiString;
  l_FacturaExpress: Boolean;
  l_FechaRegistro: DateTime;
  l_Nacimiento: DateTime;
  l_Nombres: AnsiString;
  l_PuntosCategoriaID: Integer;
  l_PuntosClubID: Integer;
  l_Referencia: AnsiString;
  l_Sexo: Integer;
  l_Telefonos: AnsiString;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_ApellidoPaterno := Self.ApellidoPaterno;
    try
      TROSerializer(ASerializer).ReadAnsiString('ApellidoPaterno', l_ApellidoPaterno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ApellidoPaterno']));
    end;
    Self.ApellidoPaterno := l_ApellidoPaterno;
    l_ApellidoMaterno := Self.ApellidoMaterno;
    try
      TROSerializer(ASerializer).ReadAnsiString('ApellidoMaterno', l_ApellidoMaterno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ApellidoMaterno']));
    end;
    Self.ApellidoMaterno := l_ApellidoMaterno;
    l_Nombres := Self.Nombres;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombres', l_Nombres);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombres']));
    end;
    Self.Nombres := l_Nombres;
    l_email := Self.email;
    try
      TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'email']));
    end;
    Self.email := l_email;
    l_Nacimiento := Self.Nacimiento;
    try
      TROSerializer(ASerializer).ReadDateTime('Nacimiento', l_Nacimiento);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nacimiento']));
    end;
    Self.Nacimiento := l_Nacimiento;
    l_Referencia := Self.Referencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Referencia']));
    end;
    Self.Referencia := l_Referencia;
    l_Telefonos := Self.Telefonos;
    try
      TROSerializer(ASerializer).ReadAnsiString('Telefonos', l_Telefonos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Telefonos']));
    end;
    Self.Telefonos := l_Telefonos;
    l_FacturaExpress := Self.FacturaExpress;
    try
      TROSerializer(ASerializer).ReadEnumerated('FacturaExpress',System.TypeInfo(boolean), l_FacturaExpress);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaExpress']));
    end;
    Self.FacturaExpress := l_FacturaExpress;
    l_PuntosCategoriaID := Self.PuntosCategoriaID;
    try
      TROSerializer(ASerializer).ReadInteger('PuntosCategoriaID', TypInfo.otSLong, l_PuntosCategoriaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PuntosCategoriaID']));
    end;
    Self.PuntosCategoriaID := l_PuntosCategoriaID;
    l_Sexo := Self.Sexo;
    try
      TROSerializer(ASerializer).ReadInteger('Sexo', TypInfo.otSLong, l_Sexo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Sexo']));
    end;
    Self.Sexo := l_Sexo;
    l_FechaRegistro := Self.FechaRegistro;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaRegistro', l_FechaRegistro);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaRegistro']));
    end;
    Self.FechaRegistro := l_FechaRegistro;
    l_UsuarioID := Self.UsuarioID;
    try
      TROSerializer(ASerializer).ReadInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'UsuarioID']));
    end;
    Self.UsuarioID := l_UsuarioID;
    l_PuntosClubID := Self.PuntosClubID;
    try
      TROSerializer(ASerializer).ReadInteger('PuntosClubID', TypInfo.otSLong, l_PuntosClubID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PuntosClubID']));
    end;
    Self.PuntosClubID := l_PuntosClubID;
  end
  else begin
    l_ApellidoMaterno := Self.ApellidoMaterno;
    try
      TROSerializer(ASerializer).ReadAnsiString('ApellidoMaterno', l_ApellidoMaterno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ApellidoMaterno']));
    end;
    Self.ApellidoMaterno := l_ApellidoMaterno;
    l_ApellidoPaterno := Self.ApellidoPaterno;
    try
      TROSerializer(ASerializer).ReadAnsiString('ApellidoPaterno', l_ApellidoPaterno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ApellidoPaterno']));
    end;
    Self.ApellidoPaterno := l_ApellidoPaterno;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_email := Self.email;
    try
      TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'email']));
    end;
    Self.email := l_email;
    l_FacturaExpress := Self.FacturaExpress;
    try
      TROSerializer(ASerializer).ReadEnumerated('FacturaExpress',System.TypeInfo(boolean), l_FacturaExpress);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaExpress']));
    end;
    Self.FacturaExpress := l_FacturaExpress;
    l_FechaRegistro := Self.FechaRegistro;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaRegistro', l_FechaRegistro);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaRegistro']));
    end;
    Self.FechaRegistro := l_FechaRegistro;
    l_Nacimiento := Self.Nacimiento;
    try
      TROSerializer(ASerializer).ReadDateTime('Nacimiento', l_Nacimiento);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nacimiento']));
    end;
    Self.Nacimiento := l_Nacimiento;
    l_Nombres := Self.Nombres;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombres', l_Nombres);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombres']));
    end;
    Self.Nombres := l_Nombres;
    l_PuntosCategoriaID := Self.PuntosCategoriaID;
    try
      TROSerializer(ASerializer).ReadInteger('PuntosCategoriaID', TypInfo.otSLong, l_PuntosCategoriaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PuntosCategoriaID']));
    end;
    Self.PuntosCategoriaID := l_PuntosCategoriaID;
    l_PuntosClubID := Self.PuntosClubID;
    try
      TROSerializer(ASerializer).ReadInteger('PuntosClubID', TypInfo.otSLong, l_PuntosClubID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PuntosClubID']));
    end;
    Self.PuntosClubID := l_PuntosClubID;
    l_Referencia := Self.Referencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Referencia']));
    end;
    Self.Referencia := l_Referencia;
    l_Sexo := Self.Sexo;
    try
      TROSerializer(ASerializer).ReadInteger('Sexo', TypInfo.otSLong, l_Sexo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Sexo']));
    end;
    Self.Sexo := l_Sexo;
    l_Telefonos := Self.Telefonos;
    try
      TROSerializer(ASerializer).ReadAnsiString('Telefonos', l_Telefonos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Telefonos']));
    end;
    Self.Telefonos := l_Telefonos;
    l_UsuarioID := Self.UsuarioID;
    try
      TROSerializer(ASerializer).ReadInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'UsuarioID']));
    end;
    Self.UsuarioID := l_UsuarioID;
  end;
end;

procedure TDatosPuntos.WriteComplex(ASerializer: TObject);
var
  l_ApellidoMaterno: AnsiString;
  l_ApellidoPaterno: AnsiString;
  l_ClienteID: Integer;
  l_email: AnsiString;
  l_FacturaExpress: Boolean;
  l_FechaRegistro: DateTime;
  l_Nacimiento: DateTime;
  l_Nombres: AnsiString;
  l_PuntosCategoriaID: Integer;
  l_PuntosClubID: Integer;
  l_Referencia: AnsiString;
  l_Sexo: Integer;
  l_Telefonos: AnsiString;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosPuntos);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_ApellidoPaterno := Self.ApellidoPaterno;
    TROSerializer(ASerializer).WriteAnsiString('ApellidoPaterno', l_ApellidoPaterno);
    l_ApellidoMaterno := Self.ApellidoMaterno;
    TROSerializer(ASerializer).WriteAnsiString('ApellidoMaterno', l_ApellidoMaterno);
    l_Nombres := Self.Nombres;
    TROSerializer(ASerializer).WriteAnsiString('Nombres', l_Nombres);
    l_email := Self.email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
    l_Nacimiento := Self.Nacimiento;
    TROSerializer(ASerializer).WriteDateTime('Nacimiento', l_Nacimiento);
    l_Referencia := Self.Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Telefonos := Self.Telefonos;
    TROSerializer(ASerializer).WriteAnsiString('Telefonos', l_Telefonos);
    l_FacturaExpress := Self.FacturaExpress;
    TROSerializer(ASerializer).WriteEnumerated('FacturaExpress',System.TypeInfo(boolean), l_FacturaExpress);
    l_PuntosCategoriaID := Self.PuntosCategoriaID;
    TROSerializer(ASerializer).WriteInteger('PuntosCategoriaID', TypInfo.otSLong, l_PuntosCategoriaID);
    l_Sexo := Self.Sexo;
    TROSerializer(ASerializer).WriteInteger('Sexo', TypInfo.otSLong, l_Sexo);
    l_FechaRegistro := Self.FechaRegistro;
    TROSerializer(ASerializer).WriteDateTime('FechaRegistro', l_FechaRegistro);
    l_UsuarioID := Self.UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
    l_PuntosClubID := Self.PuntosClubID;
    TROSerializer(ASerializer).WriteInteger('PuntosClubID', TypInfo.otSLong, l_PuntosClubID);
  end
  else begin
    l_ApellidoMaterno := Self.ApellidoMaterno;
    TROSerializer(ASerializer).WriteAnsiString('ApellidoMaterno', l_ApellidoMaterno);
    l_ApellidoPaterno := Self.ApellidoPaterno;
    TROSerializer(ASerializer).WriteAnsiString('ApellidoPaterno', l_ApellidoPaterno);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_email := Self.email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
    l_FacturaExpress := Self.FacturaExpress;
    TROSerializer(ASerializer).WriteEnumerated('FacturaExpress',System.TypeInfo(boolean), l_FacturaExpress);
    l_FechaRegistro := Self.FechaRegistro;
    TROSerializer(ASerializer).WriteDateTime('FechaRegistro', l_FechaRegistro);
    l_Nacimiento := Self.Nacimiento;
    TROSerializer(ASerializer).WriteDateTime('Nacimiento', l_Nacimiento);
    l_Nombres := Self.Nombres;
    TROSerializer(ASerializer).WriteAnsiString('Nombres', l_Nombres);
    l_PuntosCategoriaID := Self.PuntosCategoriaID;
    TROSerializer(ASerializer).WriteInteger('PuntosCategoriaID', TypInfo.otSLong, l_PuntosCategoriaID);
    l_PuntosClubID := Self.PuntosClubID;
    TROSerializer(ASerializer).WriteInteger('PuntosClubID', TypInfo.otSLong, l_PuntosClubID);
    l_Referencia := Self.Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Sexo := Self.Sexo;
    TROSerializer(ASerializer).WriteInteger('Sexo', TypInfo.otSLong, l_Sexo);
    l_Telefonos := Self.Telefonos;
    TROSerializer(ASerializer).WriteAnsiString('Telefonos', l_Telefonos);
    l_UsuarioID := Self.UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
  end;
end;

{ TDatosPuntosCollection }
constructor TDatosPuntosCollection.Create;
begin
  inherited Create(TDatosPuntos);
end;

constructor TDatosPuntosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosPuntosCollection.Add: TDatosPuntos;
begin
  Result := TDatosPuntos(inherited Add);
end;

function TDatosPuntosCollection.GetItems(aIndex: Integer): TDatosPuntos;
begin
  Result := TDatosPuntos(inherited Items[aIndex]);
end;

procedure TDatosPuntosCollection.SetItems(aIndex: Integer; const Value: TDatosPuntos);
begin
  TDatosPuntos(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosCelular }

procedure TDatosCelular.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDatosCelular;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosCelular) then begin
    lSource := LibraryEmpresas_Intf.TDatosCelular(iSource);

    Self.Telefono := lSource.Telefono;
    Self.Compania := lSource.Compania;
    Self.Descripcion := lSource.Descripcion;
  end;
end;

procedure TDatosCelular.ReadComplex(ASerializer: TObject);
var
  l_Compania: Integer;
  l_Descripcion: AnsiString;
  l_Telefono: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Telefono := Self.Telefono;
    try
      TROSerializer(ASerializer).ReadAnsiString('Telefono', l_Telefono);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Telefono']));
    end;
    Self.Telefono := l_Telefono;
    l_Compania := Self.Compania;
    try
      TROSerializer(ASerializer).ReadInteger('Compania', TypInfo.otSLong, l_Compania);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Compania']));
    end;
    Self.Compania := l_Compania;
    l_Descripcion := Self.Descripcion;
    try
      TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Descripcion']));
    end;
    Self.Descripcion := l_Descripcion;
  end
  else begin
    l_Compania := Self.Compania;
    try
      TROSerializer(ASerializer).ReadInteger('Compania', TypInfo.otSLong, l_Compania);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Compania']));
    end;
    Self.Compania := l_Compania;
    l_Descripcion := Self.Descripcion;
    try
      TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Descripcion']));
    end;
    Self.Descripcion := l_Descripcion;
    l_Telefono := Self.Telefono;
    try
      TROSerializer(ASerializer).ReadAnsiString('Telefono', l_Telefono);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Telefono']));
    end;
    Self.Telefono := l_Telefono;
  end;
end;

procedure TDatosCelular.WriteComplex(ASerializer: TObject);
var
  l_Compania: Integer;
  l_Descripcion: AnsiString;
  l_Telefono: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosCelular);
    l_Telefono := Self.Telefono;
    TROSerializer(ASerializer).WriteAnsiString('Telefono', l_Telefono);
    l_Compania := Self.Compania;
    TROSerializer(ASerializer).WriteInteger('Compania', TypInfo.otSLong, l_Compania);
    l_Descripcion := Self.Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
  end
  else begin
    l_Compania := Self.Compania;
    TROSerializer(ASerializer).WriteInteger('Compania', TypInfo.otSLong, l_Compania);
    l_Descripcion := Self.Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_Telefono := Self.Telefono;
    TROSerializer(ASerializer).WriteAnsiString('Telefono', l_Telefono);
  end;
end;

{ TDatosCelularCollection }
constructor TDatosCelularCollection.Create;
begin
  inherited Create(TDatosCelular);
end;

constructor TDatosCelularCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosCelularCollection.Add: TDatosCelular;
begin
  Result := TDatosCelular(inherited Add);
end;

function TDatosCelularCollection.GetItems(aIndex: Integer): TDatosCelular;
begin
  Result := TDatosCelular(inherited Items[aIndex]);
end;

procedure TDatosCelularCollection.LoadFromArray(anArray: ADatosCelular);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDatosCelularCollection.SaveToArray(anArray: ADatosCelular);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDatosCelular(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDatosCelularCollection.SetItems(aIndex: Integer; const Value: TDatosCelular);
begin
  TDatosCelular(inherited Items[aIndex]).Assign(Value);
end;

{ TEntregaPremio }

procedure TEntregaPremio.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TEntregaPremio;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TEntregaPremio) then begin
    lSource := LibraryEmpresas_Intf.TEntregaPremio(iSource);

    Self.ClienteID := lSource.ClienteID;
    Self.Cliente := lSource.Cliente;
    Self.Premio := lSource.Premio;
    Self.Cantidad := lSource.Cantidad;
    Self.Puntos := lSource.Puntos;
    Self.Saldo := lSource.Saldo;
    Self.Mensaje := lSource.Mensaje;
    Self.Valido := lSource.Valido;
  end;
end;

procedure TEntregaPremio.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Integer;
  l_Cliente: AnsiString;
  l_ClienteID: Integer;
  l_Mensaje: AnsiString;
  l_Premio: AnsiString;
  l_Puntos: Double;
  l_Saldo: Double;
  l_Valido: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_Cliente := Self.Cliente;
    try
      TROSerializer(ASerializer).ReadAnsiString('Cliente', l_Cliente);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cliente']));
    end;
    Self.Cliente := l_Cliente;
    l_Premio := Self.Premio;
    try
      TROSerializer(ASerializer).ReadAnsiString('Premio', l_Premio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Premio']));
    end;
    Self.Premio := l_Premio;
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadInteger('Cantidad', TypInfo.otSLong, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Puntos := Self.Puntos;
    try
      TROSerializer(ASerializer).ReadDouble('Puntos', TypInfo.ftDouble, l_Puntos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Puntos']));
    end;
    Self.Puntos := l_Puntos;
    l_Saldo := Self.Saldo;
    try
      TROSerializer(ASerializer).ReadDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Saldo']));
    end;
    Self.Saldo := l_Saldo;
    l_Mensaje := Self.Mensaje;
    try
      TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Mensaje']));
    end;
    Self.Mensaje := l_Mensaje;
    l_Valido := Self.Valido;
    try
      TROSerializer(ASerializer).ReadEnumerated('Valido',System.TypeInfo(boolean), l_Valido);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Valido']));
    end;
    Self.Valido := l_Valido;
  end
  else begin
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadInteger('Cantidad', TypInfo.otSLong, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Cliente := Self.Cliente;
    try
      TROSerializer(ASerializer).ReadAnsiString('Cliente', l_Cliente);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cliente']));
    end;
    Self.Cliente := l_Cliente;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_Mensaje := Self.Mensaje;
    try
      TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Mensaje']));
    end;
    Self.Mensaje := l_Mensaje;
    l_Premio := Self.Premio;
    try
      TROSerializer(ASerializer).ReadAnsiString('Premio', l_Premio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Premio']));
    end;
    Self.Premio := l_Premio;
    l_Puntos := Self.Puntos;
    try
      TROSerializer(ASerializer).ReadDouble('Puntos', TypInfo.ftDouble, l_Puntos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Puntos']));
    end;
    Self.Puntos := l_Puntos;
    l_Saldo := Self.Saldo;
    try
      TROSerializer(ASerializer).ReadDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Saldo']));
    end;
    Self.Saldo := l_Saldo;
    l_Valido := Self.Valido;
    try
      TROSerializer(ASerializer).ReadEnumerated('Valido',System.TypeInfo(boolean), l_Valido);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Valido']));
    end;
    Self.Valido := l_Valido;
  end;
end;

procedure TEntregaPremio.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Integer;
  l_Cliente: AnsiString;
  l_ClienteID: Integer;
  l_Mensaje: AnsiString;
  l_Premio: AnsiString;
  l_Puntos: Double;
  l_Saldo: Double;
  l_Valido: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TEntregaPremio);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_Cliente := Self.Cliente;
    TROSerializer(ASerializer).WriteAnsiString('Cliente', l_Cliente);
    l_Premio := Self.Premio;
    TROSerializer(ASerializer).WriteAnsiString('Premio', l_Premio);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteInteger('Cantidad', TypInfo.otSLong, l_Cantidad);
    l_Puntos := Self.Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', TypInfo.ftDouble, l_Puntos);
    l_Saldo := Self.Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    l_Mensaje := Self.Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Valido := Self.Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',System.TypeInfo(boolean), l_Valido);
  end
  else begin
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteInteger('Cantidad', TypInfo.otSLong, l_Cantidad);
    l_Cliente := Self.Cliente;
    TROSerializer(ASerializer).WriteAnsiString('Cliente', l_Cliente);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_Mensaje := Self.Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Premio := Self.Premio;
    TROSerializer(ASerializer).WriteAnsiString('Premio', l_Premio);
    l_Puntos := Self.Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', TypInfo.ftDouble, l_Puntos);
    l_Saldo := Self.Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    l_Valido := Self.Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',System.TypeInfo(boolean), l_Valido);
  end;
end;

{ TEntregaPremioCollection }
constructor TEntregaPremioCollection.Create;
begin
  inherited Create(TEntregaPremio);
end;

constructor TEntregaPremioCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TEntregaPremioCollection.Add: TEntregaPremio;
begin
  Result := TEntregaPremio(inherited Add);
end;

function TEntregaPremioCollection.GetItems(aIndex: Integer): TEntregaPremio;
begin
  Result := TEntregaPremio(inherited Items[aIndex]);
end;

procedure TEntregaPremioCollection.SetItems(aIndex: Integer; const Value: TEntregaPremio);
begin
  TEntregaPremio(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosPremio }

procedure TDatosPremio.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDatosPremio;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosPremio) then begin
    lSource := LibraryEmpresas_Intf.TDatosPremio(iSource);

    Self.PremioID := lSource.PremioID;
    Self.Nombre := lSource.Nombre;
    Self.Puntos := lSource.Puntos;
  end;
end;

procedure TDatosPremio.ReadComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_PremioID: Integer;
  l_Puntos: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_PremioID := Self.PremioID;
    try
      TROSerializer(ASerializer).ReadInteger('PremioID', TypInfo.otSLong, l_PremioID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PremioID']));
    end;
    Self.PremioID := l_PremioID;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_Puntos := Self.Puntos;
    try
      TROSerializer(ASerializer).ReadDouble('Puntos', TypInfo.ftDouble, l_Puntos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Puntos']));
    end;
    Self.Puntos := l_Puntos;
  end
  else begin
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_PremioID := Self.PremioID;
    try
      TROSerializer(ASerializer).ReadInteger('PremioID', TypInfo.otSLong, l_PremioID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PremioID']));
    end;
    Self.PremioID := l_PremioID;
    l_Puntos := Self.Puntos;
    try
      TROSerializer(ASerializer).ReadDouble('Puntos', TypInfo.ftDouble, l_Puntos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Puntos']));
    end;
    Self.Puntos := l_Puntos;
  end;
end;

procedure TDatosPremio.WriteComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_PremioID: Integer;
  l_Puntos: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosPremio);
    l_PremioID := Self.PremioID;
    TROSerializer(ASerializer).WriteInteger('PremioID', TypInfo.otSLong, l_PremioID);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Puntos := Self.Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', TypInfo.ftDouble, l_Puntos);
  end
  else begin
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_PremioID := Self.PremioID;
    TROSerializer(ASerializer).WriteInteger('PremioID', TypInfo.otSLong, l_PremioID);
    l_Puntos := Self.Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', TypInfo.ftDouble, l_Puntos);
  end;
end;

{ TDatosPremioCollection }
constructor TDatosPremioCollection.Create;
begin
  inherited Create(TDatosPremio);
end;

constructor TDatosPremioCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosPremioCollection.Add: TDatosPremio;
begin
  Result := TDatosPremio(inherited Add);
end;

function TDatosPremioCollection.GetItems(aIndex: Integer): TDatosPremio;
begin
  Result := TDatosPremio(inherited Items[aIndex]);
end;

procedure TDatosPremioCollection.SetItems(aIndex: Integer; const Value: TDatosPremio);
begin
  TDatosPremio(inherited Items[aIndex]).Assign(Value);
end;

{ TConfirmaEnvioA }

procedure TConfirmaEnvioA.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TConfirmaEnvioA;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TConfirmaEnvioA) then begin
    lSource := LibraryEmpresas_Intf.TConfirmaEnvioA(iSource);

    if System.Assigned(lSource.fConsumo) then
      Self.Consumo.Assign(lSource.fConsumo)
    else
      SysUtils.FreeAndNil(fConsumo);
    Self.Host := lSource.Host;
    Self.Fecha := lSource.Fecha;
  end;
end;

function TConfirmaEnvioA.GetConsumo: TConsumoExpress;
begin
  if (fConsumo = nil) then fConsumo := TConsumoExpress.Create();
  Result := fConsumo;
end;

procedure TConfirmaEnvioA.ReadComplex(ASerializer: TObject);
var
  l_Consumo: TConsumoExpress;
  l_Fecha: DateTime;
  l_Host: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Consumo := int_Consumo;
    try
      TROSerializer(ASerializer).ReadStruct('Consumo', TConsumoExpress, l_Consumo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Consumo']));
    end;
    if int_Consumo <> l_Consumo then Self.Consumo.Free;
    Self.Consumo := l_Consumo;
    l_Host := Self.Host;
    try
      TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Host']));
    end;
    Self.Host := l_Host;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
  end
  else begin
    l_Consumo := int_Consumo;
    try
      TROSerializer(ASerializer).ReadStruct('Consumo', TConsumoExpress, l_Consumo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Consumo']));
    end;
    if int_Consumo <> l_Consumo then Consumo.Free;
    Self.Consumo := l_Consumo;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Host := Self.Host;
    try
      TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Host']));
    end;
    Self.Host := l_Host;
  end;
end;

procedure TConfirmaEnvioA.WriteComplex(ASerializer: TObject);
var
  l_Consumo: TConsumoExpress;
  l_Fecha: DateTime;
  l_Host: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TConfirmaEnvioA);
    l_Consumo := int_Consumo;
    TROSerializer(ASerializer).WriteStruct('Consumo', l_Consumo, TConsumoExpress);
    l_Host := Self.Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
  end
  else begin
    l_Consumo := int_Consumo;
    TROSerializer(ASerializer).WriteStruct('Consumo', l_Consumo, TConsumoExpress);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Host := Self.Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
  end;
end;

{ TConfirmaEnvioACollection }
constructor TConfirmaEnvioACollection.Create;
begin
  inherited Create(TConfirmaEnvioA);
end;

constructor TConfirmaEnvioACollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TConfirmaEnvioACollection.Add: TConfirmaEnvioA;
begin
  Result := TConfirmaEnvioA(inherited Add);
end;

function TConfirmaEnvioACollection.GetItems(aIndex: Integer): TConfirmaEnvioA;
begin
  Result := TConfirmaEnvioA(inherited Items[aIndex]);
end;

procedure TConfirmaEnvioACollection.SetItems(aIndex: Integer; const Value: TConfirmaEnvioA);
begin
  TConfirmaEnvioA(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosCerrarLiquidacion }

procedure TDatosCerrarLiquidacion.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDatosCerrarLiquidacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosCerrarLiquidacion) then begin
    lSource := LibraryEmpresas_Intf.TDatosCerrarLiquidacion(iSource);

    Self.LiquidacionID := lSource.LiquidacionID;
    Self.VentasTotales := lSource.VentasTotales;
    Self.Entregado := lSource.Entregado;
    Self.Diferencia := lSource.Diferencia;
    if System.Assigned(lSource.fDespachadores) then
      Self.Despachadores.Assign(lSource.fDespachadores)
    else
      SysUtils.FreeAndNil(fDespachadores);
    if System.Assigned(lSource.fDetalle) then
      Self.Detalle.Assign(lSource.fDetalle)
    else
      SysUtils.FreeAndNil(fDetalle);
    if System.Assigned(lSource.fTipoValor) then
      Self.TipoValor.Assign(lSource.fTipoValor)
    else
      SysUtils.FreeAndNil(fTipoValor);
    Self.EstacionID := lSource.EstacionID;
    Self.TurnoID := lSource.TurnoID;
  end;
end;

function TDatosCerrarLiquidacion.GetDespachadores: ADespachadorLiquidacion;
begin
  if (fDespachadores = nil) then fDespachadores := ADespachadorLiquidacion.Create();
  Result := fDespachadores;
end;

function TDatosCerrarLiquidacion.GetDetalle: ADetalleLiquidacion;
begin
  if (fDetalle = nil) then fDetalle := ADetalleLiquidacion.Create();
  Result := fDetalle;
end;

function TDatosCerrarLiquidacion.GetTipoValor: ATipoValor;
begin
  if (fTipoValor = nil) then fTipoValor := ATipoValor.Create();
  Result := fTipoValor;
end;

procedure TDatosCerrarLiquidacion.ReadComplex(ASerializer: TObject);
var
  l_Despachadores: ADespachadorLiquidacion;
  l_Detalle: ADetalleLiquidacion;
  l_Diferencia: Double;
  l_Entregado: Double;
  l_EstacionID: Integer;
  l_LiquidacionID: Integer;
  l_TipoValor: ATipoValor;
  l_TurnoID: Integer;
  l_VentasTotales: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_LiquidacionID := Self.LiquidacionID;
    try
      TROSerializer(ASerializer).ReadInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionID']));
    end;
    Self.LiquidacionID := l_LiquidacionID;
    l_VentasTotales := Self.VentasTotales;
    try
      TROSerializer(ASerializer).ReadDouble('VentasTotales', TypInfo.ftDouble, l_VentasTotales);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'VentasTotales']));
    end;
    Self.VentasTotales := l_VentasTotales;
    l_Entregado := Self.Entregado;
    try
      TROSerializer(ASerializer).ReadDouble('Entregado', TypInfo.ftDouble, l_Entregado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Entregado']));
    end;
    Self.Entregado := l_Entregado;
    l_Diferencia := Self.Diferencia;
    try
      TROSerializer(ASerializer).ReadDouble('Diferencia', TypInfo.ftDouble, l_Diferencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Diferencia']));
    end;
    Self.Diferencia := l_Diferencia;
    l_Despachadores := int_Despachadores;
    try
      TROSerializer(ASerializer).ReadArray('Despachadores', ADespachadorLiquidacion, l_Despachadores);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Despachadores']));
    end;
    if int_Despachadores <> l_Despachadores then Self.Despachadores.Free;
    Self.Despachadores := l_Despachadores;
    l_Detalle := int_Detalle;
    try
      TROSerializer(ASerializer).ReadArray('Detalle', ADetalleLiquidacion, l_Detalle);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalle']));
    end;
    if int_Detalle <> l_Detalle then Self.Detalle.Free;
    Self.Detalle := l_Detalle;
    l_TipoValor := int_TipoValor;
    try
      TROSerializer(ASerializer).ReadArray('TipoValor', ATipoValor, l_TipoValor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoValor']));
    end;
    if int_TipoValor <> l_TipoValor then Self.TipoValor.Free;
    Self.TipoValor := l_TipoValor;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_TurnoID := Self.TurnoID;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoID', TypInfo.otSLong, l_TurnoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoID']));
    end;
    Self.TurnoID := l_TurnoID;
  end
  else begin
    l_Despachadores := int_Despachadores;
    try
      TROSerializer(ASerializer).ReadArray('Despachadores', ADespachadorLiquidacion, l_Despachadores);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Despachadores']));
    end;
    if int_Despachadores <> l_Despachadores then Despachadores.Free;
    Self.Despachadores := l_Despachadores;
    l_Detalle := int_Detalle;
    try
      TROSerializer(ASerializer).ReadArray('Detalle', ADetalleLiquidacion, l_Detalle);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalle']));
    end;
    if int_Detalle <> l_Detalle then Detalle.Free;
    Self.Detalle := l_Detalle;
    l_Diferencia := Self.Diferencia;
    try
      TROSerializer(ASerializer).ReadDouble('Diferencia', TypInfo.ftDouble, l_Diferencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Diferencia']));
    end;
    Self.Diferencia := l_Diferencia;
    l_Entregado := Self.Entregado;
    try
      TROSerializer(ASerializer).ReadDouble('Entregado', TypInfo.ftDouble, l_Entregado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Entregado']));
    end;
    Self.Entregado := l_Entregado;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_LiquidacionID := Self.LiquidacionID;
    try
      TROSerializer(ASerializer).ReadInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LiquidacionID']));
    end;
    Self.LiquidacionID := l_LiquidacionID;
    l_TipoValor := int_TipoValor;
    try
      TROSerializer(ASerializer).ReadArray('TipoValor', ATipoValor, l_TipoValor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoValor']));
    end;
    if int_TipoValor <> l_TipoValor then TipoValor.Free;
    Self.TipoValor := l_TipoValor;
    l_TurnoID := Self.TurnoID;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoID', TypInfo.otSLong, l_TurnoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoID']));
    end;
    Self.TurnoID := l_TurnoID;
    l_VentasTotales := Self.VentasTotales;
    try
      TROSerializer(ASerializer).ReadDouble('VentasTotales', TypInfo.ftDouble, l_VentasTotales);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'VentasTotales']));
    end;
    Self.VentasTotales := l_VentasTotales;
  end;
end;

procedure TDatosCerrarLiquidacion.WriteComplex(ASerializer: TObject);
var
  l_Despachadores: ADespachadorLiquidacion;
  l_Detalle: ADetalleLiquidacion;
  l_Diferencia: Double;
  l_Entregado: Double;
  l_EstacionID: Integer;
  l_LiquidacionID: Integer;
  l_TipoValor: ATipoValor;
  l_TurnoID: Integer;
  l_VentasTotales: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosCerrarLiquidacion);
    l_LiquidacionID := Self.LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    l_VentasTotales := Self.VentasTotales;
    TROSerializer(ASerializer).WriteDouble('VentasTotales', TypInfo.ftDouble, l_VentasTotales);
    l_Entregado := Self.Entregado;
    TROSerializer(ASerializer).WriteDouble('Entregado', TypInfo.ftDouble, l_Entregado);
    l_Diferencia := Self.Diferencia;
    TROSerializer(ASerializer).WriteDouble('Diferencia', TypInfo.ftDouble, l_Diferencia);
    l_Despachadores := int_Despachadores;
    TROSerializer(ASerializer).WriteArray('Despachadores', l_Despachadores, ADespachadorLiquidacion);
    l_Detalle := int_Detalle;
    TROSerializer(ASerializer).WriteArray('Detalle', l_Detalle, ADetalleLiquidacion);
    l_TipoValor := int_TipoValor;
    TROSerializer(ASerializer).WriteArray('TipoValor', l_TipoValor, ATipoValor);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_TurnoID := Self.TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', TypInfo.otSLong, l_TurnoID);
  end
  else begin
    l_Despachadores := int_Despachadores;
    TROSerializer(ASerializer).WriteArray('Despachadores', l_Despachadores, ADespachadorLiquidacion);
    l_Detalle := int_Detalle;
    TROSerializer(ASerializer).WriteArray('Detalle', l_Detalle, ADetalleLiquidacion);
    l_Diferencia := Self.Diferencia;
    TROSerializer(ASerializer).WriteDouble('Diferencia', TypInfo.ftDouble, l_Diferencia);
    l_Entregado := Self.Entregado;
    TROSerializer(ASerializer).WriteDouble('Entregado', TypInfo.ftDouble, l_Entregado);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_LiquidacionID := Self.LiquidacionID;
    TROSerializer(ASerializer).WriteInteger('LiquidacionID', TypInfo.otSLong, l_LiquidacionID);
    l_TipoValor := int_TipoValor;
    TROSerializer(ASerializer).WriteArray('TipoValor', l_TipoValor, ATipoValor);
    l_TurnoID := Self.TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', TypInfo.otSLong, l_TurnoID);
    l_VentasTotales := Self.VentasTotales;
    TROSerializer(ASerializer).WriteDouble('VentasTotales', TypInfo.ftDouble, l_VentasTotales);
  end;
end;

{ TDatosCerrarLiquidacionCollection }
constructor TDatosCerrarLiquidacionCollection.Create;
begin
  inherited Create(TDatosCerrarLiquidacion);
end;

constructor TDatosCerrarLiquidacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosCerrarLiquidacionCollection.Add: TDatosCerrarLiquidacion;
begin
  Result := TDatosCerrarLiquidacion(inherited Add);
end;

function TDatosCerrarLiquidacionCollection.GetItems(aIndex: Integer): TDatosCerrarLiquidacion;
begin
  Result := TDatosCerrarLiquidacion(inherited Items[aIndex]);
end;

procedure TDatosCerrarLiquidacionCollection.SetItems(aIndex: Integer; const Value: TDatosCerrarLiquidacion);
begin
  TDatosCerrarLiquidacion(inherited Items[aIndex]).Assign(Value);
end;

{ TDespachadorLiquidacion }

procedure TDespachadorLiquidacion.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDespachadorLiquidacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDespachadorLiquidacion) then begin
    lSource := LibraryEmpresas_Intf.TDespachadorLiquidacion(iSource);

    Self.DespachadorLiquidacionID := lSource.DespachadorLiquidacionID;
    Self.DespachadorID := lSource.DespachadorID;
    Self.Importe := lSource.Importe;
    Self.Entregado := lSource.Entregado;
    Self.Diferencia := lSource.Diferencia;
    Self.AgrupacionID := lSource.AgrupacionID;
  end;
end;

procedure TDespachadorLiquidacion.ReadComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_DespachadorID: Integer;
  l_DespachadorLiquidacionID: Integer;
  l_Diferencia: Double;
  l_Entregado: Double;
  l_Importe: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_DespachadorLiquidacionID := Self.DespachadorLiquidacionID;
    try
      TROSerializer(ASerializer).ReadInteger('DespachadorLiquidacionID', TypInfo.otSLong, l_DespachadorLiquidacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DespachadorLiquidacionID']));
    end;
    Self.DespachadorLiquidacionID := l_DespachadorLiquidacionID;
    l_DespachadorID := Self.DespachadorID;
    try
      TROSerializer(ASerializer).ReadInteger('DespachadorID', TypInfo.otSLong, l_DespachadorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DespachadorID']));
    end;
    Self.DespachadorID := l_DespachadorID;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Entregado := Self.Entregado;
    try
      TROSerializer(ASerializer).ReadDouble('Entregado', TypInfo.ftDouble, l_Entregado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Entregado']));
    end;
    Self.Entregado := l_Entregado;
    l_Diferencia := Self.Diferencia;
    try
      TROSerializer(ASerializer).ReadDouble('Diferencia', TypInfo.ftDouble, l_Diferencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Diferencia']));
    end;
    Self.Diferencia := l_Diferencia;
    l_AgrupacionID := Self.AgrupacionID;
    try
      TROSerializer(ASerializer).ReadInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AgrupacionID']));
    end;
    Self.AgrupacionID := l_AgrupacionID;
  end
  else begin
    l_AgrupacionID := Self.AgrupacionID;
    try
      TROSerializer(ASerializer).ReadInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AgrupacionID']));
    end;
    Self.AgrupacionID := l_AgrupacionID;
    l_DespachadorID := Self.DespachadorID;
    try
      TROSerializer(ASerializer).ReadInteger('DespachadorID', TypInfo.otSLong, l_DespachadorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DespachadorID']));
    end;
    Self.DespachadorID := l_DespachadorID;
    l_DespachadorLiquidacionID := Self.DespachadorLiquidacionID;
    try
      TROSerializer(ASerializer).ReadInteger('DespachadorLiquidacionID', TypInfo.otSLong, l_DespachadorLiquidacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DespachadorLiquidacionID']));
    end;
    Self.DespachadorLiquidacionID := l_DespachadorLiquidacionID;
    l_Diferencia := Self.Diferencia;
    try
      TROSerializer(ASerializer).ReadDouble('Diferencia', TypInfo.ftDouble, l_Diferencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Diferencia']));
    end;
    Self.Diferencia := l_Diferencia;
    l_Entregado := Self.Entregado;
    try
      TROSerializer(ASerializer).ReadDouble('Entregado', TypInfo.ftDouble, l_Entregado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Entregado']));
    end;
    Self.Entregado := l_Entregado;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
  end;
end;

procedure TDespachadorLiquidacion.WriteComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_DespachadorID: Integer;
  l_DespachadorLiquidacionID: Integer;
  l_Diferencia: Double;
  l_Entregado: Double;
  l_Importe: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDespachadorLiquidacion);
    l_DespachadorLiquidacionID := Self.DespachadorLiquidacionID;
    TROSerializer(ASerializer).WriteInteger('DespachadorLiquidacionID', TypInfo.otSLong, l_DespachadorLiquidacionID);
    l_DespachadorID := Self.DespachadorID;
    TROSerializer(ASerializer).WriteInteger('DespachadorID', TypInfo.otSLong, l_DespachadorID);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Entregado := Self.Entregado;
    TROSerializer(ASerializer).WriteDouble('Entregado', TypInfo.ftDouble, l_Entregado);
    l_Diferencia := Self.Diferencia;
    TROSerializer(ASerializer).WriteDouble('Diferencia', TypInfo.ftDouble, l_Diferencia);
    l_AgrupacionID := Self.AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
  end
  else begin
    l_AgrupacionID := Self.AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', TypInfo.otSLong, l_AgrupacionID);
    l_DespachadorID := Self.DespachadorID;
    TROSerializer(ASerializer).WriteInteger('DespachadorID', TypInfo.otSLong, l_DespachadorID);
    l_DespachadorLiquidacionID := Self.DespachadorLiquidacionID;
    TROSerializer(ASerializer).WriteInteger('DespachadorLiquidacionID', TypInfo.otSLong, l_DespachadorLiquidacionID);
    l_Diferencia := Self.Diferencia;
    TROSerializer(ASerializer).WriteDouble('Diferencia', TypInfo.ftDouble, l_Diferencia);
    l_Entregado := Self.Entregado;
    TROSerializer(ASerializer).WriteDouble('Entregado', TypInfo.ftDouble, l_Entregado);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
  end;
end;

{ TDespachadorLiquidacionCollection }
constructor TDespachadorLiquidacionCollection.Create;
begin
  inherited Create(TDespachadorLiquidacion);
end;

constructor TDespachadorLiquidacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDespachadorLiquidacionCollection.Add: TDespachadorLiquidacion;
begin
  Result := TDespachadorLiquidacion(inherited Add);
end;

function TDespachadorLiquidacionCollection.GetItems(aIndex: Integer): TDespachadorLiquidacion;
begin
  Result := TDespachadorLiquidacion(inherited Items[aIndex]);
end;

procedure TDespachadorLiquidacionCollection.LoadFromArray(anArray: ADespachadorLiquidacion);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDespachadorLiquidacionCollection.SaveToArray(anArray: ADespachadorLiquidacion);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDespachadorLiquidacion(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDespachadorLiquidacionCollection.SetItems(aIndex: Integer; const Value: TDespachadorLiquidacion);
begin
  TDespachadorLiquidacion(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleLiquidacion }

procedure TDetalleLiquidacion.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDetalleLiquidacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleLiquidacion) then begin
    lSource := LibraryEmpresas_Intf.TDetalleLiquidacion(iSource);

    Self.Cantidad := lSource.Cantidad;
    Self.Importe := lSource.Importe;
    Self.Referencia := lSource.Referencia;
    Self.Ticket := lSource.Ticket;
    Self.Serie := lSource.Serie;
    Self.CuponID := lSource.CuponID;
    Self.SalidaID := lSource.SalidaID;
    Self.ClienteID := lSource.ClienteID;
    Self.BancoID := lSource.BancoID;
    Self.ProductoID := lSource.ProductoID;
    Self.AuxiliarID := lSource.AuxiliarID;
    Self.DespachadorLiquidacionID := lSource.DespachadorLiquidacionID;
    Self.TipoValorID := lSource.TipoValorID;
  end;
end;

procedure TDetalleLiquidacion.ReadComplex(ASerializer: TObject);
var
  l_AuxiliarID: Integer;
  l_BancoID: Integer;
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_CuponID: Integer;
  l_DespachadorLiquidacionID: Integer;
  l_Importe: Double;
  l_ProductoID: Integer;
  l_Referencia: AnsiString;
  l_SalidaID: Integer;
  l_Serie: AnsiString;
  l_Ticket: Integer;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Referencia := Self.Referencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Referencia']));
    end;
    Self.Referencia := l_Referencia;
    l_Ticket := Self.Ticket;
    try
      TROSerializer(ASerializer).ReadInteger('Ticket', TypInfo.otSLong, l_Ticket);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ticket']));
    end;
    Self.Ticket := l_Ticket;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_CuponID := Self.CuponID;
    try
      TROSerializer(ASerializer).ReadInteger('CuponID', TypInfo.otSLong, l_CuponID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CuponID']));
    end;
    Self.CuponID := l_CuponID;
    l_SalidaID := Self.SalidaID;
    try
      TROSerializer(ASerializer).ReadInteger('SalidaID', TypInfo.otSLong, l_SalidaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SalidaID']));
    end;
    Self.SalidaID := l_SalidaID;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_BancoID := Self.BancoID;
    try
      TROSerializer(ASerializer).ReadInteger('BancoID', TypInfo.otSLong, l_BancoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'BancoID']));
    end;
    Self.BancoID := l_BancoID;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_AuxiliarID := Self.AuxiliarID;
    try
      TROSerializer(ASerializer).ReadInteger('AuxiliarID', TypInfo.otSLong, l_AuxiliarID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AuxiliarID']));
    end;
    Self.AuxiliarID := l_AuxiliarID;
    l_DespachadorLiquidacionID := Self.DespachadorLiquidacionID;
    try
      TROSerializer(ASerializer).ReadInteger('DespachadorLiquidacionID', TypInfo.otSLong, l_DespachadorLiquidacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DespachadorLiquidacionID']));
    end;
    Self.DespachadorLiquidacionID := l_DespachadorLiquidacionID;
    l_TipoValorID := Self.TipoValorID;
    try
      TROSerializer(ASerializer).ReadInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoValorID']));
    end;
    Self.TipoValorID := l_TipoValorID;
  end
  else begin
    l_AuxiliarID := Self.AuxiliarID;
    try
      TROSerializer(ASerializer).ReadInteger('AuxiliarID', TypInfo.otSLong, l_AuxiliarID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'AuxiliarID']));
    end;
    Self.AuxiliarID := l_AuxiliarID;
    l_BancoID := Self.BancoID;
    try
      TROSerializer(ASerializer).ReadInteger('BancoID', TypInfo.otSLong, l_BancoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'BancoID']));
    end;
    Self.BancoID := l_BancoID;
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_CuponID := Self.CuponID;
    try
      TROSerializer(ASerializer).ReadInteger('CuponID', TypInfo.otSLong, l_CuponID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CuponID']));
    end;
    Self.CuponID := l_CuponID;
    l_DespachadorLiquidacionID := Self.DespachadorLiquidacionID;
    try
      TROSerializer(ASerializer).ReadInteger('DespachadorLiquidacionID', TypInfo.otSLong, l_DespachadorLiquidacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DespachadorLiquidacionID']));
    end;
    Self.DespachadorLiquidacionID := l_DespachadorLiquidacionID;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_Referencia := Self.Referencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Referencia']));
    end;
    Self.Referencia := l_Referencia;
    l_SalidaID := Self.SalidaID;
    try
      TROSerializer(ASerializer).ReadInteger('SalidaID', TypInfo.otSLong, l_SalidaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SalidaID']));
    end;
    Self.SalidaID := l_SalidaID;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Ticket := Self.Ticket;
    try
      TROSerializer(ASerializer).ReadInteger('Ticket', TypInfo.otSLong, l_Ticket);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ticket']));
    end;
    Self.Ticket := l_Ticket;
    l_TipoValorID := Self.TipoValorID;
    try
      TROSerializer(ASerializer).ReadInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoValorID']));
    end;
    Self.TipoValorID := l_TipoValorID;
  end;
end;

procedure TDetalleLiquidacion.WriteComplex(ASerializer: TObject);
var
  l_AuxiliarID: Integer;
  l_BancoID: Integer;
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_CuponID: Integer;
  l_DespachadorLiquidacionID: Integer;
  l_Importe: Double;
  l_ProductoID: Integer;
  l_Referencia: AnsiString;
  l_SalidaID: Integer;
  l_Serie: AnsiString;
  l_Ticket: Integer;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleLiquidacion);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Referencia := Self.Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Ticket := Self.Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', TypInfo.otSLong, l_Ticket);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_CuponID := Self.CuponID;
    TROSerializer(ASerializer).WriteInteger('CuponID', TypInfo.otSLong, l_CuponID);
    l_SalidaID := Self.SalidaID;
    TROSerializer(ASerializer).WriteInteger('SalidaID', TypInfo.otSLong, l_SalidaID);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_BancoID := Self.BancoID;
    TROSerializer(ASerializer).WriteInteger('BancoID', TypInfo.otSLong, l_BancoID);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_AuxiliarID := Self.AuxiliarID;
    TROSerializer(ASerializer).WriteInteger('AuxiliarID', TypInfo.otSLong, l_AuxiliarID);
    l_DespachadorLiquidacionID := Self.DespachadorLiquidacionID;
    TROSerializer(ASerializer).WriteInteger('DespachadorLiquidacionID', TypInfo.otSLong, l_DespachadorLiquidacionID);
    l_TipoValorID := Self.TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
  end
  else begin
    l_AuxiliarID := Self.AuxiliarID;
    TROSerializer(ASerializer).WriteInteger('AuxiliarID', TypInfo.otSLong, l_AuxiliarID);
    l_BancoID := Self.BancoID;
    TROSerializer(ASerializer).WriteInteger('BancoID', TypInfo.otSLong, l_BancoID);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_CuponID := Self.CuponID;
    TROSerializer(ASerializer).WriteInteger('CuponID', TypInfo.otSLong, l_CuponID);
    l_DespachadorLiquidacionID := Self.DespachadorLiquidacionID;
    TROSerializer(ASerializer).WriteInteger('DespachadorLiquidacionID', TypInfo.otSLong, l_DespachadorLiquidacionID);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_Referencia := Self.Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_SalidaID := Self.SalidaID;
    TROSerializer(ASerializer).WriteInteger('SalidaID', TypInfo.otSLong, l_SalidaID);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Ticket := Self.Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', TypInfo.otSLong, l_Ticket);
    l_TipoValorID := Self.TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
  end;
end;

{ TDetalleLiquidacionCollection }
constructor TDetalleLiquidacionCollection.Create;
begin
  inherited Create(TDetalleLiquidacion);
end;

constructor TDetalleLiquidacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleLiquidacionCollection.Add: TDetalleLiquidacion;
begin
  Result := TDetalleLiquidacion(inherited Add);
end;

function TDetalleLiquidacionCollection.GetItems(aIndex: Integer): TDetalleLiquidacion;
begin
  Result := TDetalleLiquidacion(inherited Items[aIndex]);
end;

procedure TDetalleLiquidacionCollection.LoadFromArray(anArray: ADetalleLiquidacion);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDetalleLiquidacionCollection.SaveToArray(anArray: ADetalleLiquidacion);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDetalleLiquidacion(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDetalleLiquidacionCollection.SetItems(aIndex: Integer; const Value: TDetalleLiquidacion);
begin
  TDetalleLiquidacion(inherited Items[aIndex]).Assign(Value);
end;

{ TTipoValor }

procedure TTipoValor.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TTipoValor;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TTipoValor) then begin
    lSource := LibraryEmpresas_Intf.TTipoValor(iSource);

    Self.TipoValorID := lSource.TipoValorID;
    Self.Nombre := lSource.Nombre;
    Self.Grupo := lSource.Grupo;
  end;
end;

procedure TTipoValor.ReadComplex(ASerializer: TObject);
var
  l_Grupo: AnsiString;
  l_Nombre: AnsiString;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TipoValorID := Self.TipoValorID;
    try
      TROSerializer(ASerializer).ReadInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoValorID']));
    end;
    Self.TipoValorID := l_TipoValorID;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_Grupo := Self.Grupo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Grupo', l_Grupo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Grupo']));
    end;
    Self.Grupo := l_Grupo;
  end
  else begin
    l_Grupo := Self.Grupo;
    try
      TROSerializer(ASerializer).ReadAnsiString('Grupo', l_Grupo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Grupo']));
    end;
    Self.Grupo := l_Grupo;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_TipoValorID := Self.TipoValorID;
    try
      TROSerializer(ASerializer).ReadInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoValorID']));
    end;
    Self.TipoValorID := l_TipoValorID;
  end;
end;

procedure TTipoValor.WriteComplex(ASerializer: TObject);
var
  l_Grupo: AnsiString;
  l_Nombre: AnsiString;
  l_TipoValorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTipoValor);
    l_TipoValorID := Self.TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Grupo := Self.Grupo;
    TROSerializer(ASerializer).WriteAnsiString('Grupo', l_Grupo);
  end
  else begin
    l_Grupo := Self.Grupo;
    TROSerializer(ASerializer).WriteAnsiString('Grupo', l_Grupo);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_TipoValorID := Self.TipoValorID;
    TROSerializer(ASerializer).WriteInteger('TipoValorID', TypInfo.otSLong, l_TipoValorID);
  end;
end;

{ TTipoValorCollection }
constructor TTipoValorCollection.Create;
begin
  inherited Create(TTipoValor);
end;

constructor TTipoValorCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTipoValorCollection.Add: TTipoValor;
begin
  Result := TTipoValor(inherited Add);
end;

function TTipoValorCollection.GetItems(aIndex: Integer): TTipoValor;
begin
  Result := TTipoValor(inherited Items[aIndex]);
end;

procedure TTipoValorCollection.LoadFromArray(anArray: ATipoValor);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TTipoValorCollection.SaveToArray(anArray: ATipoValor);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TTipoValor(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TTipoValorCollection.SetItems(aIndex: Integer; const Value: TTipoValor);
begin
  TTipoValor(inherited Items[aIndex]).Assign(Value);
end;

{ TPerfilPuntos }

procedure TPerfilPuntos.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TPerfilPuntos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TPerfilPuntos) then begin
    lSource := LibraryEmpresas_Intf.TPerfilPuntos(iSource);

    Self.FechaIni := lSource.FechaIni;
    Self.FechaFin := lSource.FechaFin;
    Self.Criterio := lSource.Criterio;
    Self.NewField3 := lSource.NewField3;
  end;
end;

procedure TPerfilPuntos.ReadComplex(ASerializer: TObject);
var
  l_Criterio: Double;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_NewField3: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FechaIni := Self.FechaIni;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaIni']));
    end;
    Self.FechaIni := l_FechaIni;
    l_FechaFin := Self.FechaFin;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaFin']));
    end;
    Self.FechaFin := l_FechaFin;
    l_Criterio := Self.Criterio;
    try
      TROSerializer(ASerializer).ReadDouble('Criterio', TypInfo.ftDouble, l_Criterio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Criterio']));
    end;
    Self.Criterio := l_Criterio;
    l_NewField3 := Self.NewField3;
    try
      TROSerializer(ASerializer).ReadAnsiString('NewField3', l_NewField3);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NewField3']));
    end;
    Self.NewField3 := l_NewField3;
  end
  else begin
    l_Criterio := Self.Criterio;
    try
      TROSerializer(ASerializer).ReadDouble('Criterio', TypInfo.ftDouble, l_Criterio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Criterio']));
    end;
    Self.Criterio := l_Criterio;
    l_FechaFin := Self.FechaFin;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaFin']));
    end;
    Self.FechaFin := l_FechaFin;
    l_FechaIni := Self.FechaIni;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaIni']));
    end;
    Self.FechaIni := l_FechaIni;
    l_NewField3 := Self.NewField3;
    try
      TROSerializer(ASerializer).ReadAnsiString('NewField3', l_NewField3);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NewField3']));
    end;
    Self.NewField3 := l_NewField3;
  end;
end;

procedure TPerfilPuntos.WriteComplex(ASerializer: TObject);
var
  l_Criterio: Double;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_NewField3: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TPerfilPuntos);
    l_FechaIni := Self.FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FechaFin := Self.FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_Criterio := Self.Criterio;
    TROSerializer(ASerializer).WriteDouble('Criterio', TypInfo.ftDouble, l_Criterio);
    l_NewField3 := Self.NewField3;
    TROSerializer(ASerializer).WriteAnsiString('NewField3', l_NewField3);
  end
  else begin
    l_Criterio := Self.Criterio;
    TROSerializer(ASerializer).WriteDouble('Criterio', TypInfo.ftDouble, l_Criterio);
    l_FechaFin := Self.FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_FechaIni := Self.FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_NewField3 := Self.NewField3;
    TROSerializer(ASerializer).WriteAnsiString('NewField3', l_NewField3);
  end;
end;

{ TPerfilPuntosCollection }
constructor TPerfilPuntosCollection.Create;
begin
  inherited Create(TPerfilPuntos);
end;

constructor TPerfilPuntosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TPerfilPuntosCollection.Add: TPerfilPuntos;
begin
  Result := TPerfilPuntos(inherited Add);
end;

function TPerfilPuntosCollection.GetItems(aIndex: Integer): TPerfilPuntos;
begin
  Result := TPerfilPuntos(inherited Items[aIndex]);
end;

procedure TPerfilPuntosCollection.SetItems(aIndex: Integer; const Value: TPerfilPuntos);
begin
  TPerfilPuntos(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronica }

procedure TFacturaElectronica.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TFacturaElectronica;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TFacturaElectronica) then begin
    lSource := LibraryEmpresas_Intf.TFacturaElectronica(iSource);

    Self.Serie := lSource.Serie;
    Self.Folio := lSource.Folio;
    Self.Fecha := lSource.Fecha;
    Self.noAprobacion := lSource.noAprobacion;
    Self.anoAprobacion := lSource.anoAprobacion;
    Self.tipoComprobante := lSource.tipoComprobante;
    Self.formaDePago := lSource.formaDePago;
    Self.SubTotal := lSource.SubTotal;
    Self.MunicipioEmisor := lSource.MunicipioEmisor;
    Self.Total := lSource.Total;
    Self.RFCEmisor := lSource.RFCEmisor;
    Self.NomEmpEmisor := lSource.NomEmpEmisor;
    Self.DireccionEm := lSource.DireccionEm;
    Self.NoExteriorEm := lSource.NoExteriorEm;
    Self.ColoniaEmisor := lSource.ColoniaEmisor;
    Self.EstadoEmisor := lSource.EstadoEmisor;
    Self.PaisEmisor := lSource.PaisEmisor;
    Self.CodigoPostalEmisor := lSource.CodigoPostalEmisor;
    Self.RFCReceptor := lSource.RFCReceptor;
    Self.NombreReceptor := lSource.NombreReceptor;
    Self.DomicilioReceptor := lSource.DomicilioReceptor;
    Self.NoExteriorReceptor := lSource.NoExteriorReceptor;
    Self.ColoniaReceptor := lSource.ColoniaReceptor;
    Self.LocalidadReceptor := lSource.LocalidadReceptor;
    Self.MunicipioReceptor := lSource.MunicipioReceptor;
    Self.EstadoReceptor := lSource.EstadoReceptor;
    Self.PaisReceptor := lSource.PaisReceptor;
    Self.CodigoPostalReceptor := lSource.CodigoPostalReceptor;
    if System.Assigned(lSource.fFacturaElectronicaDetalleImportes) then
      Self.FacturaElectronicaDetalleImportes.Assign(lSource.fFacturaElectronicaDetalleImportes)
    else
      SysUtils.FreeAndNil(fFacturaElectronicaDetalleImportes);
    if System.Assigned(lSource.fFacturaElectronicaDetalleImpuestos) then
      Self.FacturaElectronicaDetalleImpuestos.Assign(lSource.fFacturaElectronicaDetalleImpuestos)
    else
      SysUtils.FreeAndNil(fFacturaElectronicaDetalleImpuestos);
    Self.TotalImpuesto := lSource.TotalImpuesto;
    Self.CalleExpedidoEn := lSource.CalleExpedidoEn;
    Self.NoExterioExpedidoEn := lSource.NoExterioExpedidoEn;
    Self.ColoniaExpedidoEn := lSource.ColoniaExpedidoEn;
    Self.CodigoPostalExpedidoEn := lSource.CodigoPostalExpedidoEn;
    Self.LocalidadExpedidoEn := lSource.LocalidadExpedidoEn;
    Self.MunicipioExpedidoEn := lSource.MunicipioExpedidoEn;
    Self.EstadoExpedidoEn := lSource.EstadoExpedidoEn;
    Self.PaisExpedidoEn := lSource.PaisExpedidoEn;
    Self.Sucursal := lSource.Sucursal;
    Self.email := lSource.email;
  end;
end;

function TFacturaElectronica.GetFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
begin
  if (fFacturaElectronicaDetalleImportes = nil) then fFacturaElectronicaDetalleImportes := ATFacturaElectronicaDetalleImportes.Create();
  Result := fFacturaElectronicaDetalleImportes;
end;

function TFacturaElectronica.GetFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
begin
  if (fFacturaElectronicaDetalleImpuestos = nil) then fFacturaElectronicaDetalleImpuestos := ATFacturaElectronicaDetalleImpuestos.Create();
  Result := fFacturaElectronicaDetalleImpuestos;
end;

procedure TFacturaElectronica.ReadComplex(ASerializer: TObject);
var
  l_anoAprobacion: AnsiString;
  l_CalleExpedidoEn: AnsiString;
  l_CodigoPostalEmisor: AnsiString;
  l_CodigoPostalExpedidoEn: AnsiString;
  l_CodigoPostalReceptor: AnsiString;
  l_ColoniaEmisor: AnsiString;
  l_ColoniaExpedidoEn: AnsiString;
  l_ColoniaReceptor: AnsiString;
  l_DireccionEm: AnsiString;
  l_DomicilioReceptor: AnsiString;
  l_email: AnsiString;
  l_EstadoEmisor: AnsiString;
  l_EstadoExpedidoEn: AnsiString;
  l_EstadoReceptor: AnsiString;
  l_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
  l_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  l_Fecha: AnsiString;
  l_Folio: AnsiString;
  l_formaDePago: AnsiString;
  l_LocalidadExpedidoEn: AnsiString;
  l_LocalidadReceptor: AnsiString;
  l_MunicipioEmisor: AnsiString;
  l_MunicipioExpedidoEn: AnsiString;
  l_MunicipioReceptor: AnsiString;
  l_noAprobacion: AnsiString;
  l_NoExterioExpedidoEn: AnsiString;
  l_NoExteriorEm: AnsiString;
  l_NoExteriorReceptor: AnsiString;
  l_NombreReceptor: AnsiString;
  l_NomEmpEmisor: AnsiString;
  l_PaisEmisor: AnsiString;
  l_PaisExpedidoEn: AnsiString;
  l_PaisReceptor: AnsiString;
  l_RFCEmisor: AnsiString;
  l_RFCReceptor: AnsiString;
  l_Serie: AnsiString;
  l_SubTotal: AnsiString;
  l_Sucursal: Boolean;
  l_tipoComprobante: AnsiString;
  l_Total: AnsiString;
  l_TotalImpuesto: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadAnsiString('Folio', l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadAnsiString('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_noAprobacion := Self.noAprobacion;
    try
      TROSerializer(ASerializer).ReadAnsiString('noAprobacion', l_noAprobacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'noAprobacion']));
    end;
    Self.noAprobacion := l_noAprobacion;
    l_anoAprobacion := Self.anoAprobacion;
    try
      TROSerializer(ASerializer).ReadAnsiString('anoAprobacion', l_anoAprobacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'anoAprobacion']));
    end;
    Self.anoAprobacion := l_anoAprobacion;
    l_tipoComprobante := Self.tipoComprobante;
    try
      TROSerializer(ASerializer).ReadAnsiString('tipoComprobante', l_tipoComprobante);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'tipoComprobante']));
    end;
    Self.tipoComprobante := l_tipoComprobante;
    l_formaDePago := Self.formaDePago;
    try
      TROSerializer(ASerializer).ReadAnsiString('formaDePago', l_formaDePago);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'formaDePago']));
    end;
    Self.formaDePago := l_formaDePago;
    l_SubTotal := Self.SubTotal;
    try
      TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SubTotal']));
    end;
    Self.SubTotal := l_SubTotal;
    l_MunicipioEmisor := Self.MunicipioEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioEmisor']));
    end;
    Self.MunicipioEmisor := l_MunicipioEmisor;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_RFCEmisor := Self.RFCEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFCEmisor', l_RFCEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFCEmisor']));
    end;
    Self.RFCEmisor := l_RFCEmisor;
    l_NomEmpEmisor := Self.NomEmpEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NomEmpEmisor']));
    end;
    Self.NomEmpEmisor := l_NomEmpEmisor;
    l_DireccionEm := Self.DireccionEm;
    try
      TROSerializer(ASerializer).ReadAnsiString('DireccionEm', l_DireccionEm);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DireccionEm']));
    end;
    Self.DireccionEm := l_DireccionEm;
    l_NoExteriorEm := Self.NoExteriorEm;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExteriorEm', l_NoExteriorEm);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExteriorEm']));
    end;
    Self.NoExteriorEm := l_NoExteriorEm;
    l_ColoniaEmisor := Self.ColoniaEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaEmisor']));
    end;
    Self.ColoniaEmisor := l_ColoniaEmisor;
    l_EstadoEmisor := Self.EstadoEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoEmisor', l_EstadoEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoEmisor']));
    end;
    Self.EstadoEmisor := l_EstadoEmisor;
    l_PaisEmisor := Self.PaisEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisEmisor', l_PaisEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisEmisor']));
    end;
    Self.PaisEmisor := l_PaisEmisor;
    l_CodigoPostalEmisor := Self.CodigoPostalEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalEmisor']));
    end;
    Self.CodigoPostalEmisor := l_CodigoPostalEmisor;
    l_RFCReceptor := Self.RFCReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFCReceptor', l_RFCReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFCReceptor']));
    end;
    Self.RFCReceptor := l_RFCReceptor;
    l_NombreReceptor := Self.NombreReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NombreReceptor', l_NombreReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NombreReceptor']));
    end;
    Self.NombreReceptor := l_NombreReceptor;
    l_DomicilioReceptor := Self.DomicilioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DomicilioReceptor']));
    end;
    Self.DomicilioReceptor := l_DomicilioReceptor;
    l_NoExteriorReceptor := Self.NoExteriorReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExteriorReceptor']));
    end;
    Self.NoExteriorReceptor := l_NoExteriorReceptor;
    l_ColoniaReceptor := Self.ColoniaReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaReceptor']));
    end;
    Self.ColoniaReceptor := l_ColoniaReceptor;
    l_LocalidadReceptor := Self.LocalidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LocalidadReceptor']));
    end;
    Self.LocalidadReceptor := l_LocalidadReceptor;
    l_MunicipioReceptor := Self.MunicipioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioReceptor']));
    end;
    Self.MunicipioReceptor := l_MunicipioReceptor;
    l_EstadoReceptor := Self.EstadoReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoReceptor', l_EstadoReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoReceptor']));
    end;
    Self.EstadoReceptor := l_EstadoReceptor;
    l_PaisReceptor := Self.PaisReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisReceptor', l_PaisReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisReceptor']));
    end;
    Self.PaisReceptor := l_PaisReceptor;
    l_CodigoPostalReceptor := Self.CodigoPostalReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalReceptor']));
    end;
    Self.CodigoPostalReceptor := l_CodigoPostalReceptor;
    l_FacturaElectronicaDetalleImportes := int_FacturaElectronicaDetalleImportes;
    try
      TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImportes', ATFacturaElectronicaDetalleImportes, l_FacturaElectronicaDetalleImportes);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaElectronicaDetalleImportes']));
    end;
    if int_FacturaElectronicaDetalleImportes <> l_FacturaElectronicaDetalleImportes then Self.FacturaElectronicaDetalleImportes.Free;
    Self.FacturaElectronicaDetalleImportes := l_FacturaElectronicaDetalleImportes;
    l_FacturaElectronicaDetalleImpuestos := int_FacturaElectronicaDetalleImpuestos;
    try
      TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImpuestos', ATFacturaElectronicaDetalleImpuestos, l_FacturaElectronicaDetalleImpuestos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaElectronicaDetalleImpuestos']));
    end;
    if int_FacturaElectronicaDetalleImpuestos <> l_FacturaElectronicaDetalleImpuestos then Self.FacturaElectronicaDetalleImpuestos.Free;
    Self.FacturaElectronicaDetalleImpuestos := l_FacturaElectronicaDetalleImpuestos;
    l_TotalImpuesto := Self.TotalImpuesto;
    try
      TROSerializer(ASerializer).ReadAnsiString('TotalImpuesto', l_TotalImpuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TotalImpuesto']));
    end;
    Self.TotalImpuesto := l_TotalImpuesto;
    l_CalleExpedidoEn := Self.CalleExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CalleExpedidoEn']));
    end;
    Self.CalleExpedidoEn := l_CalleExpedidoEn;
    l_NoExterioExpedidoEn := Self.NoExterioExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExterioExpedidoEn']));
    end;
    Self.NoExterioExpedidoEn := l_NoExterioExpedidoEn;
    l_ColoniaExpedidoEn := Self.ColoniaExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaExpedidoEn']));
    end;
    Self.ColoniaExpedidoEn := l_ColoniaExpedidoEn;
    l_CodigoPostalExpedidoEn := Self.CodigoPostalExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalExpedidoEn']));
    end;
    Self.CodigoPostalExpedidoEn := l_CodigoPostalExpedidoEn;
    l_LocalidadExpedidoEn := Self.LocalidadExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LocalidadExpedidoEn']));
    end;
    Self.LocalidadExpedidoEn := l_LocalidadExpedidoEn;
    l_MunicipioExpedidoEn := Self.MunicipioExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioExpedidoEn']));
    end;
    Self.MunicipioExpedidoEn := l_MunicipioExpedidoEn;
    l_EstadoExpedidoEn := Self.EstadoExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoExpedidoEn']));
    end;
    Self.EstadoExpedidoEn := l_EstadoExpedidoEn;
    l_PaisExpedidoEn := Self.PaisExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisExpedidoEn']));
    end;
    Self.PaisExpedidoEn := l_PaisExpedidoEn;
    l_Sucursal := Self.Sucursal;
    try
      TROSerializer(ASerializer).ReadEnumerated('Sucursal',System.TypeInfo(boolean), l_Sucursal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Sucursal']));
    end;
    Self.Sucursal := l_Sucursal;
    l_email := Self.email;
    try
      TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'email']));
    end;
    Self.email := l_email;
  end
  else begin
    l_anoAprobacion := Self.anoAprobacion;
    try
      TROSerializer(ASerializer).ReadAnsiString('anoAprobacion', l_anoAprobacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'anoAprobacion']));
    end;
    Self.anoAprobacion := l_anoAprobacion;
    l_CalleExpedidoEn := Self.CalleExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CalleExpedidoEn']));
    end;
    Self.CalleExpedidoEn := l_CalleExpedidoEn;
    l_CodigoPostalEmisor := Self.CodigoPostalEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalEmisor']));
    end;
    Self.CodigoPostalEmisor := l_CodigoPostalEmisor;
    l_CodigoPostalExpedidoEn := Self.CodigoPostalExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalExpedidoEn']));
    end;
    Self.CodigoPostalExpedidoEn := l_CodigoPostalExpedidoEn;
    l_CodigoPostalReceptor := Self.CodigoPostalReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalReceptor']));
    end;
    Self.CodigoPostalReceptor := l_CodigoPostalReceptor;
    l_ColoniaEmisor := Self.ColoniaEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaEmisor']));
    end;
    Self.ColoniaEmisor := l_ColoniaEmisor;
    l_ColoniaExpedidoEn := Self.ColoniaExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaExpedidoEn']));
    end;
    Self.ColoniaExpedidoEn := l_ColoniaExpedidoEn;
    l_ColoniaReceptor := Self.ColoniaReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaReceptor']));
    end;
    Self.ColoniaReceptor := l_ColoniaReceptor;
    l_DireccionEm := Self.DireccionEm;
    try
      TROSerializer(ASerializer).ReadAnsiString('DireccionEm', l_DireccionEm);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DireccionEm']));
    end;
    Self.DireccionEm := l_DireccionEm;
    l_DomicilioReceptor := Self.DomicilioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DomicilioReceptor']));
    end;
    Self.DomicilioReceptor := l_DomicilioReceptor;
    l_email := Self.email;
    try
      TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'email']));
    end;
    Self.email := l_email;
    l_EstadoEmisor := Self.EstadoEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoEmisor', l_EstadoEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoEmisor']));
    end;
    Self.EstadoEmisor := l_EstadoEmisor;
    l_EstadoExpedidoEn := Self.EstadoExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoExpedidoEn']));
    end;
    Self.EstadoExpedidoEn := l_EstadoExpedidoEn;
    l_EstadoReceptor := Self.EstadoReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoReceptor', l_EstadoReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoReceptor']));
    end;
    Self.EstadoReceptor := l_EstadoReceptor;
    l_FacturaElectronicaDetalleImportes := int_FacturaElectronicaDetalleImportes;
    try
      TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImportes', ATFacturaElectronicaDetalleImportes, l_FacturaElectronicaDetalleImportes);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaElectronicaDetalleImportes']));
    end;
    if int_FacturaElectronicaDetalleImportes <> l_FacturaElectronicaDetalleImportes then FacturaElectronicaDetalleImportes.Free;
    Self.FacturaElectronicaDetalleImportes := l_FacturaElectronicaDetalleImportes;
    l_FacturaElectronicaDetalleImpuestos := int_FacturaElectronicaDetalleImpuestos;
    try
      TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImpuestos', ATFacturaElectronicaDetalleImpuestos, l_FacturaElectronicaDetalleImpuestos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaElectronicaDetalleImpuestos']));
    end;
    if int_FacturaElectronicaDetalleImpuestos <> l_FacturaElectronicaDetalleImpuestos then FacturaElectronicaDetalleImpuestos.Free;
    Self.FacturaElectronicaDetalleImpuestos := l_FacturaElectronicaDetalleImpuestos;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadAnsiString('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadAnsiString('Folio', l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_formaDePago := Self.formaDePago;
    try
      TROSerializer(ASerializer).ReadAnsiString('formaDePago', l_formaDePago);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'formaDePago']));
    end;
    Self.formaDePago := l_formaDePago;
    l_LocalidadExpedidoEn := Self.LocalidadExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LocalidadExpedidoEn']));
    end;
    Self.LocalidadExpedidoEn := l_LocalidadExpedidoEn;
    l_LocalidadReceptor := Self.LocalidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LocalidadReceptor']));
    end;
    Self.LocalidadReceptor := l_LocalidadReceptor;
    l_MunicipioEmisor := Self.MunicipioEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioEmisor']));
    end;
    Self.MunicipioEmisor := l_MunicipioEmisor;
    l_MunicipioExpedidoEn := Self.MunicipioExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioExpedidoEn']));
    end;
    Self.MunicipioExpedidoEn := l_MunicipioExpedidoEn;
    l_MunicipioReceptor := Self.MunicipioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioReceptor']));
    end;
    Self.MunicipioReceptor := l_MunicipioReceptor;
    l_noAprobacion := Self.noAprobacion;
    try
      TROSerializer(ASerializer).ReadAnsiString('noAprobacion', l_noAprobacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'noAprobacion']));
    end;
    Self.noAprobacion := l_noAprobacion;
    l_NoExterioExpedidoEn := Self.NoExterioExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExterioExpedidoEn']));
    end;
    Self.NoExterioExpedidoEn := l_NoExterioExpedidoEn;
    l_NoExteriorEm := Self.NoExteriorEm;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExteriorEm', l_NoExteriorEm);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExteriorEm']));
    end;
    Self.NoExteriorEm := l_NoExteriorEm;
    l_NoExteriorReceptor := Self.NoExteriorReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExteriorReceptor']));
    end;
    Self.NoExteriorReceptor := l_NoExteriorReceptor;
    l_NombreReceptor := Self.NombreReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NombreReceptor', l_NombreReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NombreReceptor']));
    end;
    Self.NombreReceptor := l_NombreReceptor;
    l_NomEmpEmisor := Self.NomEmpEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NomEmpEmisor']));
    end;
    Self.NomEmpEmisor := l_NomEmpEmisor;
    l_PaisEmisor := Self.PaisEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisEmisor', l_PaisEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisEmisor']));
    end;
    Self.PaisEmisor := l_PaisEmisor;
    l_PaisExpedidoEn := Self.PaisExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisExpedidoEn']));
    end;
    Self.PaisExpedidoEn := l_PaisExpedidoEn;
    l_PaisReceptor := Self.PaisReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisReceptor', l_PaisReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisReceptor']));
    end;
    Self.PaisReceptor := l_PaisReceptor;
    l_RFCEmisor := Self.RFCEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFCEmisor', l_RFCEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFCEmisor']));
    end;
    Self.RFCEmisor := l_RFCEmisor;
    l_RFCReceptor := Self.RFCReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFCReceptor', l_RFCReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFCReceptor']));
    end;
    Self.RFCReceptor := l_RFCReceptor;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_SubTotal := Self.SubTotal;
    try
      TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SubTotal']));
    end;
    Self.SubTotal := l_SubTotal;
    l_Sucursal := Self.Sucursal;
    try
      TROSerializer(ASerializer).ReadEnumerated('Sucursal',System.TypeInfo(boolean), l_Sucursal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Sucursal']));
    end;
    Self.Sucursal := l_Sucursal;
    l_tipoComprobante := Self.tipoComprobante;
    try
      TROSerializer(ASerializer).ReadAnsiString('tipoComprobante', l_tipoComprobante);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'tipoComprobante']));
    end;
    Self.tipoComprobante := l_tipoComprobante;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_TotalImpuesto := Self.TotalImpuesto;
    try
      TROSerializer(ASerializer).ReadAnsiString('TotalImpuesto', l_TotalImpuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TotalImpuesto']));
    end;
    Self.TotalImpuesto := l_TotalImpuesto;
  end;
end;

procedure TFacturaElectronica.WriteComplex(ASerializer: TObject);
var
  l_anoAprobacion: AnsiString;
  l_CalleExpedidoEn: AnsiString;
  l_CodigoPostalEmisor: AnsiString;
  l_CodigoPostalExpedidoEn: AnsiString;
  l_CodigoPostalReceptor: AnsiString;
  l_ColoniaEmisor: AnsiString;
  l_ColoniaExpedidoEn: AnsiString;
  l_ColoniaReceptor: AnsiString;
  l_DireccionEm: AnsiString;
  l_DomicilioReceptor: AnsiString;
  l_email: AnsiString;
  l_EstadoEmisor: AnsiString;
  l_EstadoExpedidoEn: AnsiString;
  l_EstadoReceptor: AnsiString;
  l_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
  l_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  l_Fecha: AnsiString;
  l_Folio: AnsiString;
  l_formaDePago: AnsiString;
  l_LocalidadExpedidoEn: AnsiString;
  l_LocalidadReceptor: AnsiString;
  l_MunicipioEmisor: AnsiString;
  l_MunicipioExpedidoEn: AnsiString;
  l_MunicipioReceptor: AnsiString;
  l_noAprobacion: AnsiString;
  l_NoExterioExpedidoEn: AnsiString;
  l_NoExteriorEm: AnsiString;
  l_NoExteriorReceptor: AnsiString;
  l_NombreReceptor: AnsiString;
  l_NomEmpEmisor: AnsiString;
  l_PaisEmisor: AnsiString;
  l_PaisExpedidoEn: AnsiString;
  l_PaisReceptor: AnsiString;
  l_RFCEmisor: AnsiString;
  l_RFCReceptor: AnsiString;
  l_Serie: AnsiString;
  l_SubTotal: AnsiString;
  l_Sucursal: Boolean;
  l_tipoComprobante: AnsiString;
  l_Total: AnsiString;
  l_TotalImpuesto: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronica);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteAnsiString('Folio', l_Folio);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteAnsiString('Fecha', l_Fecha);
    l_noAprobacion := Self.noAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('noAprobacion', l_noAprobacion);
    l_anoAprobacion := Self.anoAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('anoAprobacion', l_anoAprobacion);
    l_tipoComprobante := Self.tipoComprobante;
    TROSerializer(ASerializer).WriteAnsiString('tipoComprobante', l_tipoComprobante);
    l_formaDePago := Self.formaDePago;
    TROSerializer(ASerializer).WriteAnsiString('formaDePago', l_formaDePago);
    l_SubTotal := Self.SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_MunicipioEmisor := Self.MunicipioEmisor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_RFCEmisor := Self.RFCEmisor;
    TROSerializer(ASerializer).WriteAnsiString('RFCEmisor', l_RFCEmisor);
    l_NomEmpEmisor := Self.NomEmpEmisor;
    TROSerializer(ASerializer).WriteAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    l_DireccionEm := Self.DireccionEm;
    TROSerializer(ASerializer).WriteAnsiString('DireccionEm', l_DireccionEm);
    l_NoExteriorEm := Self.NoExteriorEm;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorEm', l_NoExteriorEm);
    l_ColoniaEmisor := Self.ColoniaEmisor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    l_EstadoEmisor := Self.EstadoEmisor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoEmisor', l_EstadoEmisor);
    l_PaisEmisor := Self.PaisEmisor;
    TROSerializer(ASerializer).WriteAnsiString('PaisEmisor', l_PaisEmisor);
    l_CodigoPostalEmisor := Self.CodigoPostalEmisor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    l_RFCReceptor := Self.RFCReceptor;
    TROSerializer(ASerializer).WriteAnsiString('RFCReceptor', l_RFCReceptor);
    l_NombreReceptor := Self.NombreReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NombreReceptor', l_NombreReceptor);
    l_DomicilioReceptor := Self.DomicilioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    l_NoExteriorReceptor := Self.NoExteriorReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    l_ColoniaReceptor := Self.ColoniaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    l_LocalidadReceptor := Self.LocalidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    l_MunicipioReceptor := Self.MunicipioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    l_EstadoReceptor := Self.EstadoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoReceptor', l_EstadoReceptor);
    l_PaisReceptor := Self.PaisReceptor;
    TROSerializer(ASerializer).WriteAnsiString('PaisReceptor', l_PaisReceptor);
    l_CodigoPostalReceptor := Self.CodigoPostalReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    l_FacturaElectronicaDetalleImportes := int_FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImportes', l_FacturaElectronicaDetalleImportes, ATFacturaElectronicaDetalleImportes);
    l_FacturaElectronicaDetalleImpuestos := int_FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImpuestos', l_FacturaElectronicaDetalleImpuestos, ATFacturaElectronicaDetalleImpuestos);
    l_TotalImpuesto := Self.TotalImpuesto;
    TROSerializer(ASerializer).WriteAnsiString('TotalImpuesto', l_TotalImpuesto);
    l_CalleExpedidoEn := Self.CalleExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    l_NoExterioExpedidoEn := Self.NoExterioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    l_ColoniaExpedidoEn := Self.ColoniaExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    l_CodigoPostalExpedidoEn := Self.CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    l_LocalidadExpedidoEn := Self.LocalidadExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    l_MunicipioExpedidoEn := Self.MunicipioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    l_EstadoExpedidoEn := Self.EstadoExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    l_PaisExpedidoEn := Self.PaisExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    l_Sucursal := Self.Sucursal;
    TROSerializer(ASerializer).WriteEnumerated('Sucursal',System.TypeInfo(boolean), l_Sucursal);
    l_email := Self.email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
  end
  else begin
    l_anoAprobacion := Self.anoAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('anoAprobacion', l_anoAprobacion);
    l_CalleExpedidoEn := Self.CalleExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    l_CodigoPostalEmisor := Self.CodigoPostalEmisor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    l_CodigoPostalExpedidoEn := Self.CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    l_CodigoPostalReceptor := Self.CodigoPostalReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    l_ColoniaEmisor := Self.ColoniaEmisor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    l_ColoniaExpedidoEn := Self.ColoniaExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    l_ColoniaReceptor := Self.ColoniaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    l_DireccionEm := Self.DireccionEm;
    TROSerializer(ASerializer).WriteAnsiString('DireccionEm', l_DireccionEm);
    l_DomicilioReceptor := Self.DomicilioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    l_email := Self.email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
    l_EstadoEmisor := Self.EstadoEmisor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoEmisor', l_EstadoEmisor);
    l_EstadoExpedidoEn := Self.EstadoExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    l_EstadoReceptor := Self.EstadoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoReceptor', l_EstadoReceptor);
    l_FacturaElectronicaDetalleImportes := int_FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImportes', l_FacturaElectronicaDetalleImportes, ATFacturaElectronicaDetalleImportes);
    l_FacturaElectronicaDetalleImpuestos := int_FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImpuestos', l_FacturaElectronicaDetalleImpuestos, ATFacturaElectronicaDetalleImpuestos);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteAnsiString('Fecha', l_Fecha);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteAnsiString('Folio', l_Folio);
    l_formaDePago := Self.formaDePago;
    TROSerializer(ASerializer).WriteAnsiString('formaDePago', l_formaDePago);
    l_LocalidadExpedidoEn := Self.LocalidadExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    l_LocalidadReceptor := Self.LocalidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    l_MunicipioEmisor := Self.MunicipioEmisor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    l_MunicipioExpedidoEn := Self.MunicipioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    l_MunicipioReceptor := Self.MunicipioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    l_noAprobacion := Self.noAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('noAprobacion', l_noAprobacion);
    l_NoExterioExpedidoEn := Self.NoExterioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    l_NoExteriorEm := Self.NoExteriorEm;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorEm', l_NoExteriorEm);
    l_NoExteriorReceptor := Self.NoExteriorReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    l_NombreReceptor := Self.NombreReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NombreReceptor', l_NombreReceptor);
    l_NomEmpEmisor := Self.NomEmpEmisor;
    TROSerializer(ASerializer).WriteAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    l_PaisEmisor := Self.PaisEmisor;
    TROSerializer(ASerializer).WriteAnsiString('PaisEmisor', l_PaisEmisor);
    l_PaisExpedidoEn := Self.PaisExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    l_PaisReceptor := Self.PaisReceptor;
    TROSerializer(ASerializer).WriteAnsiString('PaisReceptor', l_PaisReceptor);
    l_RFCEmisor := Self.RFCEmisor;
    TROSerializer(ASerializer).WriteAnsiString('RFCEmisor', l_RFCEmisor);
    l_RFCReceptor := Self.RFCReceptor;
    TROSerializer(ASerializer).WriteAnsiString('RFCReceptor', l_RFCReceptor);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_SubTotal := Self.SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_Sucursal := Self.Sucursal;
    TROSerializer(ASerializer).WriteEnumerated('Sucursal',System.TypeInfo(boolean), l_Sucursal);
    l_tipoComprobante := Self.tipoComprobante;
    TROSerializer(ASerializer).WriteAnsiString('tipoComprobante', l_tipoComprobante);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_TotalImpuesto := Self.TotalImpuesto;
    TROSerializer(ASerializer).WriteAnsiString('TotalImpuesto', l_TotalImpuesto);
  end;
end;

{ TFacturaElectronicaCollection }
constructor TFacturaElectronicaCollection.Create;
begin
  inherited Create(TFacturaElectronica);
end;

constructor TFacturaElectronicaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaCollection.Add: TFacturaElectronica;
begin
  Result := TFacturaElectronica(inherited Add);
end;

function TFacturaElectronicaCollection.GetItems(aIndex: Integer): TFacturaElectronica;
begin
  Result := TFacturaElectronica(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaCollection.SetItems(aIndex: Integer; const Value: TFacturaElectronica);
begin
  TFacturaElectronica(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaDetalleImportes }

procedure TFacturaElectronicaDetalleImportes.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TFacturaElectronicaDetalleImportes;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TFacturaElectronicaDetalleImportes) then begin
    lSource := LibraryEmpresas_Intf.TFacturaElectronicaDetalleImportes(iSource);

    Self.CantidadReceptor := lSource.CantidadReceptor;
    Self.UnidadReceptor := lSource.UnidadReceptor;
    Self.DescripcionReceptor := lSource.DescripcionReceptor;
    Self.ValorUnitarioReceptor := lSource.ValorUnitarioReceptor;
    Self.ImporteReceptor := lSource.ImporteReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImportes.ReadComplex(ASerializer: TObject);
var
  l_CantidadReceptor: AnsiString;
  l_DescripcionReceptor: AnsiString;
  l_ImporteReceptor: AnsiString;
  l_UnidadReceptor: AnsiString;
  l_ValorUnitarioReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CantidadReceptor := Self.CantidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CantidadReceptor', l_CantidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CantidadReceptor']));
    end;
    Self.CantidadReceptor := l_CantidadReceptor;
    l_UnidadReceptor := Self.UnidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('UnidadReceptor', l_UnidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'UnidadReceptor']));
    end;
    Self.UnidadReceptor := l_UnidadReceptor;
    l_DescripcionReceptor := Self.DescripcionReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DescripcionReceptor']));
    end;
    Self.DescripcionReceptor := l_DescripcionReceptor;
    l_ValorUnitarioReceptor := Self.ValorUnitarioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ValorUnitarioReceptor']));
    end;
    Self.ValorUnitarioReceptor := l_ValorUnitarioReceptor;
    l_ImporteReceptor := Self.ImporteReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImporteReceptor', l_ImporteReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImporteReceptor']));
    end;
    Self.ImporteReceptor := l_ImporteReceptor;
  end
  else begin
    l_CantidadReceptor := Self.CantidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CantidadReceptor', l_CantidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CantidadReceptor']));
    end;
    Self.CantidadReceptor := l_CantidadReceptor;
    l_DescripcionReceptor := Self.DescripcionReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DescripcionReceptor']));
    end;
    Self.DescripcionReceptor := l_DescripcionReceptor;
    l_ImporteReceptor := Self.ImporteReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImporteReceptor', l_ImporteReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImporteReceptor']));
    end;
    Self.ImporteReceptor := l_ImporteReceptor;
    l_UnidadReceptor := Self.UnidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('UnidadReceptor', l_UnidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'UnidadReceptor']));
    end;
    Self.UnidadReceptor := l_UnidadReceptor;
    l_ValorUnitarioReceptor := Self.ValorUnitarioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ValorUnitarioReceptor']));
    end;
    Self.ValorUnitarioReceptor := l_ValorUnitarioReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImportes.WriteComplex(ASerializer: TObject);
var
  l_CantidadReceptor: AnsiString;
  l_DescripcionReceptor: AnsiString;
  l_ImporteReceptor: AnsiString;
  l_UnidadReceptor: AnsiString;
  l_ValorUnitarioReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaDetalleImportes);
    l_CantidadReceptor := Self.CantidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CantidadReceptor', l_CantidadReceptor);
    l_UnidadReceptor := Self.UnidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('UnidadReceptor', l_UnidadReceptor);
    l_DescripcionReceptor := Self.DescripcionReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    l_ValorUnitarioReceptor := Self.ValorUnitarioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    l_ImporteReceptor := Self.ImporteReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteReceptor', l_ImporteReceptor);
  end
  else begin
    l_CantidadReceptor := Self.CantidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CantidadReceptor', l_CantidadReceptor);
    l_DescripcionReceptor := Self.DescripcionReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    l_ImporteReceptor := Self.ImporteReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteReceptor', l_ImporteReceptor);
    l_UnidadReceptor := Self.UnidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('UnidadReceptor', l_UnidadReceptor);
    l_ValorUnitarioReceptor := Self.ValorUnitarioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
  end;
end;

{ TFacturaElectronicaDetalleImportesCollection }
constructor TFacturaElectronicaDetalleImportesCollection.Create;
begin
  inherited Create(TFacturaElectronicaDetalleImportes);
end;

constructor TFacturaElectronicaDetalleImportesCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaDetalleImportesCollection.Add: TFacturaElectronicaDetalleImportes;
begin
  Result := TFacturaElectronicaDetalleImportes(inherited Add);
end;

function TFacturaElectronicaDetalleImportesCollection.GetItems(aIndex: Integer): TFacturaElectronicaDetalleImportes;
begin
  Result := TFacturaElectronicaDetalleImportes(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaDetalleImportesCollection.LoadFromArray(anArray: ATFacturaElectronicaDetalleImportes);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TFacturaElectronicaDetalleImportesCollection.SaveToArray(anArray: ATFacturaElectronicaDetalleImportes);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TFacturaElectronicaDetalleImportes(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TFacturaElectronicaDetalleImportesCollection.SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImportes);
begin
  TFacturaElectronicaDetalleImportes(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaDetalleImpuestos }

procedure TFacturaElectronicaDetalleImpuestos.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TFacturaElectronicaDetalleImpuestos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TFacturaElectronicaDetalleImpuestos) then begin
    lSource := LibraryEmpresas_Intf.TFacturaElectronicaDetalleImpuestos(iSource);

    Self.ImpuestoReceptor := lSource.ImpuestoReceptor;
    Self.TasaReceptor := lSource.TasaReceptor;
    Self.ImporteImpReceptor := lSource.ImporteImpReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImpuestos.ReadComplex(ASerializer: TObject);
var
  l_ImporteImpReceptor: AnsiString;
  l_ImpuestoReceptor: AnsiString;
  l_TasaReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ImpuestoReceptor := Self.ImpuestoReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImpuestoReceptor']));
    end;
    Self.ImpuestoReceptor := l_ImpuestoReceptor;
    l_TasaReceptor := Self.TasaReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('TasaReceptor', l_TasaReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TasaReceptor']));
    end;
    Self.TasaReceptor := l_TasaReceptor;
    l_ImporteImpReceptor := Self.ImporteImpReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImporteImpReceptor']));
    end;
    Self.ImporteImpReceptor := l_ImporteImpReceptor;
  end
  else begin
    l_ImporteImpReceptor := Self.ImporteImpReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImporteImpReceptor']));
    end;
    Self.ImporteImpReceptor := l_ImporteImpReceptor;
    l_ImpuestoReceptor := Self.ImpuestoReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImpuestoReceptor']));
    end;
    Self.ImpuestoReceptor := l_ImpuestoReceptor;
    l_TasaReceptor := Self.TasaReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('TasaReceptor', l_TasaReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TasaReceptor']));
    end;
    Self.TasaReceptor := l_TasaReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImpuestos.WriteComplex(ASerializer: TObject);
var
  l_ImporteImpReceptor: AnsiString;
  l_ImpuestoReceptor: AnsiString;
  l_TasaReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaDetalleImpuestos);
    l_ImpuestoReceptor := Self.ImpuestoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    l_TasaReceptor := Self.TasaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('TasaReceptor', l_TasaReceptor);
    l_ImporteImpReceptor := Self.ImporteImpReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
  end
  else begin
    l_ImporteImpReceptor := Self.ImporteImpReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    l_ImpuestoReceptor := Self.ImpuestoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    l_TasaReceptor := Self.TasaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('TasaReceptor', l_TasaReceptor);
  end;
end;

{ TFacturaElectronicaDetalleImpuestosCollection }
constructor TFacturaElectronicaDetalleImpuestosCollection.Create;
begin
  inherited Create(TFacturaElectronicaDetalleImpuestos);
end;

constructor TFacturaElectronicaDetalleImpuestosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaDetalleImpuestosCollection.Add: TFacturaElectronicaDetalleImpuestos;
begin
  Result := TFacturaElectronicaDetalleImpuestos(inherited Add);
end;

function TFacturaElectronicaDetalleImpuestosCollection.GetItems(aIndex: Integer): TFacturaElectronicaDetalleImpuestos;
begin
  Result := TFacturaElectronicaDetalleImpuestos(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaDetalleImpuestosCollection.LoadFromArray(anArray: ATFacturaElectronicaDetalleImpuestos);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TFacturaElectronicaDetalleImpuestosCollection.SaveToArray(anArray: ATFacturaElectronicaDetalleImpuestos);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TFacturaElectronicaDetalleImpuestos(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosCollection.SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImpuestos);
begin
  TFacturaElectronicaDetalleImpuestos(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosFacturaPemex }

procedure TDatosFacturaPemex.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDatosFacturaPemex;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDatosFacturaPemex) then begin
    lSource := LibraryEmpresas_Intf.TDatosFacturaPemex(iSource);

    Self.TurnoID := lSource.TurnoID;
    Self.EstacionID := lSource.EstacionID;
    Self.Fecha := lSource.Fecha;
    Self.Nombre := lSource.Nombre;
    Self.FacturaPemexID := lSource.FacturaPemexID;
    Self.Serie := lSource.Serie;
    Self.Folio := lSource.Folio;
    Self.Total := lSource.Total;
    if System.Assigned(lSource.fDetalleFactura) then
      Self.DetalleFactura.Assign(lSource.fDetalleFactura)
    else
      SysUtils.FreeAndNil(fDetalleFactura);
    Self.ProductoID := lSource.ProductoID;
  end;
end;

function TDatosFacturaPemex.GetDetalleFactura: ADetalleFacturaPemex;
begin
  if (fDetalleFactura = nil) then fDetalleFactura := ADetalleFacturaPemex.Create();
  Result := fDetalleFactura;
end;

procedure TDatosFacturaPemex.ReadComplex(ASerializer: TObject);
var
  l_DetalleFactura: ADetalleFacturaPemex;
  l_EstacionID: Integer;
  l_FacturaPemexID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Nombre: AnsiString;
  l_ProductoID: Integer;
  l_Serie: AnsiString;
  l_Total: Double;
  l_TurnoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TurnoID := Self.TurnoID;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoID', TypInfo.otSLong, l_TurnoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoID']));
    end;
    Self.TurnoID := l_TurnoID;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_FacturaPemexID := Self.FacturaPemexID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaPemexID', TypInfo.otSLong, l_FacturaPemexID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaPemexID']));
    end;
    Self.FacturaPemexID := l_FacturaPemexID;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadInteger('Folio', TypInfo.otSLong, l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_DetalleFactura := int_DetalleFactura;
    try
      TROSerializer(ASerializer).ReadArray('DetalleFactura', ADetalleFacturaPemex, l_DetalleFactura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleFactura']));
    end;
    if int_DetalleFactura <> l_DetalleFactura then Self.DetalleFactura.Free;
    Self.DetalleFactura := l_DetalleFactura;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
  end
  else begin
    l_DetalleFactura := int_DetalleFactura;
    try
      TROSerializer(ASerializer).ReadArray('DetalleFactura', ADetalleFacturaPemex, l_DetalleFactura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleFactura']));
    end;
    if int_DetalleFactura <> l_DetalleFactura then DetalleFactura.Free;
    Self.DetalleFactura := l_DetalleFactura;
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_FacturaPemexID := Self.FacturaPemexID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaPemexID', TypInfo.otSLong, l_FacturaPemexID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaPemexID']));
    end;
    Self.FacturaPemexID := l_FacturaPemexID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadInteger('Folio', TypInfo.otSLong, l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_TurnoID := Self.TurnoID;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoID', TypInfo.otSLong, l_TurnoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoID']));
    end;
    Self.TurnoID := l_TurnoID;
  end;
end;

procedure TDatosFacturaPemex.WriteComplex(ASerializer: TObject);
var
  l_DetalleFactura: ADetalleFacturaPemex;
  l_EstacionID: Integer;
  l_FacturaPemexID: Integer;
  l_Fecha: DateTime;
  l_Folio: Integer;
  l_Nombre: AnsiString;
  l_ProductoID: Integer;
  l_Serie: AnsiString;
  l_Total: Double;
  l_TurnoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosFacturaPemex);
    l_TurnoID := Self.TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', TypInfo.otSLong, l_TurnoID);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_FacturaPemexID := Self.FacturaPemexID;
    TROSerializer(ASerializer).WriteInteger('FacturaPemexID', TypInfo.otSLong, l_FacturaPemexID);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', TypInfo.otSLong, l_Folio);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_DetalleFactura := int_DetalleFactura;
    TROSerializer(ASerializer).WriteArray('DetalleFactura', l_DetalleFactura, ADetalleFacturaPemex);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
  end
  else begin
    l_DetalleFactura := int_DetalleFactura;
    TROSerializer(ASerializer).WriteArray('DetalleFactura', l_DetalleFactura, ADetalleFacturaPemex);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_FacturaPemexID := Self.FacturaPemexID;
    TROSerializer(ASerializer).WriteInteger('FacturaPemexID', TypInfo.otSLong, l_FacturaPemexID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', TypInfo.otSLong, l_Folio);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_TurnoID := Self.TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', TypInfo.otSLong, l_TurnoID);
  end;
end;

{ TDatosFacturaPemexCollection }
constructor TDatosFacturaPemexCollection.Create;
begin
  inherited Create(TDatosFacturaPemex);
end;

constructor TDatosFacturaPemexCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosFacturaPemexCollection.Add: TDatosFacturaPemex;
begin
  Result := TDatosFacturaPemex(inherited Add);
end;

function TDatosFacturaPemexCollection.GetItems(aIndex: Integer): TDatosFacturaPemex;
begin
  Result := TDatosFacturaPemex(inherited Items[aIndex]);
end;

procedure TDatosFacturaPemexCollection.SetItems(aIndex: Integer; const Value: TDatosFacturaPemex);
begin
  TDatosFacturaPemex(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleFacturaPemex }

procedure TDetalleFacturaPemex.Assign(iSource: TPersistent);
var
  lSource: LibraryEmpresas_Intf.TDetalleFacturaPemex;
begin
  inherited Assign(iSource);
  if (iSource is LibraryEmpresas_Intf.TDetalleFacturaPemex) then begin
    lSource := LibraryEmpresas_Intf.TDetalleFacturaPemex(iSource);

    Self.FacturaPemexID := lSource.FacturaPemexID;
    Self.TipoValorPemexID := lSource.TipoValorPemexID;
    Self.Cantidad := lSource.Cantidad;
    Self.Importe := lSource.Importe;
    Self.Precio := lSource.Precio;
  end;
end;

procedure TDetalleFacturaPemex.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_FacturaPemexID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_TipoValorPemexID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FacturaPemexID := Self.FacturaPemexID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaPemexID', TypInfo.otSLong, l_FacturaPemexID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaPemexID']));
    end;
    Self.FacturaPemexID := l_FacturaPemexID;
    l_TipoValorPemexID := Self.TipoValorPemexID;
    try
      TROSerializer(ASerializer).ReadInteger('TipoValorPemexID', TypInfo.otSLong, l_TipoValorPemexID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoValorPemexID']));
    end;
    Self.TipoValorPemexID := l_TipoValorPemexID;
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
  end
  else begin
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_FacturaPemexID := Self.FacturaPemexID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaPemexID', TypInfo.otSLong, l_FacturaPemexID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaPemexID']));
    end;
    Self.FacturaPemexID := l_FacturaPemexID;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
    l_TipoValorPemexID := Self.TipoValorPemexID;
    try
      TROSerializer(ASerializer).ReadInteger('TipoValorPemexID', TypInfo.otSLong, l_TipoValorPemexID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TipoValorPemexID']));
    end;
    Self.TipoValorPemexID := l_TipoValorPemexID;
  end;
end;

procedure TDetalleFacturaPemex.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_FacturaPemexID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_TipoValorPemexID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleFacturaPemex);
    l_FacturaPemexID := Self.FacturaPemexID;
    TROSerializer(ASerializer).WriteInteger('FacturaPemexID', TypInfo.otSLong, l_FacturaPemexID);
    l_TipoValorPemexID := Self.TipoValorPemexID;
    TROSerializer(ASerializer).WriteInteger('TipoValorPemexID', TypInfo.otSLong, l_TipoValorPemexID);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
  end
  else begin
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_FacturaPemexID := Self.FacturaPemexID;
    TROSerializer(ASerializer).WriteInteger('FacturaPemexID', TypInfo.otSLong, l_FacturaPemexID);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
    l_TipoValorPemexID := Self.TipoValorPemexID;
    TROSerializer(ASerializer).WriteInteger('TipoValorPemexID', TypInfo.otSLong, l_TipoValorPemexID);
  end;
end;

{ TDetalleFacturaPemexCollection }
constructor TDetalleFacturaPemexCollection.Create;
begin
  inherited Create(TDetalleFacturaPemex);
end;

constructor TDetalleFacturaPemexCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleFacturaPemexCollection.Add: TDetalleFacturaPemex;
begin
  Result := TDetalleFacturaPemex(inherited Add);
end;

function TDetalleFacturaPemexCollection.GetItems(aIndex: Integer): TDetalleFacturaPemex;
begin
  Result := TDetalleFacturaPemex(inherited Items[aIndex]);
end;

procedure TDetalleFacturaPemexCollection.LoadFromArray(anArray: ADetalleFacturaPemex);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDetalleFacturaPemexCollection.SaveToArray(anArray: ADetalleFacturaPemex);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDetalleFacturaPemex(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDetalleFacturaPemexCollection.SetItems(aIndex: Integer; const Value: TDetalleFacturaPemex);
begin
  TDetalleFacturaPemex(inherited Items[aIndex]).Assign(Value);
end;

{ CoServiceEmpresas }

class function CoServiceEmpresas.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceEmpresas;
begin
  Result := TServiceEmpresas_Proxy.Create(aMessage, aTransportChannel);
end;

class function CoServiceEmpresas.Create(const aUri: TROUri): IServiceEmpresas;
begin
  Result := TServiceEmpresas_Proxy.Create(aUri);
end;

class function CoServiceEmpresas.Create(const aUrl: string): IServiceEmpresas;
begin
  Result := TServiceEmpresas_Proxy.Create(aUrl);
end;

{ TServiceEmpresas_Proxy }

function TServiceEmpresas_Proxy.__GetInterfaceName:string;
begin
  Result := 'ServiceEmpresas';
end;

function TServiceEmpresas_Proxy.AbreDataSetReporte(const SQL: AnsiString; const Parametros: TParametros): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'AbreDataSetReporte');
    lMessage.Write('SQL', System.TypeInfo(AnsiString), SQL, []);
    lMessage.Write('Parametros', System.TypeInfo(LibraryEmpresas_Intf.TParametros), Parametros, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.ActualizaCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime;
                                                const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Liquidacion: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaCupon');
    lMessage.Write('Barras', System.TypeInfo(AnsiString), Barras, []);
    lMessage.Write('DiaConsumo', System.TypeInfo(Integer), DiaConsumo, []);
    lMessage.Write('EjercicioConsumo', System.TypeInfo(Integer), EjercicioConsumo, []);
    lMessage.Write('FechaConsumo', System.TypeInfo(DateTime), FechaConsumo, [paIsDateTime]);
    lMessage.Write('PeriodoConsumo', System.TypeInfo(Integer), PeriodoConsumo, []);
    lMessage.Write('Secuencia', System.TypeInfo(Integer), Secuencia, []);
    lMessage.Write('Ticket', System.TypeInfo(Integer), Ticket, []);
    lMessage.Write('Liquidacion', System.TypeInfo(Integer), Liquidacion, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.ActualizaCuponConReferencia(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime;
                                                             const PeriodoConsumo: Integer; const Secuencia: Integer; const Ticket: Integer; const Referencia: AnsiString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaCuponConReferencia');
    lMessage.Write('Barras', System.TypeInfo(AnsiString), Barras, []);
    lMessage.Write('DiaConsumo', System.TypeInfo(Integer), DiaConsumo, []);
    lMessage.Write('EjercicioConsumo', System.TypeInfo(Integer), EjercicioConsumo, []);
    lMessage.Write('FechaConsumo', System.TypeInfo(DateTime), FechaConsumo, [paIsDateTime]);
    lMessage.Write('PeriodoConsumo', System.TypeInfo(Integer), PeriodoConsumo, []);
    lMessage.Write('Secuencia', System.TypeInfo(Integer), Secuencia, []);
    lMessage.Write('Ticket', System.TypeInfo(Integer), Ticket, []);
    lMessage.Write('Referencia', System.TypeInfo(AnsiString), Referencia, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.ActualizaLiquidacionCorte(const Liquidacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaLiquidacionCorte');
    lMessage.Write('Liquidacion', System.TypeInfo(Integer), Liquidacion, []);
    lMessage.Write('Secuencia', System.TypeInfo(Integer), Secuencia, []);
    lMessage.Write('AgrupacionID', System.TypeInfo(Integer), AgrupacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.ActualizarStatusValeCredito(const CarteraValeCreditoID: Integer; const Status: AnsiString; const FacturaID: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizarStatusValeCredito');
    lMessage.Write('CarteraValeCreditoID', System.TypeInfo(Integer), CarteraValeCreditoID, []);
    lMessage.Write('Status', System.TypeInfo(AnsiString), Status, []);
    lMessage.Write('FacturaID', System.TypeInfo(Integer), FacturaID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.ActualizaStatusCupon(const Barras: AnsiString; const DiaConsumo: Integer; const EjercicioConsumo: Integer; const FechaConsumo: DateTime;
                                                      const LiquidacionID: Integer; const PeriodoConsumo: Integer; const Secuencia: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaStatusCupon');
    lMessage.Write('Barras', System.TypeInfo(AnsiString), Barras, []);
    lMessage.Write('DiaConsumo', System.TypeInfo(Integer), DiaConsumo, []);
    lMessage.Write('EjercicioConsumo', System.TypeInfo(Integer), EjercicioConsumo, []);
    lMessage.Write('FechaConsumo', System.TypeInfo(DateTime), FechaConsumo, [paIsDateTime]);
    lMessage.Write('LiquidacionID', System.TypeInfo(Integer), LiquidacionID, []);
    lMessage.Write('PeriodoConsumo', System.TypeInfo(Integer), PeriodoConsumo, []);
    lMessage.Write('Secuencia', System.TypeInfo(Integer), Secuencia, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.GeneraFactura(const EstacionID: Integer; const Serie: AnsiString; const FechaCorte: DateTime; const ClienteID: Integer;
                                              const UsuarioID: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'GeneraFactura');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('FechaCorte', System.TypeInfo(DateTime), FechaCorte, [paIsDateTime]);
    lMessage.Write('ClienteID', System.TypeInfo(Integer), ClienteID, []);
    lMessage.Write('UsuarioID', System.TypeInfo(Integer), UsuarioID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'BuscaReporte');
    lMessage.Write('Nombre', System.TypeInfo(AnsiString), Nombre, []);
    lMessage.Write('TipoTemplate', System.TypeInfo(Integer), TipoTemplate, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TReporte), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.CambiaFolioFactura(const Serie: AnsiString; const Folio: Integer; const NewSerie: AnsiString; const NewFolio: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'CambiaFolioFactura');
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('Folio', System.TypeInfo(Integer), Folio, []);
    lMessage.Write('NewSerie', System.TypeInfo(AnsiString), NewSerie, []);
    lMessage.Write('NewFolio', System.TypeInfo(Integer), NewFolio, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.CancelaFactura(const Folio: Integer; const Serie: AnsiString; const Fecha: DateTime; const EstacionID: Integer; const UsuarioID: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'CancelaFactura');
    lMessage.Write('Folio', System.TypeInfo(Integer), Folio, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('Fecha', System.TypeInfo(DateTime), Fecha, [paIsDateTime]);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('UsuarioID', System.TypeInfo(Integer), UsuarioID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'CierraLiquidacion');
    lMessage.Write('LiquidacionID', System.TypeInfo(Integer), LiquidacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.CostoProducto(const ProductoID: Integer): Double;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'CostoProducto');
    lMessage.Write('ProductoID', System.TypeInfo(Integer), ProductoID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Double), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.DatosCliente(const ClienteID: Integer; const Referencia: AnsiString): TDatosCliente;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'DatosCliente');
    lMessage.Write('ClienteID', System.TypeInfo(Integer), ClienteID, []);
    lMessage.Write('Referencia', System.TypeInfo(AnsiString), Referencia, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TDatosCliente), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.Existencia(const EstacionID: Integer; const AlmacenID: Integer; const ProductoID: Integer; const Fecha: DateTime): Double;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'Existencia');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('AlmacenID', System.TypeInfo(Integer), AlmacenID, []);
    lMessage.Write('ProductoID', System.TypeInfo(Integer), ProductoID, []);
    lMessage.Write('Fecha', System.TypeInfo(DateTime), Fecha, [paIsDateTime]);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Double), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.FacturaExpress(const Serie: AnsiString; const Folio: Integer): TFacturaExpress;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'FacturaExpress');
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('Folio', System.TypeInfo(Integer), Folio, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TFacturaExpress), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.FacturaID(const Serie: AnsiString; const Folio: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'FacturaID');
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('Folio', System.TypeInfo(Integer), Folio, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.FacturaYLiquidacion(const ClienteID: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'FacturaYLiquidacion');
    lMessage.Write('ClienteID', System.TypeInfo(Integer), ClienteID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.Fecha: DateTime;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'Fecha');
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(DateTime), Result, [paIsDateTime]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'Folio');
    lMessage.Write('Campo', System.TypeInfo(AnsiString), Campo, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'FolioActual');
    lMessage.Write('Campo', System.TypeInfo(AnsiString), Campo, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.FolioActual2(const Campo: AnsiString; const Serie: AnsiString; const EstacionID: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'FolioActual2');
    lMessage.Write('Campo', System.TypeInfo(AnsiString), Campo, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardaAccesos');
    lMessage.Write('UsuarioID', System.TypeInfo(Integer), UsuarioID, []);
    lMessage.Write('Lista', System.TypeInfo(AnsiString), Lista, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.GuardaConsumoExpress(const Consumo: TConsumoExpress): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardaConsumoExpress');
    lMessage.Write('Consumo', System.TypeInfo(LibraryEmpresas_Intf.TConsumoExpress), Consumo, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.GuardaLimiteFactura(const UsuarioID: Int64; const Cantidad: Double);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardaLimiteFactura');
    lMessage.Write('UsuarioID', System.TypeInfo(Int64), UsuarioID, []);
    lMessage.Write('Cantidad', System.TypeInfo(Double), Cantidad, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.GuardarDatosFactura(const DatosFactura: TDatosFactura);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardarDatosFactura');
    lMessage.Write('DatosFactura', System.TypeInfo(LibraryEmpresas_Intf.TDatosFactura), DatosFactura, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.GuardarDatosLiquidacion(const DatosLiquidacion: TDatosLiquidacion);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardarDatosLiquidacion');
    lMessage.Write('DatosLiquidacion', System.TypeInfo(LibraryEmpresas_Intf.TDatosLiquidacion), DatosLiquidacion, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.GuardarDatosReciboPago(const DatosReciboPago: TDatosReciboPago);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardarDatosReciboPago');
    lMessage.Write('DatosReciboPago', System.TypeInfo(LibraryEmpresas_Intf.TDatosReciboPago), DatosReciboPago, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.GuardarFacturaExpress(const ClienteID: Integer; const Serie: AnsiString; const EstacionID: Integer; const TicketID: Integer): TFacturaExpress;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardarFacturaExpress');
    lMessage.Write('ClienteID', System.TypeInfo(Integer), ClienteID, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('TicketID', System.TypeInfo(Integer), TicketID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TFacturaExpress), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.InsertaDeposito(const DepositoID: Integer; const Cantidad: Double; const Usuario: Integer; const Fecha: DateTime; const Secuencia: Integer;
                                                 const EstacionID: Integer; const Descripcion: AnsiString; const Ejercicio: Integer; const Periodo: Integer;
                                                 const Dia: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'InsertaDeposito');
    lMessage.Write('DepositoID', System.TypeInfo(Integer), DepositoID, []);
    lMessage.Write('Cantidad', System.TypeInfo(Double), Cantidad, []);
    lMessage.Write('Usuario', System.TypeInfo(Integer), Usuario, []);
    lMessage.Write('Fecha', System.TypeInfo(DateTime), Fecha, [paIsDateTime]);
    lMessage.Write('Secuencia', System.TypeInfo(Integer), Secuencia, []);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('Descripcion', System.TypeInfo(AnsiString), Descripcion, []);
    lMessage.Write('Ejercicio', System.TypeInfo(Integer), Ejercicio, []);
    lMessage.Write('Periodo', System.TypeInfo(Integer), Periodo, []);
    lMessage.Write('Dia', System.TypeInfo(Integer), Dia, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.InsertaProductoPrecio(const ProductoID: Integer; const EstacionID: Integer; const Precio: Double);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'InsertaProductoPrecio');
    lMessage.Write('ProductoID', System.TypeInfo(Integer), ProductoID, []);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('Precio', System.TypeInfo(Double), Precio, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'Login');
    lMessage.Write('Usuario', System.TypeInfo(AnsiString), Usuario, []);
    lMessage.Write('Clave', System.TypeInfo(AnsiString), Clave, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TLoginInfo), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const Folio: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ModificarFolioActual');
    lMessage.Write('Campo', System.TypeInfo(AnsiString), Campo, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('Folio', System.TypeInfo(Integer), Folio, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ObtenerStatusCupon(const Barras: AnsiString): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ObtenerStatusCupon');
    lMessage.Write('Barras', System.TypeInfo(AnsiString), Barras, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ObtenerTipoCambioIDPorEstacion(const EstacionID: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ObtenerTipoCambioIDPorEstacion');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ObtenerTipoCambioPorEstacion(const EstacionID: Integer): Double;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ObtenerTipoCambioPorEstacion');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Double), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.PrecioProducto(const EstacionID: Integer; const ProductoID: Integer): Double;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'PrecioProducto');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('ProductoID', System.TypeInfo(Integer), ProductoID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Double), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.StatusTicket(const EstacionID: Integer; const TicketID: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'StatusTicket');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('TicketID', System.TypeInfo(Integer), TicketID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.SumaAnticipo(const Estacion: Integer; const Secuencia: Integer): Double;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'SumaAnticipo');
    lMessage.Write('Estacion', System.TypeInfo(Integer), Estacion, []);
    lMessage.Write('Secuencia', System.TypeInfo(Integer), Secuencia, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Double), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.SumaVentasCorte(const Estacion: Integer; const Secuencia: Integer; const AgrupacionID: Integer): Double;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'SumaVentasCorte');
    lMessage.Write('Estacion', System.TypeInfo(Integer), Estacion, []);
    lMessage.Write('Secuencia', System.TypeInfo(Integer), Secuencia, []);
    lMessage.Write('AgrupacionID', System.TypeInfo(Integer), AgrupacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Double), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ValoresTurno(const EstacionID: Integer; const TurnoID: Integer): TValoresTurno;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ValoresTurno');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('TurnoID', System.TypeInfo(Integer), TurnoID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TValoresTurno), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.VersionServer: AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'VersionServer');
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.LiquidacionCerrada(const EstacionID: Integer; const TurnoID: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'LiquidacionCerrada');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('TurnoID', System.TypeInfo(Integer), TurnoID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ClienteValido(const ClienteID: Integer; const NewClienteID: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ClienteValido');
    lMessage.Write('ClienteID', System.TypeInfo(Integer), ClienteID, []);
    lMessage.Write('NewClienteID', System.TypeInfo(Integer), NewClienteID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.BuscaOtroProducto(const EstacionID: Integer; const Codigo: AnsiString): TOtroProducto;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'BuscaOtroProducto');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('Codigo', System.TypeInfo(AnsiString), Codigo, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TOtroProducto), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.TurnoALiquidacionID(const TurnoID: Integer; const EstacionID: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'TurnoALiquidacionID');
    lMessage.Write('TurnoID', System.TypeInfo(Integer), TurnoID, []);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.BuscaSagarpa(const EstacionID: Integer): TSagarpa;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'BuscaSagarpa');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TSagarpa), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.PuntosCalculaSaldo(const ClienteID: Integer): Double;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosCalculaSaldo');
    lMessage.Write('ClienteID', System.TypeInfo(Integer), ClienteID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Double), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.PuntosCalculaPuntos(const ClienteID: Integer; const ProductoID: Integer; const Volumen: Double): Double;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosCalculaPuntos');
    lMessage.Write('ClienteID', System.TypeInfo(Integer), ClienteID, []);
    lMessage.Write('ProductoID', System.TypeInfo(Integer), ProductoID, []);
    lMessage.Write('Volumen', System.TypeInfo(Double), Volumen, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Double), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.PuntosGuardaDatos(const Datos: TDatosPuntos);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosGuardaDatos');
    lMessage.Write('Datos', System.TypeInfo(LibraryEmpresas_Intf.TDatosPuntos), Datos, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.PuntosDatos(const ClienteID: Integer): TDatosPuntos;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosDatos');
    lMessage.Write('ClienteID', System.TypeInfo(Integer), ClienteID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TDatosPuntos), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.EliminaAutomaticosLiquidacion(const EstacionID: Integer; const TurnoID: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'EliminaAutomaticosLiquidacion');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('TurnoID', System.TypeInfo(Integer), TurnoID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.BuscaDespachadorLiquidacion(const BombaID: Integer; const EstacionID: Integer; const TurnoID: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'BuscaDespachadorLiquidacion');
    lMessage.Write('BombaID', System.TypeInfo(Integer), BombaID, []);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('TurnoID', System.TypeInfo(Integer), TurnoID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TEntregaPremio;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'EntregaPremio');
    lMessage.Write('ClienteID', System.TypeInfo(Integer), ClienteID, []);
    lMessage.Write('PremioID', System.TypeInfo(Integer), PremioID, []);
    lMessage.Write('Cantidad', System.TypeInfo(Integer), Cantidad, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TEntregaPremio), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.DatosPremio(const PremioID: Integer): TDatosPremio;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'DatosPremio');
    lMessage.Write('PremioID', System.TypeInfo(Integer), PremioID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TDatosPremio), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ValidaConsumo(const Consumo: TConsumoExpress): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ValidaConsumo');
    lMessage.Write('Consumo', System.TypeInfo(LibraryEmpresas_Intf.TConsumoExpress), Consumo, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.AgrupacionesBomba(const EstacionID: Integer): AAgrupacion;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'AgrupacionesBomba');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.AAgrupacion), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.DatosCerrarLiquidacion(const EstacionID: Integer; const TurnoID: Integer): TDatosCerrarLiquidacion;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'DatosCerrarLiquidacion');
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('TurnoID', System.TypeInfo(Integer), TurnoID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TDatosCerrarLiquidacion), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.ProcesaVentasLiquidacion(const Datos: TDatosCerrarLiquidacion);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ProcesaVentasLiquidacion');
    lMessage.Write('Datos', System.TypeInfo(LibraryEmpresas_Intf.TDatosCerrarLiquidacion), Datos, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.TicketsLiquidacion(const LiquidacionID: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'TicketsLiquidacion');
    lMessage.Write('LiquidacionID', System.TypeInfo(Integer), LiquidacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ValidaFolioFactura(const Serie: AnsiString; const Folio: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ValidaFolioFactura');
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('Folio', System.TypeInfo(Integer), Folio, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.PuntosGuardaCriterios(const PuntosCriterioID: Integer; const Datos: AnsiString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosGuardaCriterios');
    lMessage.Write('PuntosCriterioID', System.TypeInfo(Integer), PuntosCriterioID, []);
    lMessage.Write('Datos', System.TypeInfo(AnsiString), Datos, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.DatosFacturaElectronica(const FacturaID: Integer; const EstacionID: Integer): TFacturaElectronica;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'DatosFacturaElectronica');
    lMessage.Write('FacturaID', System.TypeInfo(Integer), FacturaID, []);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryEmpresas_Intf.TFacturaElectronica), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.LlavePrivaCertificado(const LlavePrivada: AnsiString; const Certificado: AnsiString; const GasolineroID: Integer; const Password: AnsiString;
                                                      const EstacionID: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'LlavePrivaCertificado');
    lMessage.Write('LlavePrivada', System.TypeInfo(AnsiString), LlavePrivada, []);
    lMessage.Write('Certificado', System.TypeInfo(AnsiString), Certificado, []);
    lMessage.Write('GasolineroID', System.TypeInfo(Integer), GasolineroID, []);
    lMessage.Write('Password', System.TypeInfo(AnsiString), Password, []);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.SELLOPEMs(const Texto: UnicodeString; const EstacionID: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'SELLOPEMs');
    lMessage.Write('Texto', System.TypeInfo(UnicodeString), Texto, []);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.CERs(const DIR: AnsiString): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'CERs');
    lMessage.Write('DIR', System.TypeInfo(AnsiString), DIR, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ValidaLiquidacionDespachador(const LiquidacionID: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ValidaLiquidacionDespachador');
    lMessage.Write('LiquidacionID', System.TypeInfo(Integer), LiquidacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ActualizaLiquidacionProd(const Estacion: Integer; const FechaIni: DateTime; const FechaFin: DateTime; const TurnoID: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaLiquidacionProd');
    lMessage.Write('Estacion', System.TypeInfo(Integer), Estacion, []);
    lMessage.Write('FechaIni', System.TypeInfo(DateTime), FechaIni, [paIsDateTime]);
    lMessage.Write('FechaFin', System.TypeInfo(DateTime), FechaFin, [paIsDateTime]);
    lMessage.Write('TurnoID', System.TypeInfo(Integer), TurnoID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.PuntosDespachador(const TurnoID: Integer; const EstacionID: Integer; const UsuarioID: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'PuntosDespachador');
    lMessage.Write('TurnoID', System.TypeInfo(Integer), TurnoID, []);
    lMessage.Write('EstacionID', System.TypeInfo(Integer), EstacionID, []);
    lMessage.Write('UsuarioID', System.TypeInfo(Integer), UsuarioID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.GuardarDatosFacturaPemex(const DatosFacturaPemex: TDatosFacturaPemex);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'GuardarDatosFacturaPemex');
    lMessage.Write('DatosFacturaPemex', System.TypeInfo(LibraryEmpresas_Intf.TDatosFacturaPemex), DatosFacturaPemex, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.AfectaInventarios(const LiquidacionID: Integer; const UsuarioID: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'AfectaInventarios');
    lMessage.Write('LiquidacionID', System.TypeInfo(Integer), LiquidacionID, []);
    lMessage.Write('UsuarioID', System.TypeInfo(Integer), UsuarioID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: UnicodeString; const SelloDigital: UnicodeString;
                                                           const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString;
                                                           const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'InsertaFacturaElectronica');
    lMessage.Write('FacturaElectronicaID', System.TypeInfo(Integer), FacturaElectronicaID, []);
    lMessage.Write('CadenaOriginal', System.TypeInfo(UnicodeString), CadenaOriginal, []);
    lMessage.Write('SelloDigital', System.TypeInfo(UnicodeString), SelloDigital, []);
    lMessage.Write('FacturaID', System.TypeInfo(Integer), FacturaID, []);
    lMessage.Write('Vigencia', System.TypeInfo(Boolean), Vigencia, []);
    lMessage.Write('Enviado', System.TypeInfo(Boolean), Enviado, []);
    lMessage.Write('NoCertificado', System.TypeInfo(AnsiString), NoCertificado, []);
    lMessage.Write('NoAprobacion', System.TypeInfo(AnsiString), NoAprobacion, []);
    lMessage.Write('FechaAprobacion', System.TypeInfo(DateTime), FechaAprobacion, [paIsDateTime]);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.CERsNUM(const DIR: AnsiString): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'CERsNUM');
    lMessage.Write('DIR', System.TypeInfo(AnsiString), DIR, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.ActualizaFirmaDefault(const UsuarioID: Integer; const FIRMA: Binary): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ActualizaFirmaDefault');
    lMessage.Write('UsuarioID', System.TypeInfo(Integer), UsuarioID, []);
    lMessage.Write('FIRMA', System.TypeInfo(Binary), FIRMA, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.obtendatosempleados(const EstacionID: AnsiString): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'obtendatosempleados');
    lMessage.Write('EstacionID', System.TypeInfo(AnsiString), EstacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceEmpresas_Proxy.ProgramaMantenimiento(const IDPROGRAMAMANTENIMIENTO: Integer; const IDESTACION: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'ProgramaMantenimiento');
    lMessage.Write('IDPROGRAMAMANTENIMIENTO', System.TypeInfo(Integer), IDPROGRAMAMANTENIMIENTO, []);
    lMessage.Write('IDESTACION', System.TypeInfo(Integer), IDESTACION, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.obtendatosActividadesProgramadas(const IDESTACION: Integer; const TIPO: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'obtendatosActividadesProgramadas');
    lMessage.Write('IDESTACION', System.TypeInfo(Integer), IDESTACION, []);
    lMessage.Write('TIPO', System.TypeInfo(Integer), TIPO, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.obtenNotificacionesDiarias(const IDESTACION: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'obtenNotificacionesDiarias');
    lMessage.Write('IDESTACION', System.TypeInfo(Integer), IDESTACION, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceEmpresas_Proxy.registraactividadrealizada(const IDACTIVIDADMANTENIMIENTO: Integer; const NOTA: AnsiString; const STATUS: AnsiString): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryEmpresas', __InterfaceName, 'registraactividadrealizada');
    lMessage.Write('IDACTIVIDADMANTENIMIENTO', System.TypeInfo(Integer), IDACTIVIDADMANTENIMIENTO, []);
    lMessage.Write('NOTA', System.TypeInfo(AnsiString), NOTA, []);
    lMessage.Write('STATUS', System.TypeInfo(AnsiString), STATUS, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

initialization
  RegisterROClass(TParametros);
  RegisterROClass(TFactura);
  RegisterROClass(TDetalleFactura);
  RegisterROClass(TTicketFactura);
  RegisterROClass(TDetalleCupon);
  RegisterROClass(TDetalleValeCreditoFactura);
  RegisterROClass(TDatosFactura);
  RegisterROClass(TLiquidacion);
  RegisterROClass(TLiquidacionDetalle);
  RegisterROClass(TLiquidacionProducto);
  RegisterROClass(TTransaccion);
  RegisterROClass(TDetalleTransaccion);
  RegisterROClass(TCarteraVale);
  RegisterROClass(TDatosLiquidacion);
  RegisterROClass(TReporte);
  RegisterROClass(TRecibo);
  RegisterROClass(TDetalleReciboPago);
  RegisterROClass(TDatosReciboPago);
  RegisterROClass(TDatosRecibo);
  RegisterROClass(TLoginInfo);
  RegisterROClass(TOpcion);
  RegisterROClass(TConsumoExpress);
  RegisterROClass(TDatosCliente);
  RegisterROClass(TFacturaExpress);
  RegisterROClass(TDetalleExpress);
  RegisterROClass(TValoresTurno);
  RegisterROClass(TOtroProducto);
  RegisterROClass(TAgrupacion);
  RegisterROClass(TSagarpa);
  RegisterROClass(TDatosPuntos);
  RegisterROClass(TDatosCelular);
  RegisterROClass(TEntregaPremio);
  RegisterROClass(TDatosPremio);
  RegisterROClass(TConfirmaEnvioA);
  RegisterROClass(TDatosCerrarLiquidacion);
  RegisterROClass(TDespachadorLiquidacion);
  RegisterROClass(TDetalleLiquidacion);
  RegisterROClass(TTipoValor);
  RegisterROClass(TPerfilPuntos);
  RegisterROClass(TFacturaElectronica);
  RegisterROClass(TFacturaElectronicaDetalleImportes);
  RegisterROClass(TFacturaElectronicaDetalleImpuestos);
  RegisterROClass(TDatosFacturaPemex);
  RegisterROClass(TDetalleFacturaPemex);
  RegisterROClass(AAgrupacion);
  RegisterROClass(AAgrupacionBomba);
  RegisterROClass(ADatosCelular);
  RegisterROClass(ADespachadorLiquidacion);
  RegisterROClass(ADetalleExpress);
  RegisterROClass(ADetalleFacturaPemex);
  RegisterROClass(ADetalleLiquidacion);
  RegisterROClass(ArrayOpcion);
  RegisterROClass(ATCarteraVale);
  RegisterROClass(ATDetalleCupon);
  RegisterROClass(ATDetalleFactura);
  RegisterROClass(ATDetalleRecibo);
  RegisterROClass(ATDetalleTransaccion);
  RegisterROClass(ATDetalleValeCreditoFactura);
  RegisterROClass(ATFacturaElectronicaDetalleImportes);
  RegisterROClass(ATFacturaElectronicaDetalleImpuestos);
  RegisterROClass(ATipoValor);
  RegisterROClass(ATLiquidacionDetalle);
  RegisterROClass(ATLiquidacionProducto);
  RegisterROClass(ATTicketFactura);
  RegisterProxyClass(IServiceEmpresas_IID, TServiceEmpresas_Proxy);


finalization
  UnregisterROClass(TParametros);
  UnregisterROClass(TFactura);
  UnregisterROClass(TDetalleFactura);
  UnregisterROClass(TTicketFactura);
  UnregisterROClass(TDetalleCupon);
  UnregisterROClass(TDetalleValeCreditoFactura);
  UnregisterROClass(TDatosFactura);
  UnregisterROClass(TLiquidacion);
  UnregisterROClass(TLiquidacionDetalle);
  UnregisterROClass(TLiquidacionProducto);
  UnregisterROClass(TTransaccion);
  UnregisterROClass(TDetalleTransaccion);
  UnregisterROClass(TCarteraVale);
  UnregisterROClass(TDatosLiquidacion);
  UnregisterROClass(TReporte);
  UnregisterROClass(TRecibo);
  UnregisterROClass(TDetalleReciboPago);
  UnregisterROClass(TDatosReciboPago);
  UnregisterROClass(TDatosRecibo);
  UnregisterROClass(TLoginInfo);
  UnregisterROClass(TOpcion);
  UnregisterROClass(TConsumoExpress);
  UnregisterROClass(TDatosCliente);
  UnregisterROClass(TFacturaExpress);
  UnregisterROClass(TDetalleExpress);
  UnregisterROClass(TValoresTurno);
  UnregisterROClass(TOtroProducto);
  UnregisterROClass(TAgrupacion);
  UnregisterROClass(TSagarpa);
  UnregisterROClass(TDatosPuntos);
  UnregisterROClass(TDatosCelular);
  UnregisterROClass(TEntregaPremio);
  UnregisterROClass(TDatosPremio);
  UnregisterROClass(TConfirmaEnvioA);
  UnregisterROClass(TDatosCerrarLiquidacion);
  UnregisterROClass(TDespachadorLiquidacion);
  UnregisterROClass(TDetalleLiquidacion);
  UnregisterROClass(TTipoValor);
  UnregisterROClass(TPerfilPuntos);
  UnregisterROClass(TFacturaElectronica);
  UnregisterROClass(TFacturaElectronicaDetalleImportes);
  UnregisterROClass(TFacturaElectronicaDetalleImpuestos);
  UnregisterROClass(TDatosFacturaPemex);
  UnregisterROClass(TDetalleFacturaPemex);
  UnregisterROClass(AAgrupacion);
  UnregisterROClass(AAgrupacionBomba);
  UnregisterROClass(ADatosCelular);
  UnregisterROClass(ADespachadorLiquidacion);
  UnregisterROClass(ADetalleExpress);
  UnregisterROClass(ADetalleFacturaPemex);
  UnregisterROClass(ADetalleLiquidacion);
  UnregisterROClass(ArrayOpcion);
  UnregisterROClass(ATCarteraVale);
  UnregisterROClass(ATDetalleCupon);
  UnregisterROClass(ATDetalleFactura);
  UnregisterROClass(ATDetalleRecibo);
  UnregisterROClass(ATDetalleTransaccion);
  UnregisterROClass(ATDetalleValeCreditoFactura);
  UnregisterROClass(ATFacturaElectronicaDetalleImportes);
  UnregisterROClass(ATFacturaElectronicaDetalleImpuestos);
  UnregisterROClass(ATipoValor);
  UnregisterROClass(ATLiquidacionDetalle);
  UnregisterROClass(ATLiquidacionProducto);
  UnregisterROClass(ATTicketFactura);
  UnregisterProxyClass(IServiceEmpresas_IID);


end.
